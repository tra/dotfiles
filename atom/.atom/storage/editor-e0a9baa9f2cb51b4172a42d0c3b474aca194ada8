{"mode":"editor","version":"0.71.0","windowDimensions":{"x":456,"y":22,"width":1097,"height":1366},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/tra/src/R/boot","buffers":[{"text":"# part of R package boot\n# copyright (C) 1997-2001 Angelo J. Canty\n# corrections (C) 1997-2011 B. D. Ripley\n#\n# Unlimited distribution is permitted\n\n# safe version of sample\n# needs R >= 2.9.0\n# only works if size is not specified in R >= 2.11.0, but it always is in boot\nsample0 <- function(x, ...) x[sample.int(length(x), ...)]\nbsample <- function(x, ...) x[sample.int(length(x), replace = TRUE, ...)]\n\nisMatrix <- function(x) length(dim(x)) == 2L\n\n## random permutation of x.\nrperm <- function(x) sample0(x, length(x))\n\n\n\nantithetic.array <- function(n, R, L, strata)\n#\n#  Create an array of indices by antithetic resampling using the\n#  empirical influence values in L.  This function just calls anti.arr\n#  to do the sampling within strata.\n#\n{\n    inds <- as.integer(names(table(strata)))\n    out <- matrix(0L, R, n)\n    for (s in inds) {\n\tgp <- seq_len(n)[strata == s]\n        out[, gp] <- anti.arr(length(gp), R, L[gp], gp)\n    }\n    out\n}\n\nanti.arr <- function(n, R, L, inds=seq_len(n))\n{\n#  R x n array of bootstrap indices, generated antithetically\n#  according to the empirical influence values in L.\n    unique.rank <- function(x) {\n# Assign unique ranks to a numeric vector\n        ranks <- rank(x)\n        if (any(duplicated(ranks))) {\n            inds <- seq_along(x)\n            uniq <- sort(unique(ranks))\n            tab <- table(ranks)\n            for (i in seq_along(uniq))\n                if (tab[i] > 1L) {\n                    gp <- inds[ranks == uniq[i]]\n                    ranks[gp] <- rperm(inds[sort(ranks) == uniq[i]])\n                }\n        }\n        ranks\n    }\n    R1 <- floor(R/2)\n    mat1 <- matrix(bsample(inds, R1*n), R1, n)\n    ranks <- unique.rank(L)\n    rev <- inds\n    for (i in seq_len(n)) rev[i] <- inds[ranks == (n+1-ranks[i])]\n    mat1 <- rbind(mat1, matrix(rev[mat1], R1, n))\n    if (R != 2*R1) mat1 <- rbind(mat1, bsample(inds, n))\n    mat1\n}\n\n\n\n\nbalanced.array <- function(n, R, strata)\n{\n#\n# R x n array of bootstrap indices, sampled hypergeometrically\n# within strata.\n#\n    output <- matrix(rep(seq_len(n), R), n, R)\n    inds <- as.integer(names(table(strata)))\n    for(is in inds) {\n        group <- seq_len(n)[strata == is]\n        if(length(group) > 1L) {\n            g <- matrix(rperm(output[group,  ]), length(group), R)\n            output[group,  ] <- g\n        }\n    }\n    t(output)\n}\n\nboot <- function(data, statistic, R, sim = \"ordinary\",\n                 stype = c(\"i\", \"f\", \"w\"),\n                 strata  =  rep(1, n), L = NULL, m = 0, weights = NULL,\n\t\t ran.gen = function(d, p) d, mle = NULL, simple = FALSE, ...,\n                 parallel = c(\"no\", \"multicore\", \"snow\"),\n                 ncpus = getOption(\"boot.ncpus\", 1L), cl = NULL)\n{\n#\n# R replicates of bootstrap applied to  statistic(data)\n# Possible sim values are: \"ordinary\", \"balanced\", \"antithetic\",\n#                     \"permutation\", \"parametric\"\n# Various auxilliary functions find the indices to be used for the\n# bootstrap replicates and then this function loops over those replicates.\n#\n    call <- match.call()\n    stype <- match.arg(stype)\n    if (missing(parallel)) parallel <- getOption(\"boot.parallel\", \"no\")\n    parallel <- match.arg(parallel)\n    have_mc <- have_snow <- FALSE\n    if (parallel != \"no\" && ncpus > 1L) {\n        if (parallel == \"multicore\") have_mc <- .Platform$OS.type != \"windows\"\n        else if (parallel == \"snow\") have_snow <- TRUE\n        if (!have_mc && !have_snow) ncpus <- 1L\n    }\n    if (simple && (sim != \"ordinary\" || stype != \"i\" || sum(m))) {\n        warning(\"'simple=TRUE' is only valid for 'sim=\\\"ordinary\\\", stype=\\\"i\\\", n=0', so ignored\")\n        simple <- FALSE\n    }\n    if (!exists(\".Random.seed\", envir = .GlobalEnv, inherits = FALSE)) runif(1)\n    seed <- get(\".Random.seed\", envir = .GlobalEnv, inherits = FALSE)\n    n <- NROW(data)\n    if ((n == 0) || is.null(n))\n        stop(\"no data in call to 'boot'\")\n    temp.str <- strata\n    strata <- tapply(seq_len(n),as.numeric(strata))\n    t0 <- if (sim != \"parametric\") {\n\tif ((sim == \"antithetic\") && is.null(L))\n            L <- empinf(data = data, statistic = statistic,\n                        stype = stype, strata = strata, ...)\n        if (sim != \"ordinary\") m <- 0\n        else if (any(m < 0)) stop(\"negative value of 'm' supplied\")\n        if ((length(m) != 1L) && (length(m) != length(table(strata))))\n            stop(\"length of 'm' incompatible with 'strata'\")\n        if ((sim == \"ordinary\") || (sim == \"balanced\")) {\n            if (isMatrix(weights) && (nrow(weights) != length(R)))\n                stop(\"dimensions of 'R' and 'weights' do not match\")}\n        else weights <- NULL\n        if (!is.null(weights))\n            weights <- t(apply(matrix(weights, n, length(R), byrow = TRUE),\n                               2L, normalize, strata))\n        if (!simple) i <- index.array(n, R, sim, strata, m, L, weights)\n\n        original <- if (stype == \"f\") rep(1, n)\n        else if (stype == \"w\") {\n            ns <- tabulate(strata)[strata]\n            1/ns\n        } else seq_len(n)\n\n        t0 <- if (sum(m) > 0L) statistic(data, original, rep(1, sum(m)), ...)\n        else statistic(data, original, ...)\n        rm(original)\n        t0\n    } else # \"parametric\"\n\tstatistic(data, ...)\n\n    pred.i <- NULL\n    fn <- if (sim == \"parametric\") {\n        ## force promises, so values get sent by parallel\n        ran.gen; data; mle\n        function(r) {\n            dd <- ran.gen(data, mle)\n            statistic(dd, ...)\n        }\n    } else {\n        if (!simple && ncol(i) > n) {\n            pred.i <- as.matrix(i[ , (n+1L):ncol(i)])\n            i <- i[, seq_len(n)]\n        }\n        if (stype %in% c(\"f\", \"w\")) {\n            f <- freq.array(i)\n            rm(i)\n            if (stype == \"w\") f <- f/ns\n            if (sum(m) == 0L) function(r) statistic(data, f[r,  ], ...)\n            else function(r) statistic(data, f[r, ], pred.i[r, ], ...)\n        } else if (sum(m) > 0L)\n            function(r) statistic(data, i[r, ], pred.i[r,], ...)\n        else if (simple)\n            function(r)\n                statistic(data,\n                          index.array(n, 1, sim, strata, m, L, weights), ...)\n        else function(r) statistic(data, i[r, ], ...)\n    }\n    RR <- sum(R)\n    res <- if (ncpus > 1L && (have_mc || have_snow)) {\n        if (have_mc) {\n            parallel::mclapply(seq_len(RR), fn, mc.cores = ncpus)\n        } else if (have_snow) {\n            list(...) # evaluate any promises\n            if (is.null(cl)) {\n                cl <- parallel::makePSOCKcluster(rep(\"localhost\", ncpus))\n                if(RNGkind()[1L] == \"L'Ecuyer-CMRG\")\n                    parallel::clusterSetRNGStream(cl)\n                res <- parallel::parLapply(cl, seq_len(RR), fn)\n                parallel::stopCluster(cl)\n                res\n            } else parallel::parLapply(cl, seq_len(RR), fn)\n        }\n    } else lapply(seq_len(RR), fn)\n    t.star <- matrix(, RR, length(t0))\n    for(r in seq_len(RR)) t.star[r, ] <- res[[r]]\n\n    if (is.null(weights)) weights <- 1/tabulate(strata)[strata]\n    boot.return(sim, t0, t.star, temp.str, R, data, statistic, stype, call,\n                seed, L, m, pred.i, weights, ran.gen, mle)\n}\n\nnormalize <- function(wts, strata)\n{\n#\n# Normalize a vector of weights to sum to 1 within each strata.\n#\n    n <- length(strata)\n    out <- wts\n    inds <- as.integer(names(table(strata)))\n    for (is in inds) {\n        gp <- seq_len(n)[strata == is]\n        out[gp] <- wts[gp]/sum(wts[gp]) }\n    out\n}\n\nboot.return <- function(sim, t0, t, strata, R, data, stat, stype, call,\n\t\t\tseed, L, m, pred.i, weights, ran.gen, mle)\n#\n# Return the results of a bootstrap in the form of an object of class\n# \"boot\".\n#\n{\n    out <- list(t0=t0, t=t, R=R, data=data, seed=seed,\n                statistic=stat, sim=sim, call=call)\n    if (sim == \"parametric\")\n        out <- c(out, list(ran.gen=ran.gen, mle=mle))\n    else if (sim == \"antithetic\")\n        out <- c(out, list(stype=stype, strata=strata, L=L))\n    else if (sim == \"ordinary\") {\n        if (sum(m) > 0)\n            out <- c(out, list(stype=stype, strata=strata,\n                               weights=weights, pred.i=pred.i))\n        else \tout <- c(out, list(stype=stype, strata=strata,\n                                   weights=weights))\n    } else if (sim == \"balanced\")\n        out <- c(out, list(stype=stype, strata=strata,\n                           weights=weights ))\n    else\n        out <- c(out, list(stype=stype, strata=strata))\n    class(out) <- \"boot\"\n    out\n}\n\nc.boot <- function (..., recursive = TRUE)\n{\n    args <- list(...)\n    nm <- lapply(args, names)\n    if (!all(sapply(nm, function(x) identical(x, nm[[1]]))))\n        stop(\"arguments are not all the same type of \\\"boot\\\" object\")\n    res <- args[[1]]\n    res$R <- sum(sapply(args, \"[[\", \"R\"))\n    res$t <- do.call(rbind, lapply(args, \"[[\", \"t\"))\n    res\n}\n\nboot.array <- function(boot.out, indices=FALSE) {\n#\n#  Return the frequency or index array for the bootstrap resamples\n#  used in boot.out\n#  This function recreates such arrays from the information in boot.out\n#\n    if (exists(\".Random.seed\", envir=.GlobalEnv, inherits = FALSE))\n        temp <- get(\".Random.seed\", envir=.GlobalEnv, inherits = FALSE)\n    else temp<- NULL\n    assign(\".Random.seed\",  boot.out$seed, envir=.GlobalEnv)\n    n <- NROW(boot.out$data)\n    R <- boot.out$R\n    sim <- boot.out$sim\n    if (boot.out$call[[1L]] == \"tsboot\") {\n#  Recreate the array for an object created by tsboot, The default for\n#  such objects is to return the index array unless index is specifically\n#  passed as F\n        if (missing(indices)) indices <- TRUE\n        if (sim == \"model\")\n            stop(\"index array not defined for model-based resampling\")\n        n.sim <- boot.out$n.sim\n        i.a <- ts.array(n, n.sim, R, boot.out$l,\n\t\t\tsim, boot.out$endcorr)\n        out <- matrix(NA,R,n.sim)\n        for(r in seq_len(R)) {\n            if (sim == \"geom\")\n                ends <- cbind(i.a$starts[r,  ],\n                              i.a$lengths[r,  ])\n            else\n                ends <- cbind(i.a$starts[r,], i.a$lengths)\n            inds <- apply(ends, 1L, make.ends, n)\n            if (is.list(inds))\n                inds <- unlist(inds)[seq_len(n.sim)]\n            out[r,] <- inds\n        }\n    }\n    else if (boot.out$call[[1L]] == \"censboot\") {\n#  Recreate the array for an object created by censboot as long\n#  as censboot was called with sim = \"ordinary\"\n        if (sim == \"ordinary\") {\n            strata <- tapply(seq_len(n), as.numeric(boot.out$strata))\n            out <- cens.case(n,strata,R)\n        }\n        else\tstop(\"boot.array not implemented for this object\")\n    }\n    else {\n#  Recreate the array for objects created by boot or tilt.boot\n        if (sim == \"parametric\")\n            stop(\"array cannot be found for parametric bootstrap\")\n        strata <- tapply(seq_len(n),as.numeric(boot.out$strata))\n        if (boot.out$call[[1L]] == \"tilt.boot\")\n            weights <- boot.out$weights\n        else {\n            weights <- boot.out$call$weights\n            if (!is.null(weights))\n                weights <- boot.out$weights\n        }\n        out <- index.array(n, R, sim, strata, 0, boot.out$L, weights)\n    }\n    if (!indices) out <- freq.array(out)\n    if (!is.null(temp)) assign(\".Random.seed\", temp, envir=.GlobalEnv)\n    else rm(.Random.seed, pos=1)\n    out\n}\n\nplot.boot <- function(x,index=1, t0=NULL, t=NULL, jack=FALSE,\n\tqdist=\"norm\",nclass=NULL,df, ...) {\n#\n#  A plot method for bootstrap output objects.  It produces a histogram\n#  of the bootstrap replicates and a QQ plot of them.  Optionally it can\n#  also produce a jackknife-after-bootstrap plot.\n#\n    boot.out <- x\n    t.o <- t\n    if (is.null(t)) {\n        t <- boot.out$t[,index]\n        if (is.null(t0)) t0 <- boot.out$t0[index]\n    }\n    t <- t[is.finite(t)]\n    if (const(t, min(1e-8,mean(t, na.rm=TRUE)/1e6))) {\n        print(paste(\"All values of t* are equal to \", mean(t, na.rm=TRUE)))\n        return(invisible(boot.out))\n    }\n    if (is.null(nclass)) nclass <- min(max(ceiling(length(t)/25),10),100)\n    if (!is.null(t0)) {\n#  Calculate the breakpoints for the histogram so that one of them is\n#  exactly t0.\n        rg <- range(t)\n        if (t0<rg[1L]) rg[1L] <- t0\n        else if (t0 >rg[2L]) rg[2L] <- t0\n        rg <- rg+0.05*c(-1,1)*diff(rg)\n        lc <- diff(rg)/(nclass-2)\n        n1 <- ceiling((t0-rg[1L])/lc)\n        n2 <- ceiling((rg[2L]-t0)/lc)\n        bks <- t0+(-n1:n2)*lc\n    }\n    R <- boot.out$R\n    if (qdist == \"chisq\") {\n        qq <- qchisq((seq_len(R))/(R+1),df=df)\n        qlab <- paste(\"Quantiles of Chi-squared(\",df,\")\",sep=\"\")\n    }\n    else {\n\tif (qdist!=\"norm\")\n            warning(gettextf(\"%s distribution not supported: using normal instead\", sQuote(qdist)), domain = NA)\n        qq <- qnorm((seq_len(R))/(R+1))\n        qlab <-\"Quantiles of Standard Normal\"\n    }\n    if (jack) {\n        layout(mat = matrix(c(1,2,3,3), 2L, 2L, byrow=TRUE))\n        if (is.null(t0))\n            hist(t,nclass=nclass,probability=TRUE,xlab=\"t*\")\n        else\thist(t,breaks=bks,probability=TRUE,xlab=\"t*\")\n        if (!is.null(t0)) abline(v=t0,lty=2)\n        qqplot(qq,t,xlab=qlab,ylab=\"t*\")\n        if (qdist == \"norm\") abline(mean(t),sqrt(var(t)),lty=2)\n        else abline(0,1,lty=2)\n        jack.after.boot(boot.out,index=index,t=t.o, ...)\n    }\n    else {\n        par(mfrow=c(1,2))\n        if (is.null(t0))\n            hist(t,nclass=nclass,probability=TRUE,xlab=\"t*\")\n        else\thist(t,breaks=bks,probability=TRUE,xlab=\"t*\")\n        if (!is.null(t0)) abline(v=t0,lty=2)\n        qqplot(qq,t,xlab=qlab,ylab=\"t*\")\n        if (qdist == \"norm\") abline(mean(t),sqrt(var(t)),lty=2)\n        else abline(0,1,lty=2)\n    }\n    par(mfrow=c(1,1))\n    invisible(boot.out)\n}\n\nprint.boot <- function(x, digits = getOption(\"digits\"),\n                          index = 1L:ncol(boot.out$t), ...)\n{\n#\n# Print the output of a bootstrap\n#\n    boot.out <- x\n    sim <- boot.out$sim\n    cl <- boot.out$call\n    t <- matrix(boot.out$t[, index], nrow = nrow(boot.out$t))\n    allNA <- apply(t,2L,function(t) all(is.na(t)))\n    ind1 <- index[allNA]\n    index <- index[!allNA]\n    t <- matrix(t[, !allNA], nrow = nrow(t))\n    rn <- paste(\"t\",index,\"*\",sep=\"\")\n    if (length(index) == 0L)\n        op <- NULL\n    else if (is.null(t0 <- boot.out$t0)) {\n        if (is.null(boot.out$call$weights))\n            op <- cbind(apply(t,2L,mean,na.rm=TRUE),\n                        sqrt(apply(t,2L,function(t.st) var(t.st[!is.na(t.st)]))))\n        else {\n            op <- NULL\n            for (i in index)\n                op <- rbind(op, imp.moments(boot.out,index=i)$rat)\n            op[,2L] <- sqrt(op[,2])\n        }\n        dimnames(op) <- list(rn,c(\"mean\", \"std. error\"))\n    }\n    else {\n        t0 <- boot.out$t0[index]\n        if (is.null(boot.out$call$weights)) {\n            op <- cbind(t0,apply(t,2L,mean,na.rm=TRUE)-t0,\n                        sqrt(apply(t,2L,function(t.st) var(t.st[!is.na(t.st)]))))\n            dimnames(op) <- list(rn, c(\"original\",\" bias  \",\" std. error\"))\n        }\n        else {\n            op <- NULL\n            for (i in index)\n                op <- rbind(op, imp.moments(boot.out,index=i)$rat)\n            op <- cbind(t0,op[,1L]-t0,sqrt(op[,2L]),\n                        apply(t,2L,mean,na.rm=TRUE))\n            dimnames(op) <- list(rn,c(\"original\", \" bias  \",\n                                      \" std. error\", \" mean(t*)\"))\n        }\n    }\n    if (cl[[1L]] == \"boot\") {\n        if (sim == \"parametric\")\n            cat(\"\\nPARAMETRIC BOOTSTRAP\\n\\n\")\n        else if (sim == \"antithetic\") {\n            if (is.null(cl$strata))\n                cat(\"\\nANTITHETIC BOOTSTRAP\\n\\n\")\n            else\tcat(\"\\nSTRATIFIED ANTITHETIC BOOTSTRAP\\n\\n\")\n        }\n        else if (sim == \"permutation\") {\n            if (is.null(cl$strata))\n                cat(\"\\nDATA PERMUTATION\\n\\n\")\n            else\tcat(\"\\nSTRATIFIED DATA PERMUTATION\\n\\n\")\n        }\n        else if (sim == \"balanced\") {\n            if (is.null(cl$strata) && is.null(cl$weights))\n                cat(\"\\nBALANCED BOOTSTRAP\\n\\n\")\n            else if (is.null(cl$strata))\n                cat(\"\\nBALANCED WEIGHTED BOOTSTRAP\\n\\n\")\n            else if (is.null(cl$weights))\n                cat(\"\\nSTRATIFIED BALANCED BOOTSTRAP\\n\\n\")\n            else\tcat(\"\\nSTRATIFIED WEIGHTED BALANCED BOOTSTRAP\\n\\n\")\n        }\n        else {\n            if (is.null(cl$strata) && is.null(cl$weights))\n                cat(\"\\nORDINARY NONPARAMETRIC BOOTSTRAP\\n\\n\")\n            else if (is.null(cl$strata))\n                cat(\"\\nWEIGHTED BOOTSTRAP\\n\\n\")\n            else if (is.null(cl$weights))\n                cat(\"\\nSTRATIFIED BOOTSTRAP\\n\\n\")\n            else \tcat(\"\\nSTRATIFIED WEIGHTED BOOTSTRAP\\n\\n\")\n        }\n    }\n    else if (cl[[1L]] == \"tilt.boot\") {\n        R <- boot.out$R\n        th <- boot.out$theta\n        if (sim == \"balanced\")\n            cat(\"\\nBALANCED TILTED BOOTSTRAP\\n\\n\")\n        else\tcat(\"\\nTILTED BOOTSTRAP\\n\\n\")\n        if ((R[1L] == 0) || is.null(cl$tilt) || eval(cl$tilt))\n            cat(\"Exponential tilting used\\n\")\n        else\tcat(\"Frequency Smoothing used\\n\")\n        i1 <- 1\n        if (boot.out$R[1L]>0)\n            cat(paste(\"First\",R[1L],\"replicates untilted,\\n\"))\n        else {\n            cat(paste(\"First \",R[2L],\" replicates tilted to \",\n                      signif(th[1L],4),\",\\n\",sep=\"\"))\n            i1 <- 2\n        }\n        if (i1 <= length(th)) {\n            for (j in i1:length(th))\n                cat(paste(\"Next \",R[j+1L],\" replicates tilted to \",\n                          signif(th[j],4L),\n                          ifelse(j!=length(th),\",\\n\",\".\\n\"),sep=\"\"))\n        }\n        op <- op[, 1L:3L]\n    }\n    else if (cl[[1L]] == \"tsboot\") {\n        if (!is.null(cl$indices))\n            cat(\"\\nTIME SERIES BOOTSTRAP USING SUPPLIED INDICES\\n\\n\")\n        else if (sim == \"model\")\n            cat(\"\\nMODEL BASED BOOTSTRAP FOR TIME SERIES\\n\\n\")\n        else if (sim == \"scramble\") {\n            cat(\"\\nPHASE SCRAMBLED BOOTSTRAP FOR TIME SERIES\\n\\n\")\n            if (boot.out$norm)\n                cat(\"Normal margins used.\\n\")\n            else\tcat(\"Observed margins used.\\n\")\n        }\n        else if (sim == \"geom\") {\n            if (is.null(cl$ran.gen))\n                cat(\"\\nSTATIONARY BOOTSTRAP FOR TIME SERIES\\n\\n\")\n            else\tcat(paste(\"\\nPOST-BLACKENED STATIONARY\",\n                                  \"BOOTSTRAP FOR TIME SERIES\\n\\n\"))\n            cat(paste(\"Average Block Length of\",boot.out$l,\"\\n\"))\n        }\n        else {\tif (is.null(cl$ran.gen))\n                    cat(\"\\nBLOCK BOOTSTRAP FOR TIME SERIES\\n\\n\")\n        else\tcat(paste(\"\\nPOST-BLACKENED BLOCK\",\n                          \"BOOTSTRAP FOR TIME SERIES\\n\\n\"))\n                    cat(paste(\"Fixed Block Length of\",boot.out$l,\"\\n\"))\n\t\t}\n    }\n    else {\n        cat(\"\\n\")\n        if (sim == \"weird\") {\n            if (!is.null(cl$strata)) cat(\"STRATIFIED \")\n            cat(\"WEIRD BOOTSTRAP FOR CENSORED DATA\\n\\n\")\n        }\n        else if ((sim == \"ordinary\") ||\n                 ((sim == \"model\") && is.null(boot.out$cox))) {\n            if (!is.null(cl$strata)) cat(\"STRATIFIED \")\n            cat(\"CASE RESAMPLING BOOTSTRAP FOR CENSORED DATA\\n\\n\")\n        }\n        else if (sim == \"model\") {\n            if (!is.null(cl$strata)) cat(\"STRATIFIED \")\n            cat(\"MODEL BASED BOOTSTRAP FOR COX REGRESSION MODEL\\n\\n\")\n        }\n        else if (sim == \"cond\") {\n            if (!is.null(cl$strata)) cat(\"STRATIFIED \")\n            cat(\"CONDITIONAL BOOTSTRAP \")\n            if (is.null(boot.out$cox))\n                cat(\"FOR CENSORED DATA\\n\\n\")\n            else\tcat(\"FOR COX REGRESSION MODEL\\n\\n\")\n        }\n    }\n    cat(\"\\nCall:\\n\")\n    dput(cl, control=NULL)\n    cat(\"\\n\\nBootstrap Statistics :\\n\")\n    if (!is.null(op)) print(op,digits=digits)\n    if (length(ind1) > 0L)\n        for (j in ind1)\n            cat(paste(\"WARNING: All values of t\", j, \"* are NA\\n\", sep=\"\"))\n    invisible(boot.out)\n}\n\n\n\n\ncorr <- function(d, w=rep(1,nrow(d))/nrow(d))\n{\n#  The correlation coefficient in weighted form.\n    s <- sum(w)\n    m1 <- sum(d[, 1L] * w)/s\n    m2 <- sum(d[, 2L] * w)/s\n    (sum(d[, 1L] * d[, 2L] * w)/s - m1 * m2)/sqrt((sum(d[, 1L]^2 * w)/s - m1^2) * (sum(d[, 2L]^2 * w)/s - m2^2))\n}\n\n\nextra.array <- function(n, R, m, strata=rep(1,n))\n{\n#\n# Extra indices for predictions.  Can only be used with\n# types \"ordinary\" and \"stratified\".  For type \"ordinary\"\n# m is a positive integer.  For type \"stratified\" m can\n# be a positive integer or a vector of the same length as\n# strata.\n#\n    if (length(m) == 1L)\n        output <- matrix(sample.int(n, m*R, replace=TRUE), R, m)\n    else {\n        inds <- as.integer(names(table(strata)))\n        output <- matrix(NA, R, sum(m))\n        st <- 0\n        for (i in inds) {\n            if (m[i] > 0) {\n                gp <- seq_len(n)[strata == i]\n                inds1 <- (st+1):(st+m[i])\n                output[,inds1] <- matrix(bsample(gp, R*m[i]), R, m[i])\n                st <- st+m[i]\n            }\n        }\n    }\n    output\n}\n\nfreq.array <- function(i.array)\n{\n#\n# converts R x n array of bootstrap indices into\n# R X n array of bootstrap frequencies\n#\n    result <- NULL\n    n <- ncol(i.array)\n    result <- t(apply(i.array, 1, tabulate, n))\n    result\n}\n\n\n\nimportance.array <- function(n, R, weights, strata){\n#\n#  Function to do importance resampling  within strata based\n#  on the weights supplied.  If weights is a matrix with n columns\n#  R must be a vector of length nrow(weights) otherwise weights\n#  must be a vector of length n and R must be a scalar.\n#\n    imp.arr <- function(n, R, wts, inds=seq_len(n))\n        matrix(bsample(inds, n*R, prob=wts), R, n)\n    output <- NULL\n    if (!isMatrix(weights))\n        weights <- matrix(weights, nrow=1)\n    inds <- as.integer(names(table(strata)))\n    for (ir in seq_along(R)) {\n        out <- matrix(rep(seq_len(n), R[ir]), R[ir], n, byrow=TRUE)\n        for (is in inds) {\n            gp <- seq_len(n)[strata == is]\n            out[, gp] <- imp.arr(length(gp), R[ir],\n                                 weights[ir,gp], gp)\n        }\n        output <- rbind(output, out)\n    }\n    output\n}\n\nimportance.array.bal <- function(n, R, weights, strata) {\n#\n#  Function to do balanced importance resampling within strata\n#  based on the supplied weights.  Balancing is achieved in such\n#  a way that each index appears in the array approximately in\n#  proportion to its weight.\n#\n    imp.arr.bal <- function(n, R, wts, inds=seq_len(n)) {\n        if (sum (wts) != 1) wts <- wts / sum(wts)\n        nRw1 <- floor(n*R*wts)\n        nRw2 <- n*R*wts - nRw1\n        output <- rep(inds, nRw1)\n        if (any (nRw2 != 0))\n            output <- c(output,\n                        sample0(inds, round(sum(nRw2)), prob=nRw2))\n        matrix(rperm(output), R, n)\n    }\n    output <- NULL\n    if (!isMatrix(weights))\n        weights <- matrix(weights, nrow = 1L)\n    inds <- as.integer(names(table(strata)))\n    for (ir in seq_along(R)) {\n        out <- matrix(rep(seq_len(n), R[ir]), R[ir], n, byrow=TRUE)\n        for (is in inds) {\n            gp <- seq_len(n)[strata == is]\n            out[,gp] <- imp.arr.bal(length(gp), R[ir], weights[ir,gp], gp)\n        }\n        output <- rbind(output, out)\n    }\n    output\n}\n\n\n\nindex.array <- function(n, R, sim, strata=rep(1,n), m=0, L=NULL, weights=NULL)\n{\n#\n#  Driver function for generating a bootstrap index array.  This function\n#  simply determines the type of sampling required and calls the appropriate\n#  function.\n#\n    indices <- NULL\n    if (is.null (weights)) {\n        if (sim == \"ordinary\") {\n            indices <- ordinary.array(n, R, strata)\n            if (sum(m) > 0)\n                indices <- cbind(indices, extra.array(n, R, m, strata))\n        }\n    else if (sim == \"balanced\")\n        indices <- balanced.array(n, R, strata)\n    else if (sim == \"antithetic\")\n        indices <- antithetic.array(n, R, L, strata)\n    else if (sim == \"permutation\")\n        indices <- permutation.array(n, R, strata)\n    } else {\n        if (sim == \"ordinary\")\n            indices <- importance.array(n, R, weights, strata)\n        else if (sim == \"balanced\")\n            indices <- importance.array.bal(n, R, weights, strata)\n    }\n    indices\n}\n\njack.after.boot <- function(boot.out, index=1, t=NULL, L=NULL,\n\tuseJ=TRUE, stinf = TRUE, alpha=NULL, main = \"\", ylab=NULL, ...)\n{\n# jackknife after bootstrap plot\n    t.o <- t\n    if (is.null(t)) {\n        if (length(index) > 1L) {\n            index <- index[1L]\n            warning(\"only first element of 'index' used\")\n        }\n        t <- boot.out$t[, index]\n    }\n    fins <- seq_along(t)[is.finite(t)]\n    t <- t[fins]\n    if (is.null(alpha)) {\n        alpha <- c(0.05, 0.1, 0.16, 0.5, 0.84, 0.9, 0.95)\n        if (is.null(ylab))\n            ylab <- \"5, 10, 16, 50, 84, 90, 95 %-iles of (T*-t)\"\n    }\n    if (is.null(ylab)) ylab <- \"Percentiles of (T*-t)\"\n    data <- boot.out$data\n    n <- NROW(data)\n    f <- boot.array(boot.out)[fins, , drop=TRUE]\n    percentiles <- matrix(data = NA, length(alpha), n)\n    J <- numeric(n)\n    for(j in seq_len(n)) {\n# Find the quantiles of the bootstrap distribution on omitting each point.\n        values <- t[f[, j] == 0]\n        J[j] <- mean(values)\n        percentiles[, j] <- quantile(values, alpha) - J[j]\n    }\n# Now find the jackknife values to be plotted, and standardize them,\n# if required.\n    if (!useJ) {\n        if (is.null(L))\n            J <- empinf(boot.out, index=index, t=t.o, ...)\n        else \tJ <- L\n    }\n    else\tJ <- (n - 1) * (mean(J) - J)\n    xtext <- \"jackknife value\"\n    if (!useJ) {\n        if (!is.null(L) || (is.null(t.o) && (boot.out$stype == \"w\")))\n            xtext <- paste(\"infinitesimal\", xtext)\n        else\txtext <- paste(\"regression\", xtext)\n    }\n    if (stinf) {\n        J <- J/sqrt(var(J))\n        xtext <- paste(\"standardized\", xtext)\n    }\n    top <- max(percentiles)\n    bot <- min(percentiles)\n    ylts <- c(bot - 0.35 * (top - bot), top + 0.1 * (top - bot))\n    percentiles <- percentiles[,order(J)]#\n# Plot the overall quantiles and the delete-1 quantiles against the\n# jackknife values.\n    plot(sort(J), percentiles[1,  ], ylim = ylts, type = \"n\", xlab = xtext,\n         ylab = ylab, main=main)\n    for(j in seq_along(alpha))\n        lines(sort(J), percentiles[j,  ], type = \"b\", pch = \"*\")\n    percentiles <- quantile(t, alpha) - mean(t)\n    for(j in seq_along(alpha))\n        abline(h=percentiles[j], lty=2)\n# Now print the observation numbers below the plotted lines.  They are printed\n# in five rows so that all numbers can be read easily.\n    text(sort(J), rep(c(bot - 0.08 * (top - bot), NA, NA, NA, NA), n, n),\n         order(J), cex = 0.5)\n    text(sort(J), rep(c(NA, bot - 0.14 * (top - bot), NA, NA, NA), n, n),\n         order(J), cex = 0.5)\n    text(sort(J), rep(c(NA, NA, bot - 0.2 * (top - bot), NA, NA), n, n),\n         order(J), cex = 0.5)\n    text(sort(J), rep(c(NA, NA, NA, bot - 0.26 * (top - bot), NA), n, n),\n         order(J), cex = 0.5)\n    text(sort(J), rep(c(NA, NA, NA, NA, bot - 0.32 * (top - bot)), n, n),\n         order(J), cex = 0.5)\n    invisible()\n}\n\n\nordinary.array <- function(n, R, strata)\n{\n#\n# R x n array of bootstrap indices, resampled within strata.\n# This is the function which generates a regular bootstrap array\n# using equal weights within each stratum.\n#\n    inds <- as.integer(names(table(strata)))\n    if (length(inds) == 1L) {\n        output <- sample.int(n, n*R, replace=TRUE)\n        dim(output) <- c(R, n)\n    } else {\n        output <- matrix(as.integer(0L), R, n)\n        for(is in inds) {\n            gp <- seq_len(n)[strata == is]\n            output[, gp] <- if (length(gp) == 1) rep(gp, R) else bsample(gp, R*length(gp))\n        }\n    }\n    output\n}\n\npermutation.array <- function(n, R, strata)\n{\n#\n# R x n array of bootstrap indices, permuted within strata.\n# This is similar to ordinary array except that resampling is\n# done without replacement in each row.\n#\n    output <- matrix(rep(seq_len(n), R), n, R)\n    inds <- as.integer(names(table(strata)))\n    for(is in inds) {\n        group <- seq_len(n)[strata == is]\n        if (length(group) > 1L) {\n            g <- apply(output[group,  ], 2L, rperm)\n            output[group,  ] <- g\n        }\n    }\n    t(output)\n}\n\n\ncv.glm <- function(data, glmfit, cost=function(y,yhat) mean((y-yhat)^2),\n\t\t   K=n)\n{\n# cross-validation estimate of error for glm prediction with K groups.\n# cost is a function of two arguments: the observed values and the\n# the predicted values.\n    call <- match.call()\n    if (!exists(\".Random.seed\", envir=.GlobalEnv, inherits = FALSE)) runif(1)\n    seed <- get(\".Random.seed\", envir=.GlobalEnv, inherits = FALSE)\n    n <- nrow(data)\n    out <- NULL\n    if ((K > n) || (K <= 1))\n        stop(\"'K' outside allowable range\")\n    K.o <- K\n    K <- round(K)\n    kvals <- unique(round(n/(1L:floor(n/2))))\n    temp <- abs(kvals-K)\n    if (!any(temp == 0))\n        K <- kvals[temp == min(temp)][1L]\n    if (K!=K.o) warning(gettextf(\"'K' has been set to %f\", K), domain = NA)\n    f <- ceiling(n/K)\n    s <- sample0(rep(1L:K, f), n)\n    n.s <- table(s)\n#    glm.f <- formula(glmfit)\n    glm.y <- glmfit$y\n    cost.0 <- cost(glm.y, fitted(glmfit))\n    ms <- max(s)\n    CV <- 0\n    Call <- glmfit$call\n    for(i in seq_len(ms)) {\n        j.out <- seq_len(n)[(s == i)]\n        j.in <- seq_len(n)[(s != i)]\n        ## we want data from here but formula from the parent.\n        Call$data <- data[j.in, , drop=FALSE]\n        d.glm <- eval.parent(Call)\n        p.alpha <- n.s[i]/n\n        cost.i <- cost(glm.y[j.out],\n                       predict(d.glm, data[j.out, , drop=FALSE],\n                               type = \"response\"))\n        CV <- CV + p.alpha * cost.i\n        cost.0 <- cost.0 - p.alpha *\n            cost(glm.y, predict(d.glm, data, type = \"response\"))\n    }\n    list(call = call, K = K,\n         delta = as.numeric(c(CV, CV + cost.0)),  # drop any names\n         seed = seed)\n}\n\n\nboot.ci <- function(boot.out,conf = 0.95,type = \"all\",\n\t\t    index = 1L:min(2L, length(boot.out$t0)),\n\t\t    var.t0 = NULL ,var.t = NULL, t0 = NULL, t = NULL,\n\t\t    L = NULL, h = function(t) t,\n                    hdot = function(t) rep(1, length(t)),\n\t\t    hinv = function(t) t, ...)\n#\n#  Main function to calculate bootstrap confidence intervals.\n#  This function calls a number of auxilliary functions to do\n#  the actual calculations depending on the type of interval(s)\n#  requested.\n#\n{\n    call <- match.call()\n#  Get and transform the statistic values and their variances,\n    if ((is.null(t) && !is.null(t0)) ||\n        (!is.null(t) && is.null(t0)))\n        stop(\"'t' and 't0' must be supplied together\")\n    t.o <- t; t0.o <- t0\n#    vt.o <- var.t\n    vt0.o <- var.t0\n    if (is.null(t)) {\n        if (length(index) == 1L) {\n            t0 <- boot.out$t0[index]\n            t <- boot.out$t[,index]\n        }\n        else if (ncol(boot.out$t)<max(index)) {\n            warning(\"index out of bounds; minimum index only used.\")\n            index <- min(index)\n            t0 <- boot.out$t0[index]\n            t <- boot.out$t[,index]\n        }\n        else {\n            t0 <- boot.out$t0[index[1L]]\n            t <- boot.out$t[,index[1L]]\n            if (is.null(var.t0)) var.t0 <- boot.out$t0[index[2L]]\n            if (is.null(var.t)) var.t <- boot.out$t[,index[2L]]\n        }\n    }\n    if (const(t, min(1e-8, mean(t, na.rm=TRUE)/1e6))) {\n        print(paste(\"All values of t are equal to \", mean(t, na.rm=TRUE),\n                    \"\\n Cannot calculate confidence intervals\"))\n        return(NULL)\n    }\n    if (length(t) != boot.out$R)\n        stop(gettextf(\"'t' must of length %d\", boot.out$R), domain = NA)\n    if (is.null(var.t))\n        fins <- seq_along(t)[is.finite(t)]\n    else {\n        fins <- seq_along(t)[is.finite(t) & is.finite(var.t)]\n        var.t <- var.t[fins]\n    }\n    t <- t[fins]\n    R <- length(t)\n    if (!is.null(var.t0)) var.t0 <- var.t0*hdot(t0)^2\n    if (!is.null(var.t))  var.t <- var.t*hdot(t)^2\n    t0 <- h(t0); t <- h(t)\n    if (missing(L)) L <- boot.out$L\n    output <- list(R = R, t0 = hinv(t0), call = call)\n    #  Now find the actual intervals using the methods listed in type\n    if (any(type == \"all\" | type == \"norm\"))\n        output <- c(output,\n                    list(normal = norm.ci(boot.out, conf,\n                         index[1L], var.t0=vt0.o, t0=t0.o, t=t.o,\n                         L=L, h=h, hdot=hdot, hinv=hinv)))\n    if (any(type == \"all\" | type == \"basic\"))\n        output <- c(output, list(basic=basic.ci(t0,t,conf,hinv=hinv)))\n    if (any(type == \"all\" | type == \"stud\")) {\n        if (length(index)==1L)\n            warning(\"bootstrap variances needed for studentized intervals\")\n        else\n            output <- c(output, list(student=stud.ci(c(t0,var.t0),\n                                     cbind(t ,var.t), conf, hinv=hinv)))\n    }\n    if (any(type == \"all\" | type == \"perc\"))\n        output <- c(output, list(percent=perc.ci(t,conf,hinv=hinv)))\n    if (any(type == \"all\" | type == \"bca\")) {\n        if (as.character(boot.out$call[1L]) == \"tsboot\")\n            warning(\"BCa intervals not defined for time series bootstraps\")\n        else\n            output <- c(output, list(bca=bca.ci(boot.out,conf,\n                                     index[1L],L=L,t=t.o, t0=t0.o,\n                                     h=h,hdot=hdot, hinv=hinv, ...)))\n    }\n    class(output) <- \"bootci\"\n    output\n}\n\nprint.bootci <- function(x, hinv = NULL, ...) {\n#\n#  Print the output from boot.ci\n#\n    ci.out <- x\n    cl <- ci.out$call\n    ntypes <- length(ci.out)-3L\n    nints <- nrow(ci.out[[4L]])\n    t0 <- ci.out$t0\n    if (!is.null(hinv)) t0 <- hinv(t0)  #\n#  Find the number of decimal places which should be used\n    digs <- ceiling(log10(abs(t0)))\n    if (digs <= 0) digs <- 4\n    else if (digs >= 4) digs <- 0\n    else digs <- 4-digs\n    intlabs <- NULL\n    basrg <- strg <- perg <- bcarg <- NULL\n    if (!is.null(ci.out$normal))\n        intlabs <- c(intlabs,\"     Normal        \")\n    if (!is.null(ci.out$basic)) {\n        intlabs <- c(intlabs,\"     Basic         \")\n        basrg <- range(ci.out$basic[,2:3]) }\n    if (!is.null(ci.out$student)) {\n        intlabs <- c(intlabs,\"   Studentized     \")\n        strg <- range(ci.out$student[,2:3]) }\n    if (!is.null(ci.out$percent)) {\n        intlabs <- c(intlabs,\"    Percentile     \")\n        perg <- range(ci.out$percent[,2:3]) }\n    if (!is.null(ci.out$bca)) {\n        intlabs <- c(intlabs,\"      BCa          \")\n        bcarg <- range(ci.out$bca[,2:3]) }\n    level <- 100*ci.out[[4L]][, 1L]\n    if (ntypes == 4L) n1 <- n2 <- 2L\n    else if (ntypes == 5L) {n1 <- 3L; n2 <- 2L}\n    else {n1 <- ntypes; n2 <- 0L}\n    ints1 <- matrix(NA,nints,2L*n1+1L)\n    ints1[,1L] <- level\n    n0 <- 4L\n#  Re-organize the intervals and coerce them into character data\n    for (i in n0:(n0+n1-1)) {\n        j <- c(2L*i-6L,2L*i-5L)\n        nc <- ncol(ci.out[[i]])\n        nc <- c(nc-1L,nc)\n        if (is.null(hinv))\n            ints1[,j] <- ci.out[[i]][,nc]\n        else\tints1[,j] <- hinv(ci.out[[i]][,nc])\n    }\n    n0 <- 4L+n1\n    ints1 <- format(round(ints1,digs))\n    ints1[,1L] <- paste(\"\\n\",level,\"%  \",sep=\"\")\n    ints1[,2*(1L:n1)] <- paste(\"(\",ints1[,2*(1L:n1)],\",\",sep=\"\")\n    ints1[,2*(1L:n1)+1L] <- paste(ints1[,2*(1L:n1)+1L],\")  \")\n    if (n2 > 0) {\n        ints2 <- matrix(NA,nints,2L*n2+1L)\n        ints2[,1L] <- level\n        j <- c(2L,3L)\n        for (i in n0:(n0+n2-1L)) {\n            if (is.null(hinv))\n                ints2[,j] <- ci.out[[i]][,c(4L,5L)]\n            else\tints2[,j] <- hinv(ci.out[[i]][,c(4L,5L)])\n            j <- j+2L\n        }\n        ints2 <- format(round(ints2,digs))\n        ints2[,1L] <- paste(\"\\n\",level,\"%  \",sep=\"\")\n        ints2[,2*(1L:n2)] <- paste(\"(\",ints2[,2*(1L:n2)],\",\",sep=\"\")\n        ints2[,2*(1L:n2)+1L] <- paste(ints2[,2*(1L:n2)+1L],\")  \")\n    }\n    R <- ci.out$R                       #\n#  Print the intervals\n    cat(\"BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS\\n\")\n    cat(paste(\"Based on\",R,\"bootstrap replicates\\n\\n\"))\n    cat(\"CALL : \\n\")\n    dput(cl, control=NULL)\n    cat(\"\\nIntervals : \")\n    cat(\"\\nLevel\",intlabs[1L:n1])\n    cat(t(ints1))\n    if (n2 > 0) {\n        cat(\"\\n\\nLevel\",intlabs[(n1+1):(n1+n2)])\n        cat(t(ints2))\n    }\n    if (!is.null(cl$h)) {\n        if (is.null(cl$hinv) && is.null(hinv))\n            cat(\"\\nCalculations and Intervals on \",\n                \"Transformed Scale\\n\")\n        else\tcat(\"\\nCalculations on Transformed Scale;\",\n                    \" Intervals on Original Scale\\n\")\n    }\n    else if (is.null(cl$hinv) && is.null(hinv))\n        cat(\"\\nCalculations and Intervals on Original Scale\\n\")\n    else \tcat(\"\\nCalculations on Original Scale\",\n                    \" but Intervals Transformed\\n\")#\n#  Print any warnings about extreme values.\n    if (!is.null(basrg)) {\n        if ((basrg[1L] <= 1) || (basrg[2L] >= R))\n            cat(\"Warning : Basic Intervals used Extreme Quantiles\\n\")\n        if ((basrg[1L] <= 10) || (basrg[2L] >= R-9))\n            cat(\"Some basic intervals may be unstable\\n\")\n    }\n    if (!is.null(strg)) {\n        if ((strg[1L] <= 1) || (strg[2L] >= R))\n            cat(\"Warning : Studentized Intervals used Extreme Quantiles\\n\")\n        if ((strg[1L] <= 10) || (strg[2L] >= R-9))\n            cat(\"Some studentized intervals may be unstable\\n\")\n    }\n    if (!is.null(perg)) {\n        if ((perg[1L] <= 1) || (perg[2L] >= R))\n            cat(\"Warning : Percentile Intervals used Extreme Quantiles\\n\")\n        if ((perg[1L] <= 10) || (perg[2L] >= R-9))\n            cat(\"Some percentile intervals may be unstable\\n\")\n    }\n    if (!is.null(bcarg)) {\n        if ((bcarg[1L] <= 1) || (bcarg[2L] >= R))\n            cat(\"Warning : BCa Intervals used Extreme Quantiles\\n\")\n        if ((bcarg[1L] <= 10) || (bcarg[2L] >= R-9))\n            cat(\"Some BCa intervals may be unstable\\n\")\n    }\n    invisible(ci.out)\n}\n\nnorm.ci <-\n    function(boot.out = NULL,conf = 0.95,index = 1,var.t0 = NULL, t0 = NULL,\n             t = NULL, L = NULL, h = function(t) t, hdot = function(t) 1,\n             hinv = function(t) t)\n#\n#  Normal approximation method for confidence intervals.  This can be\n#  used with or without a bootstrap object.  If a bootstrap object is\n#  given then the intervals are bias corrected and the bootstrap variance\n#  estimate can be used if none is supplied.\n#\n{\n    if (is.null(t0))  {\n        if (!is.null(boot.out)) t0 <-boot.out$t0[index]\n        else stop(\"bootstrap output object or 't0' required\")\n    }\n    if (!is.null(boot.out) && is.null(t))\n        t <- boot.out$t[,index]\n    if (!is.null(t)) {\n        fins <- seq_along(t)[is.finite(t)]\n        t <- h(t[fins])\n    }\n    if (is.null(var.t0)) {\n        if (is.null(t)) {\n            if (is.null(L))\n                stop(\"unable to calculate 'var.t0'\")\n            else\tvar.t0 <- sum((hdot(t0)*L/length(L))^2)\n        }\n        else\tvar.t0 <- var(t)\n    }\n    else\tvar.t0 <- var.t0*hdot(t0)^2\n    t0 <- h(t0)\n    if (!is.null(t))\n        bias <- mean(t)-t0\n    else\tbias <- 0\n    merr <- sqrt(var.t0)*qnorm((1+conf)/2)\n    out <- cbind(conf,hinv(t0-bias-merr),hinv(t0-bias+merr))\n    out\n}\n\nnorm.inter <- function(t,alpha)\n#\n#  Interpolation on the normal quantile scale.  For a non-integer\n#  order statistic this function interpolates between the surrounding\n#  order statistics using the normal quantile scale.  See equation\n#  5.8 of Davison and Hinkley (1997)\n#\n{\n    t <- t[is.finite(t)]\n    R <- length(t)\n    rk <- (R+1)*alpha\n    if (!all(rk>1 & rk<R))\n        warning(\"extreme order statistics used as endpoints\")\n    k <- trunc(rk)\n    inds <- seq_along(k)\n    out <- inds\n    kvs <- k[k>0 & k<R]\n    tstar <- sort(t, partial = sort(union(c(1, R), c(kvs, kvs+1))))\n    ints <- (k == rk)\n    if (any(ints)) out[inds[ints]] <- tstar[k[inds[ints]]]\n    out[k == 0] <- tstar[1L]\n    out[k == R] <- tstar[R]\n    not <- function(v) xor(rep(TRUE,length(v)),v)\n    temp <- inds[not(ints) & k != 0 & k != R]\n    temp1 <- qnorm(alpha[temp])\n    temp2 <- qnorm(k[temp]/(R+1))\n    temp3 <- qnorm((k[temp]+1)/(R+1))\n    tk <- tstar[k[temp]]\n    tk1 <- tstar[k[temp]+1L]\n    out[temp] <- tk + (temp1-temp2)/(temp3-temp2)*(tk1 - tk)\n    cbind(round(rk, 2), out)\n}\n\nbasic.ci <- function(t0, t, conf = 0.95, hinv = function(t) t)\n#\n#  Basic bootstrap confidence method\n#\n{\n    qq <- norm.inter(t,(1+c(conf,-conf))/2)\n    cbind(conf, matrix(qq[,1L],ncol=2L), matrix(hinv(2*t0-qq[,2L]),ncol=2L))\n}\n\nstud.ci <- function(tv0, tv, conf = 0.95, hinv=function(t) t)\n#\n#  Studentized version of the basic bootstrap confidence interval\n#\n{\n    if ((length(tv0) < 2) || (ncol(tv) < 2)) {\n        warning(\"variance required for studentized intervals\")\n        NA\n    } else {\n        z <- (tv[,1L]-tv0[1L])/sqrt(tv[,2L])\n        qq <- norm.inter(z, (1+c(conf,-conf))/2)\n        cbind(conf, matrix(qq[,1L],ncol=2L),\n              matrix(hinv(tv0[1L]-sqrt(tv0[2L])*qq[,2L]),ncol=2L))\n    }\n}\n\nperc.ci <- function(t, conf = 0.95, hinv = function(t) t)\n#\n#  Bootstrap Percentile Confidence Interval Method\n#\n{\n    alpha <- (1+c(-conf,conf))/2\n    qq <- norm.inter(t,alpha)\n    cbind(conf,matrix(qq[,1L],ncol=2L),matrix(hinv(qq[,2]),ncol=2L))\n}\n\nbca.ci <-\n    function(boot.out,conf = 0.95,index = 1,t0 = NULL,t = NULL, L = NULL,\n             h = function(t) t, hdot = function(t) 1, hinv = function(t) t,\n             ...)\n#\n#  Adjusted Percentile (BCa) Confidence interval method.  This method\n#  uses quantities calculated from the empirical influence values to\n#  improve on the precentile interval.  Usually the required order\n#  statistics for this method will not be integers and so norm.inter\n#  is used to find them.\n#\n{\n    t.o <- t\n    if (is.null(t) || is.null(t0)) {\n        t <- boot.out$t[,index]\n        t0 <- boot.out$t0[index]\n    }\n    t <- t[is.finite(t)]\n    w <- qnorm(sum(t < t0)/length(t))\n    if (!is.finite(w)) stop(\"estimated adjustment 'w' is infinite\")\n    alpha <- (1+c(-conf,conf))/2\n    zalpha <- qnorm(alpha)\n    if (is.null(L))\n        L <- empinf(boot.out, index=index, t=t.o, ...)\n    a <- sum(L^3)/(6*sum(L^2)^1.5)\n    if (!is.finite(a)) stop(\"estimated adjustment 'a' is NA\")\n    adj.alpha <- pnorm(w + (w+zalpha)/(1-a*(w+zalpha)))\n    qq <- norm.inter(t,adj.alpha)\n    cbind(conf, matrix(qq[,1L],ncol=2L), matrix(hinv(h(qq[,2L])),ncol=2L))\n}\n\n\n\nabc.ci <- function(data, statistic, index = 1, strata = rep(1, n), conf = 0.95,\n                   eps = 0.001/n, ...)\n#\n#   Non-parametric ABC method for constructing confidence intervals.\n#\n{\n    y <- data\n    n <- NROW(y)\n    strata1 <- tapply(strata,as.numeric(strata))\n    if (length(index) != 1L) {\n\twarning(\"only first element of 'index' used in 'abc.ci'\")\n        index <- index[1L]\n    }\n    S <- length(table(strata1))\n    mat <- matrix(0,n,S)\n    for (s in 1L:S) {\n        gp <- seq_len(n)[strata1 == s]\n        mat[gp,s] <- 1\n    }\n#  Calculate the observed value of the statistic\n    w.orig <- rep(1/n,n)\n    t0 <- statistic(y,w.orig/(w.orig%*%mat)[strata1], ...)[index]#\n#  Now find the linear and quadratic empirical influence values through\n#  numerical differentiation\n    L <- L2 <- numeric(n)\n    for (i in seq_len(n)) {\n        w1 <- (1-eps)*w.orig\n        w1[i] <- w1[i]+eps\n        w2 <- (1+eps)*w.orig\n        w2[i] <- w2[i] - eps\n        t1 <- statistic(y,w1/(w1%*%mat)[strata1], ...)[index]\n        t2 <- statistic(y,w2/(w2%*%mat)[strata1], ...)[index]\n        L[i] <- (t1-t2)/(2*eps)\n        L2[i] <- (t1-2*t0+t2)/eps^2\n    }\n#  Calculate the required quantities for the intervals\n    temp1 <- sum(L*L)\n    sigmahat <- sqrt(temp1)/n\n    ahat <- sum(L^3)/(6*temp1^1.5)      # called a in the text\n    bhat <- sum(L2)/(2*n*n)             # called b in the text\n    dhat <- L/(n*n*sigmahat)            # called k in the text\n    w3 <- w.orig+eps*dhat\n    w4 <- w.orig-eps*dhat\n    chat <- (statistic(y,w3/(w3%*%mat)[strata1], ...)[index]-2*t0 +\n             statistic(y,w4/(w4%*%mat)[strata1], ...)[index]) /\n                 (2*eps*eps*sigmahat)   # called c in the text\n    bprime <- ahat-(bhat/sigmahat-chat) # called w in the text\n    alpha <- (1+as.vector(rbind(-conf,conf)))/2\n    zalpha <- qnorm(alpha)\n    lalpha <- (bprime+zalpha)/(1-ahat*(bprime+zalpha))^2#\n#  Finally calculate the interval endpoints by calling the statistic with\n#  various weight vectors.\n    out <- seq(alpha)\n    for (i in seq_along(alpha)) {\n        w.fin <- w.orig+lalpha[i]*dhat\n        out[i] <- statistic(y,w.fin/(w.fin%*%mat)[strata1], ...)[index]\n    }\n    out <- cbind(conf,matrix(out,ncol=2L,byrow=TRUE))\n    if (length(conf) == 1L) out <- as.vector(out)\n    out\n}\n\ncensboot <-\n    function(data, statistic, R, F.surv, G.surv, strata = matrix(1, n, 2),\n             sim = \"ordinary\", cox = NULL, index = c(1, 2), ...,\n             parallel = c(\"no\", \"multicore\", \"snow\"),\n             ncpus = getOption(\"boot.ncpus\", 1L), cl = NULL)\n{\n#\n#  Bootstrap replication for survival data.  Possible resampling\n#  schemes are case, model-based, conditional bootstrap (with or without\n#  a model) and the weird bootstrap.\n#\n    mstrata <- missing(strata)\n    if (any(is.na(data)))\n        stop(\"missing values not allowed in 'data'\")\n    if ((sim != \"ordinary\") && (sim != \"model\") && (sim != \"cond\")\n        && (sim != \"weird\")) stop(\"unknown value of 'sim'\")\n    if ((sim == \"model\") && (is.null(cox))) sim <- \"ordinary\"\n    if (missing(parallel)) parallel <- getOption(\"boot.parallel\", \"no\")\n    parallel <- match.arg(parallel)\n    have_mc <- have_snow <- FALSE\n    if (parallel != \"no\" && ncpus > 1L) {\n        if (parallel == \"multicore\") have_mc <- .Platform$OS.type != \"windows\"\n        else if (parallel == \"snow\") have_snow <- TRUE\n        if (!have_mc && !have_snow) ncpus <- 1L\n    }\n    if (!exists(\".Random.seed\", envir = .GlobalEnv, inherits = FALSE)) runif(1)\n    seed <- get(\".Random.seed\", envir = .GlobalEnv, inherits = FALSE)\n    call <- match.call()\n    if (isMatrix(data)) n <- nrow(data)\n    else stop(\"'data' must be a matrix with at least 2 columns\")\n    if (ncol(data) < 2L)\n        stop(\"'data' must be a matrix with at least 2 columns\")\n    if (length(index) < 2L)\n        stop(\"'index' must contain 2 elements\")\n    if (length(index) > 2L) {\n        warning(\"only first 2 elements of 'index' used\")\n        index <- index[1L:2L]\n    }\n    if (ncol(data) < max(index))\n        stop(\"indices are incompatible with 'ncol(data)'\")\n    if (sim == \"weird\") {\n        if (!is.null(cox))\n            stop(\"sim = \\\"weird\\\" cannot be used with a \\\"coxph\\\" object\")\n        if (ncol(data) > 2L)\n            warning(gettextf(\"only columns %s and %s of 'data' used\",\n                             index[1L], index[2L]), domain = NA)\n        data <- data[,index]\n    }\n    if (!is.null(cox) && is.null(cox$coefficients) &&\n        ((sim == \"cond\") || (sim == \"model\"))) {\n        warning(\"no coefficients in Cox model -- model ignored\")\n        cox <- NULL\n    }\n    if ((sim != \"ordinary\")  && missing(F.surv))\n        stop(\"'F.surv' is required but missing\")\n    if (missing(G.surv) && ((sim == \"cond\") || (sim == \"model\")))\n        stop(\"'G.surv' is required but missing\")\n    if (NROW(strata) != n) stop(\"'strata' of wrong length\")\n    if (!isMatrix(strata)) {\n        if (!((sim == \"weird\") || (sim == \"ordinary\")))\n            strata <- cbind(strata, 1)\n    } else {\n        if ((sim == \"weird\") || (sim == \"ordinary\")) strata <- strata[, 1L]\n        else  strata <- strata[, 1L:2L]\n    }\n    temp.str <- strata\n    strata <- if (isMatrix(strata))\n        apply(strata, 2L, function(s, n) tapply(seq_len(n), as.numeric(s)), n)\n    else  tapply(seq_len(n), as.numeric(strata))\n    t0 <- if ((sim == \"weird\") && !mstrata) statistic(data, temp.str, ...)\n    else  statistic(data, ...)\n    ## Calculate the resampled data sets.  For ordinary resampling this\n    ## involves finding the matrix of indices of the case to be resampled.\n    ## For the conditional bootstrap or model-based we must find an array\n    ## consisting of R matrices containing the resampled times and their\n    ## censoring indicators.  The data sets for the weird bootstrap must be\n    ## calculated individually.\n    fn <- if (sim == \"ordinary\") {\n        bt <- cens.case(n, strata, R)\n        function(r) statistic(data[sort(bt[r, ]), ], ...)\n    } else if (sim == \"weird\") {\n        ## force promises\n        data; F.surv\n        if (!mstrata) {\n            function(r) {\n                bootdata <- cens.weird(data, F.surv, strata)\n                statistic(bootdata[, 1:2], bootdata[, 3L], ...)\n            }\n        } else  {\n            function(r) {\n                bootdata <- cens.weird(data, F.surv, strata)\n                statistic(bootdata[, 1:2], ...)\n            }\n        }\n    } else {\n        bt <- cens.resamp(data, R, F.surv, G.surv, strata, index, cox, sim)\n        function(r) {\n            bootdata <- data\n            bootdata[, index] <- bt[r, , ]\n            oi <- order(bt[r, , 1L], 1-bt[r, , 2L])\n            statistic(bootdata[oi, ], ...)\n        }\n    }\n    rm(mstrata)\n\n    res <- if (ncpus > 1L && (have_mc || have_snow)) {\n        if (have_mc) {\n            parallel::mclapply(seq_len(R), fn, ..., mc.cores = ncpus)\n        } else if (have_snow) {\n            list(...) # evaluate any promises\n            if (is.null(cl)) {\n                cl <- parallel::makePSOCKcluster(rep(\"localhost\", ncpus))\n                if(RNGkind()[1L] == \"L'Ecuyer-CMRG\")\n                    parallel::clusterSetRNGStream(cl)\n                parallel::clusterEvalQ(cl, library(survival))\n                res <- parallel::parLapply(cl, seq_len(R), fn)\n                parallel::stopCluster(cl)\n                res\n            } else {\n                parallel::clusterEvalQ(cl, library(survival))\n                parallel::parLapply(cl, seq_len(R), fn)\n            }\n       }\n    } else lapply(seq_len(R), fn)\n\n    t <- matrix(, R, length(t0))\n    for(r in seq_len(R)) t[r, ] <- res[[r]]\n\n    cens.return(sim, t0, t, temp.str, R, data, statistic, call, seed)\n}\n\ncens.return <- function(sim, t0, t, strata, R, data, statistic, call, seed) {\n#\n#  Create an object of class \"boot\" from the output of a censored bootstrap.\n#\n    out <- list(t0 = t0, t = t, R = R, sim = sim, data = data, seed = seed,\n                statistic = statistic, strata = strata, call = call)\n    class(out) <- \"boot\"\n    out\n}\n\ncens.case <- function(n, strata, R) {\n#\n#  Simple case resampling.\n#\n    out <- matrix(NA, nrow = R, ncol = n)\n    for (s in seq_along(table(strata))) {\n        inds <- seq_len(n)[strata == s]\n        ns <- length(inds)\n        out[, inds] <- bsample(inds,  ns*R)\n    }\n    out\n}\n\n\ncens.weird <- function(data, surv, strata) {\n#\n#  The weird bootstrap.  Censoring times are fixed and the number of\n#  failures at each failure time are sampled from a binomial\n#  distribution.  See Chapter 3 of Davison and Hinkley (1997).\n#\n#  data is a two column matrix containing the times and censoring\n#    indicator.\n#  surv is a survival object giving the failure time distribution.\n#  strata is a the strata vector used in surv or a vector of 1's if no\n#    strata were used.\n#\n    m <- length(surv$time)\n    if (is.null(surv$strata)) {\n        nstr <- 1\n        str <- rep(1, m)\n    } else {\n        nstr <- length(surv$strata)\n        str <- rep(1L:nstr, surv$strata)\n    }\n    n.ev <- rbinom(m, surv$n.risk, surv$n.event/surv$n.risk)\n    while (any(tapply(n.ev, str, sum) == 0))\n        n.ev <- rbinom(m, surv$n.risk, surv$n.event/surv$n.risk)\n    times <- rep(surv$time, n.ev)\n    str <- rep(str, n.ev)\n    out <- NULL\n    for (s in 1L:nstr) {\n        temp <- cbind(times[str == s], 1)\n        temp <- rbind(temp,\n                      as.matrix(data[(strata == s&data[, 2L] == 0), , drop=FALSE]))\n        temp <- cbind(temp, s)\n        oi <- order(temp[, 1L], 1-temp[, 2L])\n        out <- rbind(out, temp[oi, ])\n    }\n    if (is.data.frame(data)) out <- as.data.frame(out)\n    out\n}\n\n\n\ncens.resamp <- function(data, R, F.surv, G.surv, strata, index = c(1,2),\n                        cox = NULL, sim = \"model\")\n{\n#\n#  Other types of resampling for the censored bootstrap.  This function\n#  uses some local functions to implement the conditional bootstrap for\n#  censored data and resampling based on a Cox regression model.  This\n#  latter method of sampling can also use conditional sampling to get the\n#  censoring times.\n#\n#  data is the data set\n#  R is the number of replicates\n#  F.surv is a survfit object for the failure time distribution\n#  G.surv is a survfit object for the censoring time distribution\n#  strata is a two column matrix, the first column gives the strata\n#     gives the strata for the failure times and the second for the\n#     censoring times.\n#  index is a vector with two integer components giving the position\n#     of the times and censoring indicators in data\n#  cox is an object returned by the coxph function to give the Cox\n#     regression model for the failure times.\n#  sim is the simulation type which will always be \"model\" or \"cond\"\n#\n    gety1 <- function(n, R, surv, inds) {\n# Sample failure times from the product limit estimate of the failure\n# time distribution.\n        survival <- surv$surv[inds]\n        time <- surv$time[inds]\n        n1 <- length(time)\n        if (survival[n1] > 0L) {\n            survival <- c(survival, 0)\n            time <- c(time, Inf)\n        }\n        probs <- diff(-c(1, survival))\n        matrix(bsample(time, n*R, prob = probs), R, n)\n    }\n    gety2 <- function(n, R, surv, eta, inds) {\n# Sample failure times from the Cox regression model.\n        F0 <- surv$surv[inds]\n        time <- surv$time[inds]\n        n1 <- length(time)\n        if (F0[n1] > 0) {\n            F0 <- c(F0, 0)\n            time <- c(time, Inf)\n        }\n        ex <- exp(eta)\n        Fh <- 1 - outer(F0, ex, \"^\")\n        apply(rbind(0, Fh), 2L,\n              function(p, y, R) bsample(y, R, prob = diff(p)), time, R)\n    }\n    getc1 <- function(n, R, surv, inds) {\n# Sample censoring times from the product-limit estimate of the\n# censoring distribution.\n        cens <- surv$surv[inds]\n        time <- surv$time[inds]\n        n1 <- length(time)\n        if (cens[n1] > 0) {\n            cens <- c(cens, 0)\n            time <- c(time, Inf)\n        }\n        probs <- diff(-c(1, cens))\n        matrix(bsample(time, n*R, prob = probs), nrow = R)\n    }\n    getc2 <- function(n, R, surv, inds, data, index) {\n# Sample censoring times form the conditional distribution.  If a failure\n# was observed then sample from the product-limit estimate of the censoring\n# distribution conditional on the time being greater than the observed\n# failure time.  If the observation is censored then resampled time is the\n# observed censoring time.\n        cens <- surv$surv[inds]\n        time <- surv$time[inds]\n        n1 <- length(time)\n        if (cens[n1] > 0) {\n            cens <- c(cens, 0)\n            time <- c(time, Inf)\n        }\n        probs <- diff(-c(1, cens))\n        cout <- matrix(NA, R, n)\n        for (i in seq_len(n)) {\n            if (data[i, 2] == 0) cout[, i] <- data[i, 1L]\n            else {\n                pri <- probs[time > data[i, 1L]]\n                ti <- time[time > data[i, 1L]]\n                if (length(ti) == 1L) cout[, i] <- ti\n                else cout[, i] <- bsample(ti, R, prob = pri)\n            }\n        }\n        cout\n    }\n    n <- nrow(data)\n    Fstart <- 1\n    Fstr <- F.surv$strata\n    if (is.null(Fstr)) Fstr <- length(F.surv$time)\n    Gstart <- 1\n    Gstr <- G.surv$strata\n    if (is.null(Gstr)) Gstr <- length(G.surv$time)\n    out <- array(NA, c(R, n, 2))\n    y0 <- matrix(NA, R, n)\n    for (s in seq_along(table(strata[, 1L]))) {\n# Find the resampled failure times within strata for failures\n        ns <- sum(strata[, 1L] == s)\n        inds <- Fstart:(Fstr[s]+Fstart-1)\n        y0[, strata[, 1L] == s] <- if (is.null(cox)) gety1(ns, R, F.surv, inds)\n        else  gety2(ns, R, F.surv, cox$linear.predictors[strata[, 1L] == s], inds)\n        Fstart <- Fstr[s]+Fstart\n    }\n    c0 <- matrix(NA, R, n)\n    for (s in seq_along(table(strata[, 2L]))) {\n# Find the resampled censoring times within strata for censoring times\n        ns <- sum(strata[, 2] == s)\n        inds <- Gstart:(Gstr[s]+Gstart-1)\n        c0[, strata[, 2] == s] <- if (sim != \"cond\") getc1(ns, R, G.surv, inds)\n        else  getc2(ns, R, G.surv, inds, data[strata[,2] == s, index])\n        Gstart <- Gstr[s]+Gstart\n    }\n    infs <- (is.infinite(y0) & is.infinite(c0))\n    if (sum(infs) > 0) {\n# If both the resampled failure time and the resampled censoring time\n# are infinite then set the resampled time to be a failure at the largest\n# failure time in the failure time stratum containing the observation.\n        evs <- seq_len(n)[data[, index[2L]] == 1]\n        maxf <- tapply(data[evs, index[1L]], strata[evs, 1L], max)\n        maxf <- matrix(maxf[strata[, 1L]], nrow = R, ncol = n, byrow = TRUE)\n        y0[infs] <- maxf[infs]\n    }\n    array(c(pmin(y0, c0), 1*(y0 <= c0)), c(dim(y0), 2))\n}\n\nempinf <- function(boot.out = NULL, data = NULL, statistic = NULL,\n                   type = NULL, stype = NULL ,index = 1, t = NULL,\n                   strata = rep(1, n), eps = 0.001, ...)\n{\n#\n#   Calculation of empirical influence values.  Possible types are\n#   \"inf\" = infinitesimal jackknife (numerical differentiation)\n#   \"reg\" = regression based estimation\n#   \"jack\" = usual jackknife estimates\n#   \"pos\" = positive jackknife estimates\n#\n    if (!is.null(boot.out))\n    {\n\tif (boot.out$sim == \"parametric\")\n            stop(\"influence values cannot be found from a parametric bootstrap\")\n        data <- boot.out$data\n        if (is.null(statistic))\n            statistic <- boot.out$statistic\n        if (is.null(stype))\n            stype <- boot.out$stype\n        if (!is.null(boot.out$strata))\n            strata <- boot.out$strata\n    }\n    else\n    {\n\tif (is.null(data))\n            stop(\"neither 'data' nor bootstrap object specified\")\n        if (is.null(statistic))\n            stop(\"neither 'statistic' nor bootstrap object specified\")\n        if (is.null(stype)) stype <- \"w\"\n    }\n    n <- NROW(data)\n    if (is.null(type)) {\n        if (!is.null(t)) type <- \"reg\"\n        else if (stype == \"w\") type <- \"inf\"\n        else if (!is.null(boot.out) &&\n                 (boot.out$sim != \"parametric\") &&\n                 (boot.out$sim != \"permutation\")) type <- \"reg\"\n        else type <- \"jack\"\n    }\n\n    if (type == \"inf\") {\n# calculate the infinitesimal jackknife values by numerical differentiation\n    \tif (stype !=\"w\") stop(\"'stype' must be \\\"w\\\" for type=\\\"inf\\\"\")\n        if (length(index) != 1L) {\n            warning(\"only first element of 'index' used\")\n            index <- index[1L]\n        }\n        if (!is.null(t))\n            warning(\"input 't' ignored; type=\\\"inf\\\"\")\n        L <- inf.jack(data, statistic, index, strata, eps, ...)\n    } else if (type == \"reg\") {\n# calculate the regression estimates of the influence values\n        if (is.null(boot.out))\n            stop(\"bootstrap object needed for type=\\\"reg\\\"\")\n        if (is.null(t)) {\n            if (length(index) != 1L) {\n                warning(\"only first element of 'index' used\")\n                index <- index[1L]\n            }\n            t <- boot.out$t[,index]\n        }\n        L <- empinf.reg(boot.out, t)\n    } else if (type == \"jack\") {\n        if (!is.null(t))\n            warning(\"input 't' ignored; type=\\\"jack\\\"\")\n        if (length(index) != 1L) {\n            warning(\"only first element of 'index' used\")\n            index <- index[1L]\n        }\n        L <- usual.jack(data, statistic, stype, index, strata, ...)\n    } else if (type == \"pos\") {\n        if (!is.null(t))\n            warning(\"input 't' ignored; type=\\\"pos\\\"\")\n        if (length(index) != 1L) {\n            warning(\"only first element of 'index' used\")\n            index <- index[1L]\n        }\n        L <- positive.jack(data, statistic, stype, index, strata, ...)\n    }\n    L\n}\n\ninf.jack <-\n    function(data, stat, index = 1, strata  =  rep(1, n), eps  =  0.001, ...)\n{\n#\n#   Numerical differentiation to get infinitesimal jackknife estimates\n#   of the empirical influence values.\n#\n    n <- NROW(data)\n    L <- seq_len(n)\n    eps <- eps/n\n    strata <- tapply(strata, as.numeric(strata))\n    w.orig <- 1/table(strata)[strata]\n    tobs <- stat(data, w.orig, ...)[index]\n    for(i in seq_len(n)) {\n        group <- seq_len(n)[strata == strata[i]]\n        w <- w.orig\n        w[group] <- (1 - eps)*w[group]\n        w[i] <- w[i] + eps\n        L[i] <- (stat(data, w, ...)[index] - tobs)/eps\n    }\n    L\n}\n\nempinf.reg <- function(boot.out, t = boot.out$t[,1L])\n#\n#  Function to estimate empirical influence values using regression.\n#  This method regresses the observed bootstrap values on the bootstrap\n#  frequencies to estimate the empirical influence values\n#\n{\n    fins <- seq_along(t)[is.finite(t)]\n    t <- t[fins]\n    R <- length(t)\n    n <- NROW(boot.out$data)\n    strata <- boot.out$strata\n    if (is.null(strata))\n        strata <- rep(1,n)\n    else \tstrata <- tapply(strata,as.numeric(strata))\n    ns <- table(strata)\n#    S <- length(ns)\n    f <- boot.array(boot.out)[fins,]\n    X <- f/matrix(ns[strata], R, n ,byrow=TRUE)\n    out <- tapply(seq_len(n), strata, min)\n    inc <- seq_len(n)[-out]\n    X <- X[,inc]\n    beta <- coefficients(glm(t ~ X))[-1L]\n    l <- rep(0, n)\n    l[inc] <- beta\n    l <- l - tapply(l,strata,mean)[strata]\n    l\n}\n\nusual.jack <- function(data, stat, stype = \"w\", index = 1,\n                       strata = rep(1, n), ...)\n#\n#  Function to use the normal (delete 1) jackknife method to estimate the\n#  empirical influence values\n#\n{\n    n <- NROW(data)\n    l <- rep(0,n)\n    strata <- tapply(strata,as.numeric(strata))\n    if (stype == \"w\") {\n        w0 <- rep(1, n)/table(strata)[strata]\n        tobs <- stat(data, w0, ...)[index]\n        for (i in seq_len(n)) {\n            w1 <- w0\n            w1[i] <- 0\n            gp <- strata == strata[i]\n            w1[gp] <- w1[gp]/sum(w1[gp])\n            l[i] <- (sum(gp)-1)*(tobs - stat(data,w1, ...)[index])\n        }\n    } else if (stype == \"f\") {\n        f0 <- rep(1,n)\n        tobs <- stat(data, f0, ...)[index]\n        for (i in seq_len(n)) {\n            f1 <- f0\n            f1[i] <- 0\n            gp <- strata == strata[i]\n            l[i] <- (sum(gp)-1)*(tobs - stat(data, f1, ...)[index])\n        }\n    } else {\n        i0 <- seq_len(n)\n        tobs <- stat(data, i0, ...)[index]\n        for (i in seq_len(n)) {\n            i1 <- i0[-i]\n            gp <- strata == strata[i]\n            l[i] <- (sum(gp)-1)*(tobs - stat(data, i1, ...)[index])\n        }\n    }\n    l\n}\n\npositive.jack <- function(data, stat, stype = \"w\", index = 1,\n                          strata = rep(1 ,n), ...)\n{\n#\n#  Use the positive jackknife to estimate the empirical influence values.\n#  The positive jackknife includes one observation twice to find its\n#  influence.\n#\n    strata <- tapply(strata,as.numeric(strata))\n    n <- NROW(data)\n    L <- rep(0, n)\n    if (stype == \"w\") {\n        w0 <- rep(1, n)/table(strata)[strata]\n        tobs <- stat(data, w0, ...)[index]\n        for (i in seq_len(n)) {\n            st1 <- c(strata,strata[i])\n            w1 <- 1/table(st1)[strata]\n            w1[i] <- 2*w1[i]\n            gp <- strata == strata[i]\n            w1[gp] <- w1[gp]/sum(w1[gp])\n            L[i] <- (sum(gp)+1)*(stat(data, w1, ...)[index] - tobs)\n        }\n    } else if (stype == \"f\") {\n        f0 <- rep(1,n)\n        tobs <- stat(data, f0, ...)[index]\n        for (i in seq_len(n)) {\n            f1 <- f0\n            f1[i] <- 2\n            gp <- strata == strata[i]\n            L[i] <- (sum(gp)+1)*(stat(data, f1, ...)[index] - tobs)\n        }\n    } else if (stype == \"i\") {\n        i0 <- seq_len(n)\n        tobs <- stat(data, i0, ...)[index]\n        for (i in seq_len(n)) {\n            i1 <- c(i0, i)\n            gp <- strata == strata[i]\n            L[i] <- (sum(gp)+1)*(stat(data, i1, ...)[index] - tobs)\n        }\n    }\n    L\n}\n\nlinear.approx <- function(boot.out, L = NULL, index = 1, type = NULL,\n                          t0 = NULL, t = NULL, ...)\n#\n#  Find the linear approximation to the bootstrap replicates of a\n#  statistic.  L should be the linear influence values which will\n#  be found by empinf if they are not supplied.\n#\n{\n    f <- boot.array(boot.out)\n    n <- length(f[1,  ])\n    if ((length(index) > 1L) && (is.null(t0) || is.null(t))) {\n        warning(\"only first element of 'index' used\")\n        index <- index[1L]\n    }\n    if (is.null(t0)) {\n        t0 <- boot.out$t0[index]\n        if (is.null(L))\n            L <- empinf(boot.out, index=index, type=type, ...)\n    } else if (is.null(t) && is.null(L)) {\n        warning(\"input 't0' ignored: neither 't' nor 'L' supplied\")\n        t0 <- t0[index]\n        L <- empinf(boot.out, index=index, type=type, ...)\n    }\n    else if (is.null(L))\n        L <- empinf(boot.out, type=type, t=t, ...)\n    tL <- rep(t0, boot.out$R)\n    strata <- boot.out$strata\n    if (is.null(strata))\n        strata <- rep(1, n)\n    else \tstrata <- tapply(strata,as.numeric(strata))\n    S <- length(table(strata))\n    for(s in 1L:S) {\n        i.s <- seq_len(n)[strata == s]\n        tL <- tL + f[, i.s] %*% L[i.s]/length(i.s)\n    }\n    as.vector(tL)\n}\n\nenvelope <-\n    function(boot.out = NULL, mat = NULL, level = 0.95, index = 1L:ncol(mat))\n#\n#  Function to estimate pointwise and overall confidence envelopes for\n#  a function.\n#\n#  mat is a matrix of bootstrap values of the function at a number of\n#     points.  The points at which they are evaluated are assumed to\n#     be constant over the rows.\n#\n{\n    emperr <- function(rmat, p = 0.05, k = NULL)\n#  Local function to estimate the overall error rate of an envelope.\n    {\n        R <- nrow(rmat)\n        if (is.null(k)) k <- p*(R+1)/2 else p <- 2*k/(R+1)\n        kf <- function(x, k, R) 1*((min(x) <= k)|(max(x) >= R+1L-k))\n        c(k, p, sum(apply(rmat, 1L, kf, k, R))/(R+1))\n    }\n    kfun <- function(x, k1, k2)\n# Local function to find the cut-off points in each column of the matrix.\n        sort(x ,partial = sort(c(k1, k2)))[c(k1, k2)]\n    if (!is.null(boot.out) && isMatrix(boot.out$t)) mat <- boot.out$t\n    if (!isMatrix(mat)) stop(\"bootstrap output matrix missing\")\n    n <- ncol(mat)\n    if (length(index) < 2L) stop(\"use 'boot.ci' for scalar parameters\")\n    mat <- mat[,index]\n    rmat <- apply(mat,2L,rank)\n    R <- nrow(mat)\n    if (length(level) == 1L) level <- rep(level,2L)\n    k.pt <- floor((R+1)*(1-level[1L])/2+1e-10)\n    k.pt <- c(k.pt, R+1-k.pt)\n    err.pt <- emperr(rmat,k = k.pt[1L])\n    ov <- emperr(rmat,k = 1)\n    ee <- err.pt\n    al <- 1-level[2L]\n    if (ov[3L] > al)\n        warning(\"unable to achieve requested overall error rate\")\n    else {\n        continue <- !(ee[3L] < al)\n        while(continue) {\n#  If the observed error is greater than the level required for the overall\n#  envelope then try another envelope.  This loop uses linear interpolation\n#  on the integers between 1 and k.pt[1L] to find the required value.\n            kk <- ov[1L]+round((ee[1L]-ov[1L])*(al-ov[3L])/ (ee[3L]-ov[3L]))\n            if (kk == ov[1L]) kk <- kk+1\n            else if (kk == ee[1L]) kk <- kk-1\n            temp <- emperr(rmat, k = kk)\n            if (temp[3L] > al) ee <- temp\n            else ov <- temp\n            continue <- !(ee[1L] == ov[1L]+1)\n        }\n    }\n    k.ov <- c(ov[1L], R+1-ov[1L])\n    err.ov <- ov[-1L]\n    out <- apply(mat, 2L, kfun, k.pt, k.ov)\n    list(point = out[2:1,], overall = out[4:3,], k.pt = k.pt,\n         err.pt = err.pt[-1L], k.ov = k.ov, err.ov = err.ov, err.nom = 1-level)\n}\n\n\nglm.diag <- function(glmfit)\n{\n#\n#  Calculate diagnostics for objects of class \"glm\".  The diagnostics\n#  calculated are various types of residuals as well as the Cook statistics\n#  and the leverages.\n#\n    w <- if (is.null(glmfit$prior.weights)) rep(1,length(glmfit$residuals))\n         else glmfit$prior.weights\n    sd <- switch(family(glmfit)$family[1L],\n                 \"gaussian\" = sqrt(glmfit$deviance/glmfit$df.residual),\n                 \"Gamma\" = sqrt(sum(w*(glmfit$y/fitted(glmfit) - 1)^2)/\n                           glmfit$df.residual),\n                 1)\n##     sd <- ifelse(family(glmfit)$family[1L] == \"gaussian\",\n##                  sqrt(glmfit$deviance/glmfit$df.residual), 1)\n##     sd <- ifelse(family(glmfit)$family[1L] == \"Gamma\",\n##                  sqrt(sum(w*(glmfit$y/fitted(glmfit) - 1)^2)/glmfit$df.residual), sd)\n    dev <- residuals(glmfit, type = \"deviance\")/sd\n    pear <- residuals(glmfit, type = \"pearson\")/sd\n    ## R change: lm.influence drops 0-wt cases.\n    h <- rep(0, length(w))\n    h[w != 0] <- lm.influence(glmfit)$hat\n    p <- glmfit$rank\n    rp <- pear/sqrt(1 - h)\n    rd <- dev/sqrt(1 - h)\n    cook <- (h * rp^2)/((1 - h) * p)\n    res <- sign(dev) * sqrt(dev^2 + h * rp^2)\n    list(res = res, rd = rd, rp = rp, cook = cook, h = h, sd = sd)\n}\n\n\nglm.diag.plots <-\n    function(glmfit, glmdiag = glm.diag(glmfit), subset  =  NULL,\n             iden = FALSE, labels = NULL, ret = FALSE)\n{\n#  Diagnostic plots for objects of class \"glm\"\n    if (is.null(glmdiag))\n        glmdiag <- glm.diag(glmfit)\n    if (is.null(subset))\n        subset <- seq_along(glmdiag$h)\n    else if (is.logical(subset))\n        subset <- seq_along(subset)[subset]\n    else if (is.numeric(subset) && all(subset<0))\n        subset <- (1L:(length(subset)+length(glmdiag$h)))[subset]\n    else if (is.character(subset)) {\n        if (is.null(labels)) labels <- subset\n        subset <- seq_along(subset)\n    }\n#\tclose.screen(all = T)\n#\tsplit.screen(c(2, 2))\n#\tscreen(1) #\n    par(mfrow = c(2,2))\n#  Plot the deviance residuals against the fitted values\n    x1 <- predict(glmfit)\n    plot(x1, glmdiag$res, xlab = \"Linear predictor\", ylab = \"Residuals\")\n    pars <- vector(4L, mode=\"list\")\n    pars[[1L]] <- par(\"usr\")\n#\tscreen(2) #\n#  Plot a normal QQ plot of the standardized deviance residuals\n    y2 <- glmdiag$rd\n    x2 <- qnorm(ppoints(length(y2)))[rank(y2)]\n    plot(x2, y2, ylab = \"Quantiles of standard normal\",\n         xlab = \"Ordered deviance residuals\")\n    abline(0, 1, lty = 2)\n    pars[[2L]] <- par(\"usr\")\n#\tscreen(3) #\n#  Plot the Cook statistics against h/(1-h) and draw line to highlight\n#  possible influential and high leverage points.\n    hh <- glmdiag$h/(1 - glmdiag$h)\n    plot(hh, glmdiag$cook, xlab = \"h/(1-h)\", ylab = \"Cook statistic\")\n    rx <- range(hh)\n    ry <- range(glmdiag$cook)\n    rank.fit <- glmfit$rank\n    nobs <- rank.fit + glmfit$df.residual\n    cooky <- 8/(nobs - 2 * rank.fit)\n    hy <- (2 * rank.fit)/(nobs - 2 * rank.fit)\n    if ((cooky >= ry[1L]) && (cooky <= ry[2L])) abline(h = cooky, lty = 2)\n    if ((hy >= rx[1L]) && (hy <= rx[2L])) abline(v = hy, lty = 2)\n    pars[[3L]] <- par(\"usr\")\n#\tscreen(4) #\n#  Plot the Cook statistics against the observation number in the original\n#  data set.\n    plot(subset, glmdiag$cook, xlab = \"Case\", ylab = \"Cook statistic\")\n    if ((cooky >= ry[1L]) && (cooky <= ry[2L])) abline(h = cooky, lty = 2)\n    xx <- list(x1,x2,hh,subset)\n    yy <- list(glmdiag$res, y2, glmdiag$cook, glmdiag$cook)\n    pars[[4L]] <- par(\"usr\")\n\n    if (is.null(labels)) labels <- names(x1)\n    while (iden) {\n#  If interaction with the plots is required then ask the user which plot\n#  they wish to interact with and then run identify() on that plot.\n#  When the user terminates identify(), reprompt until no further interaction\n#  is required and the user inputs a 0.\n        cat(\"****************************************************\\n\")\n        cat(\"Please Input a screen number (1,2,3 or 4)\\n\")\n        cat(\"0 will terminate the function \\n\")\n#\t\tnum <- scan(nmax=1)\n        num <- as.numeric(readline())\n        if ((length(num) > 0L) &&\n            ((num == 1)||(num == 2)||(num == 3)||(num == 4))) {\n            cat(paste(\"Interactive Identification for screen\",\n                      num,\"\\n\"))\n            cat(\"left button = Identify, center button = Exit\\n\")\n#\t\t\tscreen(num, new=F)\n            nm <- num+1\n            par(mfg = c(trunc(nm/2),1 +nm%%2, 2, 2))\n            par(usr = pars[[num]])\n            identify(xx[[num]], yy[[num]], labels)\n        }\n        else \tiden <- FALSE\n    }\n#\tclose.screen(all=T)\n    par(mfrow = c(1, 1))\n    if (ret) glmdiag else invisible()\n}\n\nexp.tilt <- function(L, theta = NULL, t0 = 0, lambda = NULL,\n                     strata = rep(1, length(L)) )\n{\n# exponential tilting of linear approximation to statistic\n# to give mean theta.\n#\n    tilt.dis <- function(lambda)  {\n#  Find the squared error in the mean using the multiplier lambda\n#  This is then minimized to find the correct value of lambda\n#  Note that the function should have minimum 0.\n        L <- para[[2L]]\n        theta <- para[[1L]]\n        strata <- para[[3L]]\n        ns <- table(strata)\n        tilt <- rep(NA, length(L) )\n        for (s in seq_along(ns)) {\n            p <- exp(lambda*L[strata == s]/ns[s])\n            tilt[strata == s] <- p/sum(p)\n        }\n        (sum(L*tilt) - theta)^2\n    }\n    tilted.prob <- function(lambda, L, strata)  {\n#  Find the tilted probabilities for a given value of lambda\n        ns <- table(strata)\n        m <- length(lambda)\n        tilt <- matrix(NA, m, length(L))\n        for (i in 1L:m)\n            for (s in seq_along(ns)) {\n                p <- exp(lambda[i]*L[strata == s]/ns[s])\n                tilt[i,strata == s] <- p/sum(p)\n            }\n        if (m == 1) tilt <- as.vector(tilt)\n        tilt\n    }\n    strata <- tapply(strata, as.numeric(strata))\n    if (!is.null(theta)) {\n        theta <- theta-t0\n        m <- length(theta)\n        lambda <- rep(NA,m)\n        for (i in 1L:m) {\n            para <- list(theta[i],L,strata)\n#\t\t\tassign(\"para\",para,frame=1)\n#\t\t\tlambda[i] <- nlmin(tilt.dis, 0 )$x\n            lambda[i] <- optim(0, tilt.dis, method = \"BFGS\")$par\n            msd <- tilt.dis(lambda[i])\n            if (is.na(msd) || (abs(msd) > 1e-6))\n                stop(gettextf(\"unable to find multiplier for %f\", theta[i]),\n                     domain = NA)\n        }\n    }\n    else if (is.null(lambda))\n        stop(\"'theta' or 'lambda' required\")\n    probs <- tilted.prob( lambda, L, strata )\n    if (is.null(theta)) theta <- t0 + sum(probs * L)\n    else theta <- theta+t0\n    list(p = probs, theta = theta, lambda = lambda)\n}\n\n\nimp.weights <- function(boot.out, def = TRUE, q = NULL)\n{\n#\n# Takes boot.out object and calculates importance weights\n# for each element of boot.out$t, as if sampling from multinomial\n# distribution with probabilities q.\n# If q is NULL the weights are calculated as if\n# sampling from a distribution with equal probabilities.\n# If def=T calculates weights using defensive mixture\n# distribution, if F uses weights knowing from which element of\n# the mixture they come.\n#\n    R <- boot.out$R\n    if (length(R) == 1L)\n        def <- FALSE\n    f <- boot.array(boot.out)\n    n <- ncol(f)\n    strata <- tapply(boot.out$strata,as.numeric(boot.out$strata))\n#    ns <- table(strata)\n    if (is.null(q))  q <- rep(1,ncol(f))\n    if (any(q == 0)) stop(\"0 elements not allowed in 'q'\")\n    p <- boot.out$weights\n    if ((length(R) == 1L) && all(abs(p - q)/p < 1e-10))\n        return(rep(1, R))\n    np <- length(R)\n    q <- normalize(q, strata)\n    lw.q <- as.vector(f %*% log(q))\n    if (!isMatrix(p))\n        p <- as.matrix(t(p))\n    p <- t(apply(p, 1L, normalize, strata))\n    lw.p <- matrix(NA, sum(R), np)\n    for(i in 1L:np) {\n        zz <- seq_len(n)[p[i,  ] > 0]\n        lw.p[, i] <- f[, zz] %*% log(p[i, zz])\n    }\n    if (def)\n        w <- 1/(exp(lw.p - lw.q) %*% R/sum(R))\n    else {\n        i <- cbind(seq_len(sum(R)), rep(seq_along(R), R))\n        w <- exp(lw.q - lw.p[i])\n    }\n    as.vector(w)\n}\n\nconst <- function(w, eps=1e-8) {\n# Are all of the values of w equal to within the tolerance eps.\n    all(abs(w-mean(w, na.rm=TRUE)) < eps)\n}\n\nimp.moments <- function(boot.out=NULL, index=1, t=boot.out$t[,index],\n\t\t\tw=NULL, def=TRUE, q=NULL )\n{\n# Calculates raw, ratio, and regression estimates of mean and\n# variance of t using importance sampling weights in w.\n    if (missing(t) && is.null(boot.out$t))\n        stop(\"bootstrap replicates must be supplied\")\n    if (is.null(w))\n        if (!is.null(boot.out))\n            w <- imp.weights(boot.out, def, q)\n        else\tstop(\"either 'boot.out' or 'w' must be specified.\")\n    if ((length(index) > 1L) && missing(t)) {\n        warning(\"only first element of 'index' used\")\n        t <- boot.out$t[,index[1L]]\n    }\n    fins <- seq_along(t)[is.finite(t)]\n    t <- t[fins]\n    w <- w[fins]\n    if (!const(w)) {\n        y <- t*w\n        m.raw <- mean( y )\n        m.rat <- sum( y )/sum( w )\n        t.lm <- lm( y~w )\n        m.reg <- mean( y ) - coefficients(t.lm)[2L]*(mean(w)-1)\n        v.raw <- mean(w*(t-m.raw)^2)\n        v.rat <- sum(w/sum(w)*(t-m.rat)^2)\n        x <- w*(t-m.reg)^2\n        t.lm2 <- lm( x~w )\n        v.reg <- mean( x ) - coefficients(t.lm2)[2L]*(mean(w)-1)\n    }\n    else {\tm.raw <- m.rat <- m.reg <- mean(t)\n\t\tv.raw <- v.rat <- v.reg <- var(t)\n            }\n    list( raw=c(m.raw,v.raw), rat = c(m.rat,v.rat),\n         reg = as.vector(c(m.reg,v.reg)))\n}\n\n\nimp.reg <- function(w)\n{\n#  This function takes a vector of importance sampling weights and\n#  returns the regression importance sampling weights.  The function\n#  is called by imp.prob and imp.quantiles to enable those functions\n#  to find regression estimates of tail probabilities and quantiles.\n    if (!const(w)) {\n        R <- length(w)\n        mw <- mean(w)\n        s2w <- (R-1)/R*var(w)\n        b <- (1-mw)/s2w\n        w <- w*(1+b*(w-mw))/R\n    }\n    cumsum(w)/sum(w)\n}\n\n\nimp.quantile <- function(boot.out=NULL, alpha=NULL, index=1,\n\t\t\tt=boot.out$t[,index], w=NULL, def=TRUE, q=NULL )\n{\n# Calculates raw, ratio, and regression estimates of alpha quantiles\n#  of t using importance sampling weights in w.\n    if (missing(t) && is.null(boot.out$t))\n        stop(\"bootstrap replicates must be supplied\")\n    if (is.null(alpha)) alpha <- c(0.01,0.025,0.05,0.95,0.975,0.99)\n    if (is.null(w))\n        if (!is.null(boot.out))\n            w <- imp.weights(boot.out, def, q)\n        else\tstop(\"either 'boot.out' or 'w' must be specified.\")\n    if ((length(index) > 1L) && missing(t)){\n        warning(\"only first element of 'index' used\")\n        t <- boot.out$t[,index[1L]]\n    }\n    fins <- seq_along(t)[is.finite(t)]\n    t <- t[fins]\n    w <- w[fins]\n    o <- order(t)\n    t <- t[o]\n    w <- w[o]\n    cum <- cumsum(w)\n    o <- rev(o)\n    w.m <- w[o]\n    t.m <- -rev(t)\n    cum.m <- cumsum(w.m)\n    cum.rat <- cum/mean(w)\n    cum.reg <- imp.reg(w)\n    R <- length(w)\n    raw <- rat <- reg <- rep(NA,length(alpha))\n    for (i in seq_along(alpha)) {\n        if (alpha[i]<=0.5) raw[i] <-  max(t[cum<=(R+1)*alpha[i]])\n        else raw[i] <- -max(t.m[cum.m<=(R+1)*(1-alpha[i])])\n        rat[i] <- max(t[cum.rat <= (R+1)*alpha[i]])\n        reg[i] <- max(t[cum.reg <= (R+1)*alpha[i]])\n    }\n    list(alpha=alpha, raw=raw, rat=rat, reg=reg)\n}\n\nimp.prob <- function(boot.out=NULL, index=1, t0=boot.out$t0[index],\n\t\t\tt=boot.out$t[,index], w=NULL,  def=TRUE, q=NULL)\n{\n# Calculates raw, ratio, and regression estimates of tail probability\n#  pr( t <= t0 ) using importance sampling weights in w.\n    is.missing <- function(x) length(x) == 0L || is.na(x)\n\n    if (missing(t) && is.null(boot.out$t))\n        stop(\"bootstrap replicates must be supplied\")\n    if (is.null(w))\n        if (!is.null(boot.out))\n            w <- imp.weights(boot.out, def, q)\n        else\tstop(\"either 'boot.out' or 'w' must be specified.\")\n    if ((length(index) > 1L) && (missing(t) || missing(t0))) {\n        warning(\"only first element of 'index' used\")\n        index <- index[1L]\n        if (is.missing(t)) t <- boot.out$t[,index]\n        if (is.missing(t0)) t0 <- boot.out$t0[index]\n    }\n    fins <- seq_along(t)[is.finite(t)]\n    t <- t[fins]\n    w <- w[fins]\n    o <- order(t)\n    t <- t[o]\n    w <- w[o]\n    raw <- rat <- reg <- rep(NA,length(t0))\n    cum <- cumsum(w)/sum(w)\n    cum.r <- imp.reg(w)\n    for (i in seq_along(t0)) {\n        raw[i] <-sum(w[t<=t0[i]])/length(w)\n        rat[i] <- max(cum[t<=t0[i]])\n        reg[i] <- max(cum.r[t<=t0[i]])\n    }\n    list(t0=t0, raw=raw, rat=rat, reg=reg )\n}\n\nsmooth.f <- function(theta, boot.out, index=1, t=boot.out$t[,index],\n\t\t\twidth=0.5 )\n{\n# Does frequency smoothing of the frequency array for boot.out with\n# bandwidth A to give frequencies for 'typical' distribution at theta\n    if ((length(index) > 1L) && missing(t)) {\n        warning(\"only first element of 'index' used\")\n        t <- boot.out$t[,index[1L]]\n    }\n    if (isMatrix(t)) {\n        warning(\"only first column of 't' used\")\n        t <- t[,1L]\n    }\n    fins <- seq_along(t)[is.finite(t)]\n    t <- t[fins]\n    m <- length(theta)\n    v <- imp.moments(boot.out, t=t)$reg[2L]\n    eps <- width*sqrt(v)\n    if (m  == 1)\n        w <- dnorm((theta-t)/eps )/eps\n    else {\n        w <- matrix(0,length(t),m)\n        for (i in 1L:m)\n            w[,i] <- dnorm((theta[i]-t)/eps )/eps\n    }\n    f <- crossprod(boot.array(boot.out)[fins,] , w)\n    strata <- boot.out$strata\n    strata <- tapply(strata, as.numeric(strata))\n    ns <- table(strata)\n    out <- matrix(NA,ncol(f),nrow(f))\n    for (s in seq_along(ns)) {\n        ts <- matrix(f[strata == s,],m,ns[s],byrow=TRUE)\n        ss <- apply(ts,1L,sum)\n        out[,strata == s] <-  ts/matrix(ss,m,ns[s])\n    }\n    if (m == 1) out <- as.vector(out)\n    out\n}\n\ntilt.boot <- function(data, statistic, R, sim=\"ordinary\",\n\t\tstype=\"i\", strata = rep(1, n), L = NULL, theta=NULL,\n\t\talpha=c(0.025,0.975), tilt=TRUE, width=0.5, index=1, ... )\n{\n#  Does tilted bootstrap sampling of stat applied to data with strata strata\n#  and simulation type sim.\n#  The levels of R give the number of simulations at each level.  For example,\n#  R=c(199,100,50) will give three separate bootstraps with 199, 100, 50\n#  simulations.  If R[1L]>0 the first simulation is assumed to be untilted\n#  and L can be estimated from it by regression, or it can be frequency\n#  smoothed to give probabilities p.\n#  If tilt=T use exponential tilting with empirical influence value L\n#  given explicitly or estimated from boot0, but if tilt=F\n#  (in which case R[1L] should be large) frequency smoothing of boot0 is used\n#  with bandwidth A.\n#  Tilting/frequency smoothing is to theta (so length(theta)=length(R)-1).\n#  The function assumes at present that q=0 is the median of the distribution\n#  of t*.\n    if ((sim != \"ordinary\") && (sim != \"balanced\"))\n        stop(\"invalid value of 'sim' supplied\")\n    if (!is.null(theta) && (length(R) != length(theta)+1))\n        stop(\"'R' and 'theta' have incompatible lengths\")\n    if (!tilt && (R[1L] == 0))\n        stop(\"R[1L] must be positive for frequency smoothing\")\n    call <- match.call()\n    n <- NROW(data)\n    if (R[1L]>0) {\n# If required run an initial bootstrap with equal weights.\n        if (is.null(theta) && (length(R) != length(alpha)+1))\n            stop(\"'R' and 'alpha' have incompatible lengths\")\n        boot0 <- boot(data, statistic, R = R[1L], sim=sim, stype=stype,\n                      strata = strata, ... )\n        if (is.null(theta)) {\n            if (any(c(alpha,1-alpha)*(R[1L]+1) <= 5))\n                warning(\"extreme values used for quantiles\")\n            theta <- quantile(boot0$t[,index],alpha)\n        }\n    }\n    else {\n# If no initial bootstrap is run then exponential tilting must be\n# used.  Also set up a dummy bootstrap object to hold the output.\n        tilt <- TRUE\n        if (is.null(theta))\n            stop(\"'theta' must be supplied if R[1L] = 0\")\n        if (!missing(alpha))\n            warning(\"'alpha' ignored; R[1L] = 0\")\n        if (stype == \"i\") orig <- seq_len(n)\n        else if (stype == \"f\") orig <- rep(1,n)\n        else orig <- rep(1,n)/n\n        boot0 <- boot.return(sim=sim,t0=statistic(data,orig, ...),\n                             t=NULL, strata=strata, R=0, data=data,\n                             stat=statistic, stype=stype,call=NULL,\n                             seed=get(\".Random.seed\", envir=.GlobalEnv, inherits = FALSE),\n                             m=0,weights=NULL)\n    }\n# Calculate the weights for the subsequent bootstraps\n    if (is.null(L) & tilt)\n        if (R[1L] > 0) L <- empinf(boot0, index, ...)\n        else L <- empinf(data=data, statistic=statistic, stype=stype,\n                         index=index, ...)\n    if (tilt) probs <- exp.tilt(L, theta, strata=strata, t0=boot0$t0[index])$p\n    else probs <- smooth.f(theta, boot0, index, width=width)#\n# Run the weighted bootstraps and collect the output.\n    boot1 <- boot(data, statistic, R[-1L], sim=sim, stype=stype,\n                  strata=strata, weights=probs, ...)\n    boot0$t <- rbind(boot0$t, boot1$t)\n    boot0$weights <- rbind(boot0$weights, boot1$weights)\n    boot0$R <- c(boot0$R, boot1$R)\n    boot0$call <- call\n    boot0$theta <- theta\n    boot0\n}\n\n\ncontrol <- function(boot.out, L=NULL, distn=NULL, index=1, t0=NULL, t=NULL,\n                    bias.adj=FALSE, alpha=NULL, ... )\n{\n#\n#  Control variate estimation.  Post-simulation balance can be used to\n#  find the adjusted bias estimate.  Alternatively the linear approximation\n#  to the statistic of interest can be used as a control variate and hence\n#  moments and quantiles can be estimated.\n#\n    if (!is.null(boot.out$call$weights))\n        stop(\"control methods undefined when 'boot.out' has weights\")\n    if (is.null(alpha))\n        alpha <- c(1,2.5,5,10,20,50,80,90,95,97.5,99)/100\n    tL <- dL <- bias <- bias.L <- var.L <- NULL\n    k3.L <- q.out <- distn.L <- NULL\n    stat <- boot.out$statistic\n    data <- boot.out$data\n    R <- boot.out$R\n    f <- boot.array(boot.out)\n    if (bias.adj) {\n# Find the adjusted bias estimate using post-simulation balance.\n        if (length(index) > 1L) {\n            warning(\"only first element of 'index' used\")\n            index <- index[1L]\n        }\n        f.big <- apply(f, 2L, sum)\n        if (boot.out$stype == \"i\")\n        { \tn <- ncol(f)\n                i.big <- rep(seq_len(n),f.big)\n                t.big <- stat(data, i.big, ...)[index]\n            }\n        else if (boot.out$stype == \"f\")\n            t.big <- stat(data, f.big, ...)[index]\n        else if (boot.out$stype == \"w\")\n            t.big <- stat(data, f.big/R, ...)[index]\n        bias <- mean(boot.out$t[, index]) - t.big\n        out <- bias\n    }\n    else {\n# Using the linear approximation as a control variable, find estimates\n# of the moments and quantiles of the statistic of interest.\n        if (is.null(t) || is.null(t0)) {\n            if (length(index) > 1L) {\n                warning(\"only first element of 'index' used\")\n                index <- index[1L]\n            }\n            if (is.null(L))\n                L <- empinf(boot.out, index=index, ...)\n            tL <- linear.approx(boot.out, L, index, ...)\n            t <- boot.out$t[,index]\n            t0 <- boot.out$t0[index]\n        }\n        else {\n            if (is.null(L))\n                L <- empinf(boot.out, t=t, ...)\n            tL <- linear.approx(boot.out, L, t0=t0, ...)\n        }\n        fins <- seq_along(t)[is.finite(t)]\n        t <- t[fins]\n        tL <- tL[fins]\n        R <- length(t)\n        dL <- t - tL                    #\n# Find the moments of the statistic of interest.\n        bias.L <- mean(dL)\n        strata <- tapply(boot.out$strata, as.numeric(boot.out$strata))\n        var.L <- var.linear(L, strata) + 2*var(tL, dL) + var(dL)\n        k3.L <- k3.linear(L, strata) + 3 * cum3(tL, dL) +\n            3 * cum3(dL, tL) + cum3(dL)\n        if (is.null(distn)) {\n# If distn is not supplied then calculate the saddlepoint approximation to\n# the distribution of the linear approximation.\n            distn <- saddle.distn((t0+L)/length(L),\n                                  alpha = (1L:R)/(R + 1),\n                                  t0=c(t0,sqrt(var.L)), strata=strata)\n            dist.q <- distn$quantiles[,2]\n            distn <- distn$distn\n        }\n        else\tdist.q <- predict(distn, x=qnorm((1L:R)/(R+1)))$y#\n# Use the quantiles of the distribution of the linear approximation and\n# the control variates to estimate the quantiles of the statistic of interest.\n        distn.L <- sort(dL[order(tL)] + dist.q)\n        q.out <- distn.L[(R + 1) * alpha]\n        out <- list(L=L, tL=tL, bias=bias.L, var=var.L, k3=k3.L,\n                    quantiles=cbind(alpha,q.out), distn=distn)\n    }\n    out\n}\n\nvar.linear <- function(L, strata = NULL)\n{\n#  estimate the variance of a statistic using its linear approximation\n    vL <- 0\n    n <- length(L)\n    if (is.null(strata))\n        strata <- rep(1, n)\n    else \tstrata <- tapply(seq_len(n),as.numeric(strata))\n    S <- length(table(strata))\n    for(s in 1L:S) {\n        i.s <- seq_len(n)[strata == s]\n        vL <- vL + sum(L[i.s]^2/length(i.s)^2)\n    }\n    vL\n}\n\nk3.linear <- function(L, strata = NULL)\n{\n#  estimate the skewness of a statistic using its linear approximation\n    k3L <- 0\n    n <- length(L)\n    if (is.null(strata))\n        strata <- rep(1, n)\n    else\tstrata <- tapply(seq_len(n),as.numeric(strata))\n    S <- length(table(strata))\n    for(s in 1L:S) {\n        i.s <- seq_len(n)[strata == s]\n        k3L <- k3L + sum(L[i.s]^3/length(i.s)^3)\n    }\n    k3L\n}\n\ncum3 <- function(a, b=a, c=a, unbiased=TRUE)\n# calculate third order cumulants.\n{\n    n <- length(a)\n    if (unbiased) mult <- n/((n-1)*(n-2))\n    else mult <- 1/n\n    mult*sum((a - mean(a)) * (b - mean(b)) * (c - mean(c)))\n}\n\nlogit <- function(p) qlogis(p)\n#\n#  Calculate the logit of a proportion in the range [0,1]\n#\n## {\n##     out <- p\n##     inds <- seq_along(p)[!is.na(p)]\n##     if (any((p[inds] < 0) | (p[inds] > 1)))\n##         stop(\"invalid proportions input\")\n##     out[inds] <- log(p[inds]/(1-p[inds]))\n##     out[inds][p[inds] == 0] <- -Inf\n##     out[inds][p[inds] == 1] <- Inf\n##     out\n## }\n\ninv.logit <- function(x)\n#\n#  Calculate the inverse logit of a number\n#\n# {\n#     out <- exp(x)/(1+exp(x))\n#     out[x==-Inf] <- 0\n#     out[x==Inf] <- 1\n#     out\n# }\nplogis(x)\n\niden <- function(n)\n#\n#  Return the identity matrix of size n\n#\n    if (n > 0) diag(rep(1,n)) else NULL\n\nzero <- function(n,m)\n#\n#  Return an n x m matrix of 0's\n#\n    if ((n > 0) & (m > 0)) matrix(0,n,m) else NULL\n\n\nsimplex <- function(a,A1=NULL,b1=NULL,A2=NULL,b2=NULL,A3=NULL,b3=NULL,\n\t\tmaxi=FALSE, n.iter=n+2*m, eps=1e-10)\n#\n#   This function calculates the solution to a linear programming\n#   problem using the tableau simplex method.  The constraints are\n#   given by the matrices A1, A2, A3 and the vectors b1, b2 and b3\n#   such that A1%*%x <= b1, A2%*%x >= b2 and A3%*%x = b3.  The 2-phase\n#   Simplex method is used.\n#\n{\n    call <- match.call()\n    if (!is.null(A1))\n        if (is.matrix(A1))\n            m1 <- nrow(A1)\n        else \tm1 <- 1\n    else \tm1 <- 0\n    if (!is.null(A2))\n        if (is.matrix(A2))\n            m2 <- nrow(A2)\n        else \tm2 <- 1\n    else \tm2 <- 0\n    if (!is.null(A3))\n        if (is.matrix(A3))\n            m3 <- nrow(A3)\n        else \tm3 <- 1\n    else \tm3 <- 0\n    m <- m1+m2+m3\n    n <- length(a)\n    a.o <- a\n    if (maxi) a <- -a\n    if (m2+m3 == 0)\n# If there are no >= or = constraints then the origin is a feasible\n# solution, and so only the second phase is required.\n        out <- simplex1(c(a,rep(0,m1)), cbind(A1,iden(m1)), b1,\n                        c(rep(0,m1),b1), n+(1L:m1), eps=eps)\n    else {\n        if (m2 > 0)\n            out1 <- simplex1(c(a,rep(0,m1+2*m2+m3)),\n                             cbind(rbind(A1,A2,A3),\n                                   rbind(iden(m1),zero(m2+m3,m1)),\n                                   rbind(zero(m1,m2),-iden(m2),\n                                         zero(m3,m2)),\n                                   rbind(zero(m1,m2+m3),\n                                         iden(m2+m3))),\n                             c(b1,b2,b3),\n                             c(rep(0,n),b1,rep(0,m2),b2,b3),\n                             c(n+(1L:m1),(n+m1+m2)+(1L:(m2+m3))),\n                             stage=1, n1=n+m1+m2,\n                             n.iter=n.iter, eps=eps)\n        else\n            out1 <- simplex1(c(a,rep(0,m1+m3)),\n                             cbind(rbind(A1,A3),\n                                   iden(m1+m3)),\n                             c(b1,b3),\n                             c(rep(0,n),b1,b3),\n                             n+(1L:(m1+m3)), stage=1, n1=n+m1,\n                             n.iter=n.iter, eps=eps)\n#  In phase 1 use 1 artificial variable for each constraint and\n#  minimize the sum of the artificial variables.  This gives a\n#  feasible solution to the original problem as long as all\n#  artificial variables are non-basic (and hence the value of the\n#  new objective function is 0).  If this is true then optimize the\n#  original problem using the result as the original feasible solution.\n        if (out1$val.aux > eps)\n            out <- out1\n        else\tout <- simplex1(out1$a[1L:(n+m1+m2)],\n                                out1$A[,1L:(n+m1+m2)],\n                                out1$soln[out1$basic],\n                                out1$soln[1L:(n+m1+m2)],\n                                out1$basic,\n                                val=out1$value, n.iter=n.iter, eps=eps)\n    }\n    if (maxi)\n        out$value <- -out$value\n    out$maxi <- maxi\n    if (m1 > 0L)\n        out$slack <- out$soln[n+(1L:m1)]\n    if (m2 > 0L)\n        out$surplus <- out$soln[n+m1+(1L:m2)]\n    if (out$solved == -1)\n        out$artificial <- out$soln[-(1L:n+m1+m2)]\n    out$obj <- a.o\n    names(out$obj) <- paste(\"x\",seq_len(n),sep=\"\")\n    out$soln <- out$soln[seq_len(n)]\n    names(out$soln) <- paste(\"x\",seq_len(n),sep=\"\")\n    out$call <- call\n    class(out) <- \"simplex\"\n    out\n}\n\n\n\n\nsimplex1 <- function(a,A,b,init,basic,val=0,stage=2, n1=N, eps=1e-10,\n                     n.iter=n1)\n#\n#  Tableau simplex function called by the simplex routine.  This does\n#  the actual calculations required in each phase of the simplex method.\n#\n{\n    pivot <- function(tab, pr, pc) {\n#  Given the position of the pivot and the tableau, complete\n#  the matrix operations to swap the variables.\n        pv <- tab[pr,pc]\n        pcv <- tab[,pc]\n        tab[-pr,]<- tab[-pr,] - (tab[-pr,pc]/pv)%o%tab[pr,]\n        tab[pr,] <- tab[pr,]/(-pv)\n        tab[pr,pc] <- 1/pv\n        tab[-pr,pc] <- pcv[-pr]/pv\n        tab\n    }\n    N <- ncol(A)\n    M <- nrow(A)\n    nonbasic <- (1L:N)[-basic]\n    tableau <- cbind(b,-A[,nonbasic,drop=FALSE])\n#  If in the first stage then find the artifical objective function,\n#  otherwise use the original objective function.\n    if (stage == 2) {\n        tableau <- rbind(tableau,c(val,a[nonbasic]))\n        obfun <- a[nonbasic]\n    }\n    else {\tobfun <- apply(tableau[(M+n1-N+1):M,,drop=FALSE],2L,sum)\n\t\ttableau <- rbind(c(val,a[nonbasic]),tableau,obfun)\n\t\tobfun <- obfun[-1L]\n            }\n    it <- 1\n    while (!all(obfun> -eps) && (it <= n.iter))\n#  While the objective function can be reduced\n#\tFind a pivot\n#\tcomplete the matrix operations required\n#\tupdate the lists of basic and non-basic variables\n    {\n        pcol <- 1+order(obfun)[1L]\n        if (stage == 2)\n            neg <- (1L:M)[tableau[1L:M,pcol]< -eps]\n        else \tneg <- 1+ (1L:M)[tableau[2:(M+1),pcol] < -eps]\n        ratios <- -tableau[neg,1L]/tableau[neg,pcol]\n        prow <- neg[order(ratios)[1L]]\n        tableau <- pivot(tableau,prow,pcol)\n        if (stage == 1) {\n            temp <- basic[prow-1L]\n            basic[prow-1L] <- nonbasic[pcol-1L]\n            nonbasic[pcol-1L] <- temp\n            obfun <- tableau[M+2L,-1L]\n        }\n        else {\ttemp <- basic[prow]\n                basic[prow] <- nonbasic[pcol-1L]\n                nonbasic[pcol-1L] <- temp\n                obfun <- tableau[M+1L,-1L]\n            }\n        it <- it+1\n    }\n#  END of while loop\n    if (stage == 1) {\n        val.aux <- tableau[M+2,1L]\n# If the value of the auxilliary objective function is zero but some\n# of the artificial variables are basic (with value 0) then switch\n# them with some nonbasic variables (which are not artificial).\n        if ((val.aux < eps) && any(basic>n1)) {\n            ar <- (1L:M)[basic>n1]\n            for (j in seq_along(temp)) {\n                prow <- 1+ar[j]\n                pcol <- 1 + order(\n                                  nonbasic[abs(tableau[prow,-1L])>eps])[1L]\n                tableau <- pivot(tableau,prow,pcol)\n                temp1 <- basic[prow-1L]\n                basic[prow-1L] <- nonbasic[pcol-1L]\n                nonbasic[pcol-1L] <- temp1\n            }\n        }\n        soln <- rep(0,N)\n        soln[basic] <- tableau[2:(M+1L),1L]\n        val.orig <- tableau[1L,1L]\n        A.out <- matrix(0,M,N)\n        A.out[,basic] <- iden(M)\n        A.out[,nonbasic] <- -tableau[2L:(M+1L),-1L]\n        a.orig <- rep(0,N)\n        a.orig[nonbasic] <- tableau[1L,-1L]\n        a.aux <- rep(0,N)\n        a.aux[nonbasic] <- tableau[M+2,-1L]\n        list(soln=soln, solved=-1, value=val.orig, val.aux=val.aux,\n             A=A.out, a=a.orig, a.aux=a.aux, basic=basic)\n    }\n    else {\n \tsoln <- rep(0,N)\n        soln[basic] <- tableau[1L:M,1L]\n        val <- tableau[(M+1L),1L]\n        A.out <- matrix(0,M,N)\n        A.out[,basic] <- iden(M)\n        A.out[,nonbasic] <- tableau[1L:M,-1L]\n        a.out <- rep(0,N)\n        a.out[nonbasic] <- tableau[M+1L,-1L]\n        if (it <= n.iter) solved <- 1L\n        else solved <- 0L\n        list(soln=soln, solved=solved, value=val,  A=A.out,\n             a=a.out, basic=basic)\n    }\n}\n\nprint.simplex <- function(x, ...) {\n#\n#  Print the output of a simplex solution to a linear programming problem.\n#\n    simp.out <- x\n    cat(\"\\nLinear Programming Results\\n\\n\")\n    cl <- simp.out$call\n    cat(\"Call : \")\n    dput(cl, control=NULL)\n    if (simp.out$maxi) cat(\"\\nMaximization \")\n    else cat(\"\\nMinimization \")\n    cat(\"Problem with Objective Function Coefficients\\n\")\n    print(simp.out$obj)\n    if (simp.out$solved == 1) {\n        cat(\"\\n\\nOptimal solution has the following values\\n\")\n        print(simp.out$soln)\n        cat(paste(\"The optimal value of the objective \",\n                  \" function is \",simp.out$value,\".\\n\",sep=\"\"))\n    }\n    else if (simp.out$solved == 0) {\n        cat(\"\\n\\nIteration limit exceeded without finding solution\\n\")\n        cat(\"The coefficient values at termination were\\n\")\n        print(simp.out$soln)\n        cat(paste(\"The objective function value was \",simp.out$value,\n                  \".\\n\",sep=\"\"))\n    }\n    else cat(\"\\nNo feasible solution could be found\\n\")\n    invisible(x)\n}\n\n\nsaddle <-\n    function(A = NULL, u = NULL, wdist = \"m\", type = \"simp\", d = NULL, d1 = 1,\n             init = rep(0.1, d), mu = rep(0.5, n), LR = FALSE, strata = NULL,\n             K.adj = NULL, K2 = NULL)\n#\n#  Saddle point function.  Standard multinomial saddlepoints are\n#  computed using nlmin whereas the more complicated conditional\n#  saddlepoints for Poisson and Binary cases are done by fitting\n#  a GLM to a set of responses which, in turn, are derived from a\n#  linear programming problem.\n#\n{\n    det <- function(mat) {\n#  absolute value of the determinant of a matrix.\n        if (any(is.na(mat))) NA\n        else if (!all(is.finite(mat))) Inf\n        else  abs(prod(eigen(mat,only.values = TRUE)$values))\n    }\n    sgn <- function(x, eps = 1e-10)\n#  sign of a real number.\n        if (abs(x) < eps) 0 else 2*(x > 0) - 1\n\n    if (!is.null(A)) {\n        A <- as.matrix(A)\n        d <- ncol(A)\n        if (length(u) != d)\n            stop(gettextf(\"number of columns of 'A' (%d) not equal to length of 'u' (%d)\",\n                          d, length(u)), domain = NA)\n        n <- nrow(A)\n    } else if (is.null(K.adj))\n        stop(\"either 'A' and 'u' or 'K.adj' and 'K2' must be supplied\")\n    if (!is.null(K.adj)) {\n#  If K.adj and K2 are supplied then calculate the simple saddlepoint.\n        if (is.null(d)) d <- 1\n        type <- \"simp\"\n        wdist <- \"o\"\n        speq <- suppressWarnings(optim(init, K.adj))\n        if (speq$convergence == 0) {\n            ahat <- speq$par\n            Khat <- K.adj(ahat)\n            K2hat <- det(K2(ahat))\n            gs <- 1/sqrt((2*pi)^d*K2hat)*exp(Khat)\n            if (d == 1) {\n                r <- sgn(ahat)*sqrt(-2*Khat)\n                v <- ahat*sqrt(K2hat)\n                if (LR)\tGs <- pnorm(r)+dnorm(r)*(1/r + 1/v)\n                else\tGs <- pnorm(r+log(v/r)/r)\n            }\n            else\tGs <- NA\n        }\n        else gs <- Gs <- ahat <- NA\n    }\n    else if (wdist == \"m\") {\n#  Calculate the standard simple saddlepoint for the multinomial case.\n        type <- \"simp\"\n        if (is.null(strata)) {\n            p <- mu/sum(mu)\n            para <- list(p,A,u,n)\n            K <- function(al) {\n                w <- para[[1L]]*exp(al%*%t(para[[2L]]))\n                para[[4L]]*log(sum(w))-sum(al*para[[3L]])\n            }\n            speq <- suppressWarnings(optim(init, K))\n            ahat <- speq$par\n            w <- as.vector(p*exp(ahat%*%t(A)))\n            Khat <- n*log(sum(w))-sum(ahat*u)\n            sw <- sum(w)\n            if (d == 1)\n                K2hat <- n*(sum(w*A*A)/sw-(sum(w*A)/sw)^2)\n            else {\n                saw <- w %*% A\n                sa2w <- t(matrix(w,n,d)*A) %*% A\n                K2hat <- det(n/sw*(sa2w-(saw%*%t(saw))/sw))\n            }\n        }\n        else {\n            sm <- as.vector(tapply(mu,strata,sum)[strata])\n            p <- mu/sm\n            ns <- table(strata)\n            para <- list(p,A,u,strata,ns)\n            K <- function(al) {\n                w <- para[[1L]]*exp(al%*%t(para[[2L]]))\n                sum(para[[5]]*log(tapply(w,para[[4L]],sum))) -\n                    sum(al*para[[3L]])\n            }\n            speq <- suppressWarnings(optim(init, K))\n            ahat <- speq$par\n            w <- p*exp(ahat%*%t(A))\n            Khat <- sum(ns*log(tapply(w,strata,sum)))-sum(ahat*u)\n            temp <- matrix(0,d,d)\n            for (s in seq_along(ns)) {\n                gp <- seq_len(n)[strata == s]\n                sw <- sum(w[gp])\n                saw <- w[gp]%*%A[gp,]\n                sa2w <- t(matrix(w[gp],ns[s],d)*A[gp,])%*%A[gp,]\n                temp <- temp+ns[s]/sw*(sa2w-(saw%*%t(saw))/sw)\n            }\n            K2hat <- det(temp)\n        }\n        if (speq$convergence == 0) {\n            gs <- 1/sqrt(2*pi*K2hat)^d*exp(Khat)\n            if (d == 1) {\n                r <- sgn(ahat)*sqrt(-2*Khat)\n                v <- ahat*sqrt(K2hat)\n                if (LR)\tGs <- pnorm(r)+dnorm(r)*(1/r - 1/v)\n                else\tGs <- pnorm(r+log(v/r)/r)\n            }\n            else\tGs <- NA\n        }\n        else\tgs <- Gs <- ahat <- NA\n    } else if (wdist == \"p\") {\n        if (type == \"cond\") {\n#  Conditional Poisson and Binary saddlepoints are caculated by first\n#  solving a linear programming problem and then fitting a generalized\n#  linear model to find the solution to the saddlepoint equations.\n            smp <- simplex(rep(0, n), A3 = t(A), b3 = u)\n            if (smp$solved == 1) {\n                y <- smp$soln\n                A1 <- A[,1L:d1]\n                A2 <- A[,-(1L:d1)]\n                mod1 <- summary(glm(y ~ A1 + A2 + offset(log(mu)) - 1,\n                                    poisson, control = glm.control(maxit=100)))\n                mod2 <- summary(glm(y ~ A2 + offset(log(mu)) - 1,\n                                    poisson, control = glm.control(maxit=100)))\n                ahat <- mod1$coefficients[,1L]\n                ahat2 <- mod2$coefficients[,1L]\n                temp1 <- mod2$deviance - mod1$deviance\n                temp2 <- det(mod2$cov.unscaled)/det(mod1$cov.unscaled)\n                gs <- 1/sqrt((2*pi)^d1*temp2)*exp(-temp1/2)\n                if (d1 == 1) {\n                    r <- sgn(ahat[1L])*sqrt(temp1)\n                    v <- ahat[1L]*sqrt(temp2)\n                    if (LR)\tGs<-pnorm(r)+dnorm(r)*(1/r-1/v)\n                    else\tGs <- pnorm(r+log(v/r)/r)\n                }\n                else\tGs <- NA\n            }\n            else {\n                ahat <- ahat2 <- NA\n                gs <- Gs <- NA\n            }\n        }\n        else stop(\"this type not implemented for Poisson\")\n    }\n    else if (wdist == \"b\") {\n        if (type == \"cond\") {\n            smp <- simplex(rep(0, n), A1 = iden(n), b1 = rep(1-2e-6, n),\n                           A3 = t(A), b3 = u - 1e-6*apply(A, 2L, sum))\n#  For the binary case we require that the values are in the interval (0,1)\n#  since glm code seems to have problems when there are too many 0's or 1's.\n            if (smp$solved == 1) {\n                y <- smp$soln+1e-6\n                A1 <- A[, 1L:d1]\n                A2 <- A[, -(1L:d1)]\n                mod1 <- summary(glm(cbind(y, 1-y) ~ A1+A2+offset(qlogis(mu))-1,\n                                    binomial, control = glm.control(maxit=100)))\n                mod2 <- summary(glm(cbind(y, 1-y) ~ A2+offset(qlogis(mu))-1,\n                                    binomial, control = glm.control(maxit=100)))\n                ahat <- mod1$coefficients[,1L]\n                ahat2 <- mod2$coefficients[,1L]\n                temp1 <- mod2$deviance-mod1$deviance\n                temp2 <- det(mod2$cov.unscaled)/det(mod1$cov.unscaled)\n                gs <- 1/sqrt((2*pi)^d1*temp2)*exp(-temp1/2)\n                if (d1 == 1) {\n                    r <- sgn(ahat[1L])*sqrt(temp1)\n                    v <- ahat[1L]*sqrt(temp2)\n                    if (LR)\tGs<-pnorm(r)+dnorm(r)*(1/r-1/v)\n                    else\tGs <- pnorm(r+log(v/r)/r)\n                }\n                else\tGs <- NA\n            }\n            else {\n                ahat <- ahat2 <- NA\n                gs <- Gs <- NA\n            }\n        }\n        else stop(\"this type not implemented for Binary\")\n    }\n    if (type == \"simp\")\n        out <- list(spa = c(gs, Gs), zeta.hat = ahat)\n    else #if (type == \"cond\")\n        out <- list(spa = c(gs, Gs), zeta.hat = ahat, zeta2.hat = ahat2)\n    names(out$spa) <- c(\"pdf\", \"cdf\")\n    out\n}\n\n\nsaddle.distn <-\n    function(A, u = NULL, alpha = NULL, wdist = \"m\",\n             type = \"simp\", npts = 20, t = NULL, t0 = NULL, init = rep(0.1, d),\n             mu = rep(0.5, n), LR = FALSE, strata = NULL, ...)\n#\n#  This function calculates the entire saddlepoint distribution by\n#  finding the saddlepoint approximations at npts values and then\n#  fitting a spline to the results (on the normal quantile scale).\n#  A may be a matrix or a function of t.  If A is a matrix with 1 column\n#  u is not used (u = t), if A is a matrix with more than 1 column u must\n#  be a vector with ncol(A)-1 elements, if A is a function of t then u\n#  must also be a function returning a vector of ncol(A(t, ...)) elements.\n{\n    call <- match.call()\n    if (is.null(alpha)) alpha <- c(0.001,0.005,0.01,0.025,0.05,0.1,0.2,0.5,\n                                   0.8,0.9,0.95,0.975,0.99,0.995,0.999)\n    if (is.null(t) && is.null(t0))\n        stop(\"one of 't' or 't0' required\")\n    ep1 <- min(c(alpha,0.01))/10\n    ep2 <- (1-max(c(alpha,0.99)))/10\n    d <- if (type == \"simp\") 1\n    else if (is.function(u)) {\n        if (is.null(t)) length(u(t0[1L], ...)) else length(u(t[1L], ...))\n    } else  1L+length(u)\n    i <- nsads <- 0\n    if (!is.null(t)) npts <- length(t)\n    zeta <- matrix(NA,npts,2L*d-1L)\n    spa <- matrix(NA,npts,2L)\n    pts <- NULL\n    if (is.function(A)) {\n        n <- nrow(as.matrix(A(t0[1L], ...)))\n        if (is.null(u)) stop(\"function 'u' missing\")\n        if (!is.function(u)) stop(\"'u' must be a function\")\n        if (is.null(t)) {\n            t1 <- t0[1L]-2*t0[2L]\n            sad <- saddle(A = A(t1, ...), u = u(t1, ...),\n                          wdist = wdist, type = type, d1 = 1,\n                          init = init, mu = mu, LR = LR, strata = strata)\n            bdu <- bdl <- NULL\n            while (is.na(sad$spa[2L]) || (sad$spa[2L] > ep1) ||\n                   (sad$spa[2L] < ep1/100)) {\n                nsads <- nsads+1\n#  Find a lower bound on the effective range of the saddlepoint distribution\n                if (!is.na(sad$spa[2L]) && (sad$spa[2L] > ep1)) {\n                    i <- i+1\n                    zeta[i,] <- c(sad$zeta.hat, sad$zeta2.hat)\n                    spa[i,] <- sad$spa\n                    pts <- c(pts,t1)\n                    bdu <- t1\n                }\n                else\tbdl <- t1\n                if (nsads == npts)\n                    stop(\"unable to find range\")\n                if (is.null(bdl)) {\n                    t1 <- 2*t1-t0[1L]\n                    sad <- saddle(A = A(t1, ...),\n                                u = u(t1, ...), wdist = wdist,\n                                type = type, d1 = 1, init = init,\n                                mu = mu, LR = LR, strata = strata)\n                }\n                else if (is.null(bdu)) {\n                    t1 <- (t0[1L]+bdl)/2\n                    sad <- saddle(A = A(t1, ...),\n                                u = u(t1, ...), wdist = wdist,\n                                type = type, d1 = 1, init = init,\n                                mu = mu, LR = LR, strata = strata)\n                }\n                else {\n                    t1 <- (bdu+bdl)/2\n                    sad <- saddle(A = A(t1, ...),\n                                  u = u(t1, ...), wdist = wdist,\n                                  type = type, d1 = 1, init = init,\n                                  mu = mu, LR = LR, strata = strata)\n                }\n            }\n            i1 <- i <- i+1\n            nsads <- 0\n            zeta[i,] <- c(sad$zeta.hat, sad$zeta2.hat)\n            spa[i,] <- sad$spa\n            pts <- c(pts,t1)\n            t2 <- t0[1L]+2*t0[2L]\n            sad <- saddle(A = A(t2, ...), u = u(t2, ...),\n                          wdist = wdist, type = type, d1 = 1, init = init,\n                          mu = mu, LR = LR, strata = strata)\n            bdu <- bdl <- NULL\n            while (is.na(sad$spa[2L]) || (1-sad$spa[2L] > ep2) ||\n                   (1-sad$spa[2L] < ep2/100)){\n#  Find an upper bound on the effective range of the saddlepoint distribution\n                nsads <- nsads+1\n                if (!is.na(sad$spa[2L])&&(1-sad$spa[2L] > ep2)) {\n                    i <- i+1\n                    zeta[i,] <- c(sad$zeta.hat, sad$zeta2.hat)\n                    spa[i,] <- sad$spa\n                    pts <- c(pts,t2)\n                    bdl <- t2\n                }\n                else\tbdu <- t2\n                if (nsads  == npts)\n                    stop(\"unable to find range\")\n                if (is.null(bdu)) {\n                    t2 <- 2*t2-t0[1L]\n                    sad <- saddle(A = A(t2, ...),\n                                u = u(t2, ...), wdist = wdist,\n                                type = type, d1 = 1, init = init,\n                                mu = mu, LR = LR, strata = strata)\n                } else if (is.null(bdl)) {\n                    t2 <- (t0[1L]+bdu)/2\n                    sad <- saddle(A = A(t2, ...),\n                                u = u(t2, ...), wdist = wdist,\n                                type = type, d1 = 1, init = init,\n                                mu = mu, LR = LR, strata = strata)\n                } else {\n                    t2 <- (bdu+bdl)/2\n                    sad <- saddle(A = A(t2, ...),\n                                  u = u(t2, ...), wdist = wdist,\n                                  type = type, d1 = 1, init = init,\n                                  mu = mu, LR = LR, strata = strata)\n                }\n            }\n            i <- i+1\n            zeta[i,] <- c(sad$zeta.hat, sad$zeta2.hat)\n            spa[i,] <- sad$spa\n            pts <- c(pts,t2)\n#  Now divide the rest of the npts points so that about half are at\n#  either side of t0[1L].\n            if ((npts %% 2) ==  0) {\n                tt1<- seq.int(t1, t0[1L], length.out = npts/2-i1+2)[-1L]\n                tt2 <- seq.int(t0[1L], t2, length.out = npts/2+i1-i+2)[-1L]\n                t <- c(tt1[-length(tt1)], tt2[-length(tt2)])\n            } else {\n                ex <- 1*(t1+t2 > 2*t0[1L])\n                ll <- floor(npts/2)+2\n                tt1 <- seq.int(t1, t0[1L], length.out = ll-i1+1-ex)[-1L]\n                tt2 <- seq.int(t0[1L], t2, length.out = ll+i1-i+ex)[-1L]\n                t <- c(tt1[-length(tt1)], tt2[-length(tt2)])\n            }\n        }\n        init1 <- init\n        for (j in (i+1):npts) {\n#  Calculate the saddlepoint approximations at the extra points.\n            sad <- saddle(A = A(t[j-i], ...), u = u(t[j-i], ...),\n                          wdist = wdist, type = type, d1 = 1,\n                          init = init1, mu = mu, LR = LR,\n                          strata = strata)\n            zeta[j,] <- c(sad$zeta.hat, sad$zeta2.hat)\n            init1 <- sad$zeta.hat\n            spa[j,] <- sad$spa\n        }\n    }\n    else {\n        A <- as.matrix(A)\n        n <- nrow(A)\n        if (is.null(t)) {\n#  Find a lower bound on the effective range of the saddlepoint distribution\n            t1 <- t0[1L]-2*t0[2L]\n            sad <- saddle(A = A, u = c(t1,u), wdist = wdist, type = type,\n                          d = d, d1 = 1, init = init, mu = mu, LR = LR,\n                          strata = strata)\n            bdu <- bdl <- NULL\n            while (is.na(sad$spa[2L]) || (sad$spa[2L] > ep1) ||\n                   (sad$spa[2L] < ep1/100)) {\n                if (!is.na(sad$spa[2L]) && (sad$spa[2L] > ep1)) {\n                    i <- i+1\n                    zeta[i,] <- c(sad$zeta.hat,\n                                  sad$zeta2.hat)\n                    spa[i,] <- sad$spa\n                    pts <- c(pts,t1)\n                    bdu <- t1\n                }\n                else\tbdl <- t1\n                if (i == floor(npts/2))\n                    stop(\"unable to find range\")\n                if (is.null(bdl)) {\n                    t1 <- 2*t1-t0[1L]\n                    sad <- saddle(A = A, u = c(t1,u),\n                                  wdist = wdist, type = type, d = d,\n                                  d1 = 1, init = init, mu = mu, LR = LR,\n                                  strata = strata)\n                } else if (is.null(bdu)) {\n                    t1 <- (t0[1L]+bdl)/2\n                    sad <- saddle(A = A, u = c(t1,u),\n                                  wdist = wdist, type = type, d = d,\n                                  d1 = 1, init = init, mu = mu, LR = LR,\n                                  strata = strata)\n                } else {\n                    t1 <- (bdu+bdl)/2\n                    sad <- saddle(A = A, u = c(t1,u),\n                                  wdist = wdist, type = type, d = d,\n                                  d1 = 1, init = init, mu = mu, LR = LR,\n                                  strata = strata)\n                }\n            }\n            i1 <- i <- i+1\n            zeta[i,] <- c(sad$zeta.hat, sad$zeta2.hat)\n            spa[i,] <- sad$spa\n            pts <- c(pts,t1)\n#  Find an upper bound on the effective range of the saddlepoint distribution\n            t2 <- t0[1L]+2*t0[2L]\n            sad <- saddle(A = A, u = c(t2,u), wdist = wdist, type = type,\n                          d = d, d1 = 1, init = init, mu = mu, LR = LR,\n                          strata = strata)\n            bdu <- bdl <- NULL\n            while (is.na(sad$spa[2L]) || (1-sad$spa[2L] > ep2) ||\n                   (1-sad$spa[2L] < ep2/100)) {\n                if (!is.na(sad$spa[2L])&&(1-sad$spa[2L] > ep2)) {\n                    i <- i+1\n                    zeta[i,] <- c(sad$zeta.hat, sad$zeta2.hat)\n                    spa[i,] <- sad$spa\n                    pts <- c(pts, t2)\n                    bdl <- t2\n                }\n                else\tbdu <- t2\n                if ((i-i1) == floor(npts/2))\n                    stop(\"unable to find range\")\n                if (is.null(bdu)) {\n                    t2 <- 2*t2-t0[1L]\n                    sad <- saddle(A = A, u = c(t2, u),\n                                  wdist = wdist, type = type, d = d,\n                                  d1 = 1, init = init, mu = mu, LR = LR,\n                                  strata = strata)\n                }\n                else if (is.null(bdl)) {\n                    t2 <- (t0[1L]+bdu)/2\n                    sad <- saddle(A = A, u = c(t2, u),\n                                  wdist = wdist, type = type, d = d,\n                                  d1 = 1, init = init, mu = mu, LR = LR,\n                                  strata = strata)\n                }\n                else {\n                    t2 <- (bdu+bdl)/2\n                    sad <- saddle(A = A, u = c(t2, u),\n                                  wdist = wdist, type = type, d = d,\n                                  d1 = 1, init = init, mu = mu, LR = LR,\n                                  strata = strata)\n                }\n            }\n            i <- i+1\n            zeta[i,] <- c(sad$zeta.hat, sad$zeta2.hat)\n            spa[i,] <- sad$spa\n            pts <- c(pts, t2)\n#  Now divide the rest of the npts points so that about half are at\n#  either side of t0[1L].\n            if ((npts %% 2) == 0) {\n                tt1 <- seq.int(t1, t0[1L], length.out=npts/2-i1+2)[-1L]\n                tt2 <- seq.int(t0[1L], t2, length.out=npts/2+i1-i+2)[-1L]\n                t <- c(tt1[-length(tt1)], tt2[-length(tt2)])\n            }\n            else {\n                ex <- 1*(t1+t2 > 2*t0[1L])\n                ll <- floor(npts/2)+2\n                tt1 <- seq.int(t1, t0[1L], length.out=ll-i1+1-ex)[-1L]\n                tt2 <- seq.int(t0[1L], t2, length.out=ll+i1-i+ex)[-1L]\n                t <- c(tt1[-length(tt1)], tt2[-length(tt2)])\n            }\n        }\n        init1 <- init\n        for (j in (i+1):npts) {\n#  Calculate the saddlepoint approximations at the extra points.\n            sad <- saddle(A=A, u=c(t[j-i],u), wdist=wdist,\n                          type=type, d=d, d1=1, init=init,\n                          mu=mu, LR=LR, strata=strata)\n            zeta[j,] <- c(sad$zeta.hat, sad$zeta2.hat)\n            init1 <- sad$zeta.hat\n            spa[j,] <- sad$spa\n        }\n    }\n#  Omit points too close to the center as the distribution approximation is\n#  not good at those points.\n    pts.in <- (1L:npts)[(abs(zeta[,1L]) > 1e-6) &\n                       (abs(spa[, 2L] - 0.5) < 0.5 - 1e-10)]\n    pts <- c(pts,t)[pts.in]\n    zeta <- as.matrix(zeta[pts.in, ])\n    spa <- spa[pts.in, ]\n#  Fit a spline to the approximations and predict at the required quantile\n#  values.\n    distn <- smooth.spline(qnorm(spa[,2]), pts)\n    quantiles <- predict(distn, qnorm(alpha))$y\n    quans <- cbind(alpha, quantiles)\n    colnames(quans) <- c(\"alpha\", \"quantile\")\n    inds <- order(pts)\n    psa <- cbind(pts[inds], spa[inds,], zeta[inds,])\n    if (d == 1) anames <- \"zeta\"\n    else {\tanames <- rep(\"\",2*d-1)\n\t\tfor (j in 1L:d) anames[j] <- paste(\"zeta1.\", j ,sep = \"\")\n\t\tfor (j in (d+1):(2*d-1)) anames[j] <- paste(\"zeta2.\", j-d, sep = \"\")\n            }\n    dimnames(psa) <- list(NULL,c(\"t\", \"gs\", \"Gs\", anames))\n    out <- list(quantiles = quans, points = psa, distn = distn,\n                call = call, LR = LR)\n    class(out) <- \"saddle.distn\"\n    out\n}\n\nprint.saddle.distn <- function(x, ...) {\n#\n#  Print the output from saddle.distn\n#\n    sad.d <- x\n    cl <- sad.d$call\n    rg <- range(sad.d$points[,1L])\n    mid <- mean(rg)\n    digs <- ceiling(log10(abs(mid)))\n    if (digs <= 0) digs <- 4\n    else if (digs >= 4) digs <- 0\n    else digs <- 4-digs\n    rg <- round(rg,digs)\n    level <- 100*sad.d$quantiles[,1L]\n    quans <- format(round(sad.d$quantiles,digs))\n    quans[,1L] <- paste(\"\\n\",format(level),\"%     \",sep=\"\")\n    cat(\"\\nSaddlepoint Distribution Approximations\\n\\n\")\n    cat(\"Call : \\n\")\n    dput(cl, control=NULL)\n    cat(\"\\nQuantiles of the Distribution\\n\")\n    cat(t(quans))\n    cat(paste(\"\\n\\nSmoothing spline used \", nrow(sad.d$points),\n              \" points in the range \", rg[1L],\" to \", rg[2L], \".\\n\", sep=\"\"))\n    if (sad.d$LR)\n        cat(\"Lugananni-Rice approximations used\\n\")\n    invisible(sad.d)\n}\n\nlines.saddle.distn <-\n    function(x, dens = TRUE, h = function(u) u, J = function(u) 1,\n             npts = 50, lty = 1, ...)\n{\n#\n#  Add lines corresponding to a saddlepoint approximation to a plot\n#\n    sad.d <- x\n    tt <- sad.d$points[,1L]\n    rg <- range(h(tt, ...))\n    tt1 <- seq.int(from = rg[1L], to = rg[2L], length.out = npts)\n    if (dens) {\n        gs <- sad.d$points[,2]\n        spl <- smooth.spline(h(tt, ...),log(gs*J(tt, ...)))\n        lines(tt1,exp(predict(spl, tt1)$y), lty = lty)\n    } else {\n        Gs <- sad.d$points[,3]\n        spl <- smooth.spline(h(tt, ...),qnorm(Gs))\n        lines(tt1,pnorm(predict(spl ,tt1)$y))\n    }\n    invisible(sad.d)\n}\n\nts.array <- function(n, n.sim, R, l, sim, endcorr)\n{\n#\n#  This function finds the starting positions and lengths for the\n#  block bootstrap.\n#\n#  n is the number of data points in the original time series\n#  n.sim is the number require in the simulated time series\n#  R is the number of simulated series required\n#  l is the block length\n#  sim is the simulation type \"fixed\" or \"geom\".  For \"fixed\" l is taken\n#\tto be the fixed block length, for \"geom\" l is the average block\n#\tlength, the actual lengths having a geometric distribution.\n#  endcorr is a logical specifying whether end-correction is required.\n#\n#  It returns a list of two components\n#  starts is a matrix of starts, it has R rows\n#  lens is a vector of lengths if sim=\"fixed\" or a matrix of lengths\n#\tcorresponding to the starting points in starts if sim=\"geom\"\n    endpt <- if (endcorr) n else n-l+1\n    cont <- TRUE\n    if (sim == \"geom\") {\n        len.tot <- rep(0,R)\n        lens <- NULL\n        while (cont) {\n#            inds <- (1L:R)[len.tot < n.sim]\n            temp <- 1+rgeom(R, 1/l)\n            temp <- pmin(temp, n.sim - len.tot)\n            lens <- cbind(lens, temp)\n            len.tot <- len.tot + temp\n            cont <- any(len.tot < n.sim)\n        }\n        dimnames(lens) <- NULL\n        nn <- ncol(lens)\n        st <- matrix(sample.int(endpt, nn*R, replace = TRUE), R)\n    } else {\n        nn <- ceiling(n.sim/l)\n        lens <- c(rep(l,nn-1), 1+(n.sim-1)%%l)\n        st <- matrix(sample.int(endpt, nn*R, replace = TRUE), R)\n    }\n    list(starts = st, lengths = lens)\n}\n\nmake.ends <- function(a, n)\n{\n#  Function which takes a matrix of starts and lengths and returns the\n#  indices for a time series simulation. (Viewing the series as circular.)\n    mod <- function(i, n) 1 + (i - 1) %% n\n    if (a[2L] == 0) numeric()\n    else  mod(seq.int(a[1L], a[1L] + a[2L] - 1, length.out = a[2L]), n)\n}\n\n\ntsboot <- function(tseries, statistic, R, l = NULL, sim = \"model\",\n                   endcorr = TRUE, n.sim = NROW(tseries), orig.t = TRUE,\n                   ran.gen = function(tser, n.sim, args) tser,\n                   ran.args = NULL, norm = TRUE, ...,\n                   parallel = c(\"no\", \"multicore\", \"snow\"),\n                   ncpus = getOption(\"boot.ncpus\", 1L), cl = NULL)\n{\n#\n#  Bootstrap function for time series data.  Possible resampling methods are\n#  the block bootstrap, the stationary bootstrap (these two can also be\n#  post-blackened), model-based resampling and phase scrambling.\n#\n    if (missing(parallel)) parallel <- getOption(\"boot.parallel\", \"no\")\n    parallel <- match.arg(parallel)\n    have_mc <- have_snow <- FALSE\n    if (parallel != \"no\" && ncpus > 1L) {\n        if (parallel == \"multicore\") have_mc <- .Platform$OS.type != \"windows\"\n        else if (parallel == \"snow\") have_snow <- TRUE\n        if (!have_mc && !have_snow) ncpus <- 1L\n    }\n\n    ## This does not necessarily call statistic, so we force a promise.\n    statistic\n\n    tscl <- class(tseries)\n    R <- floor(R)\n    if (R <= 0) stop(\"'R' must be positive\")\n    call <- match.call()\n    if (!exists(\".Random.seed\", envir = .GlobalEnv, inherits = FALSE)) runif(1)\n    seed <- get(\".Random.seed\", envir = .GlobalEnv, inherits = FALSE)\n    t0 <- if (orig.t) statistic(tseries, ...) else NULL\n    ts.orig <- if (!isMatrix(tseries)) as.matrix(tseries) else tseries\n    n <- nrow(ts.orig)\n    if (missing(n.sim)) n.sim <- n\n    class(ts.orig) <- tscl\n    if ((sim == \"model\") || (sim == \"scramble\"))\n        l <- NULL\n    else if ((is.null(l) || (l <= 0) || (l > n)))\n        stop(\"invalid value of 'l'\")\n    fn <- if (sim == \"scramble\") {\n        rm(ts.orig)\n        ## Phase scrambling\n        function(r) statistic(scramble(tseries, norm), ...)\n    } else if (sim == \"model\") {\n        rm(ts.orig)\n        ## Model-based resampling\n        ## force promises\n        ran.gen; ran.args\n        function(r) statistic(ran.gen(tseries, n.sim, ran.args), ...)\n    } else if (sim %in% c(\"fixed\", \"geom\")) {\n        ## Otherwise generate an R x n matrix of starts and lengths for blocks.\n        ## The actual indices of the blocks can then easily be found and these\n        ## indices used for the resampling.  If ran.gen is present then\n        ## post-blackening is required when the blocks have been formed.\n        if (sim == \"geom\") endcorr <- TRUE\n\ti.a <- ts.array(n, n.sim, R, l, sim, endcorr)\n        ## force promises\n        ran.gen; ran.args\n        function(r) {\n            ends <- if (sim == \"geom\")\n                cbind(i.a$starts[r,  ], i.a$lengths[r,  ])\n            else  cbind(i.a$starts[r, ], i.a$lengths)\n            inds <- apply(ends, 1L, make.ends, n)\n            inds <- if (is.list(inds)) matrix(unlist(inds)[1L:n.sim], n.sim, 1L)\n            else matrix(inds, n.sim, 1L)\n            statistic(ran.gen(ts.orig[inds, ], n.sim, ran.args), ...)\n        }\n    } else\n        stop(\"unrecognized value of 'sim'\")\n\n    res <- if (ncpus > 1L && (have_mc || have_snow)) {\n        if (have_mc) {\n            parallel::mclapply(seq_len(R), fn, mc.cores = ncpus)\n        } else if (have_snow) {\n            list(...) # evaluate any promises\n            if (is.null(cl)) {\n                cl <- parallel::makePSOCKcluster(rep(\"localhost\", ncpus))\n                if(RNGkind()[1L] == \"L'Ecuyer-CMRG\")\n                    parallel::clusterSetRNGStream(cl)\n                res <- parallel::parLapply(cl, seq_len(R), fn)\n                parallel::stopCluster(cl)\n                res\n            } else parallel::parLapply(cl, seq_len(R), fn)\n       }\n    } else lapply(seq_len(R), fn)\n\n    t <- matrix(, R, length(res[[1L]]))\n    for(r in seq_len(R)) t[r, ] <- res[[r]]\n\n    ts.return(t0 = t0, t = t, R = R, tseries = tseries, seed = seed,\n              stat = statistic, sim = sim, endcorr = endcorr, n.sim = n.sim,\n              l = l, ran.gen = ran.gen, ran.args = ran.args, call = call,\n              norm = norm)\n}\n\nscramble <- function(ts, norm = TRUE)\n#\n#  Phase scramble a time series.  If norm = TRUE then normal margins are\n#  used otherwise exact empirical margins are used.\n#\n{\n    cl <- class(ts)\n    if (isMatrix(ts)) stop(\"multivariate time series not allowed\")\n    st <- start(ts)\n    dt <- deltat(ts)\n    frq <- frequency(ts)\n    y <- as.vector(ts)\n    e <- y - mean(y)\n    n <- length(e)\n    if (!norm) e <- qnorm( rank(e)/(n+1) )\n    f <- fft(e) * complex(n, argument = runif(n) * 2 * pi)\n    C.f <- Conj(c(0, f[seq(from = n, to = 2L, by = -1L)])) # or n:2\n    e <- Re(mean(y) + fft((f + C.f)/sqrt(2), inverse = TRUE)/n)\n    if (!norm) e <- sort(y)[rank(e)]\n    ts(e, start = st, freq = frq, deltat = dt)\n}\n\nts.return <- function(t0, t, R, tseries, seed, stat, sim, endcorr,\n                      n.sim, l, ran.gen, ran.args, call, norm) {\n#\n#  Return the results of a time series bootstrap as an object of\n#  class \"boot\".\n#\n    out <- list(t0 = t0,t = t, R = R, data = tseries, seed = seed,\n                statistic = stat, sim = sim, n.sim = n.sim, call = call)\n    if (sim ==  \"scramble\")\n        out <- c(out, list(norm = norm))\n    else if (sim == \"model\")\n        out <- c(out, list(ran.gen = ran.gen, ran.args = ran.args))\n    else {\n        out <- c(out, list(l = l, endcorr = endcorr))\n        if (!is.null(call$ran.gen))\n            out <- c(out,list(ran.gen = ran.gen, ran.args = ran.args))\n    }\n    class(out) <- \"boot\"\n    out\n}\n","markers":{"markers":{"1":{"id":1,"range":[[60,46],[60,46]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":20,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"},"655":{"id":655,"range":[[1,36],[1,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"656":{"id":656,"range":[[10,0],[10,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"657":{"id":657,"range":[[15,0],[15,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"658":{"id":658,"range":[[26,4],[26,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"659":{"id":659,"range":[[29,1],[29,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"660":{"id":660,"range":[[30,14],[30,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"661":{"id":661,"range":[[30,47],[30,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"662":{"id":662,"range":[[43,12],[43,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"663":{"id":663,"range":[[44,12],[44,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"664":{"id":664,"range":[[48,20],[48,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"665":{"id":665,"range":[[48,26],[48,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"666":{"id":666,"range":[[48,40],[48,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"667":{"id":667,"range":[[49,26],[49,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"668":{"id":668,"range":[[49,59],[49,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"669":{"id":669,"range":[[57,11],[57,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"670":{"id":670,"range":[[58,36],[58,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"671":{"id":671,"range":[[70,44],[70,62]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"672":{"id":672,"range":[[74,4],[74,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"673":{"id":673,"range":[[86,17],[86,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"674":{"id":674,"range":[[88,31],[88,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"675":{"id":675,"range":[[90,17],[90,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"676":{"id":676,"range":[[96,10],[96,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"677":{"id":677,"range":[[100,4],[100,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"678":{"id":678,"range":[[104,28],[104,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"679":{"id":679,"range":[[107,36],[107,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"680":{"id":680,"range":[[109,40],[109,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"681":{"id":681,"range":[[113,32],[113,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"682":{"id":682,"range":[[114,32],[114,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"683":{"id":683,"range":[[123,24],[123,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"684":{"id":684,"range":[[123,32],[123,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"685":{"id":685,"range":[[133,61],[133,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"686":{"id":686,"range":[[139,12],[139,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"687":{"id":687,"range":[[150,4],[150,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"688":{"id":688,"range":[[151,4],[151,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"689":{"id":689,"range":[[153,23],[153,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"690":{"id":690,"range":[[160,12],[160,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"691":{"id":691,"range":[[164,17],[164,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"692":{"id":692,"range":[[168,53],[168,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"693":{"id":693,"range":[[170,48],[170,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"694":{"id":694,"range":[[180,44],[180,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"695":{"id":695,"range":[[197,63],[197,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"696":{"id":696,"range":[[198,28],[198,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"697":{"id":697,"range":[[207,11],[207,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"698":{"id":698,"range":[[208,4],[208,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"699":{"id":699,"range":[[210,8],[210,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"700":{"id":700,"range":[[211,12],[211,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"701":{"id":701,"range":[[211,19],[211,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"702":{"id":702,"range":[[211,23],[211,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"703":{"id":703,"range":[[211,35],[211,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"704":{"id":704,"range":[[215,59],[215,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"705":{"id":705,"range":[[216,15],[216,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"706":{"id":706,"range":[[231,48],[231,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"707":{"id":707,"range":[[269,47],[269,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"708":{"id":708,"range":[[276,15],[276,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"709":{"id":709,"range":[[285,12],[285,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"710":{"id":710,"range":[[287,16],[287,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"711":{"id":711,"range":[[288,23],[288,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"712":{"id":712,"range":[[292,47],[292,55]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"713":{"id":713,"range":[[293,6],[293,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"714":{"id":714,"range":[[314,25],[314,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"715":{"id":715,"range":[[338,25],[338,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"716":{"id":716,"range":[[342,8],[342,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"717":{"id":717,"range":[[343,23],[343,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"718":{"id":718,"range":[[344,29],[344,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"719":{"id":719,"range":[[345,8],[345,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"720":{"id":720,"range":[[349,8],[349,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"721":{"id":721,"range":[[353,8],[353,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"722":{"id":722,"range":[[354,8],[354,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"723":{"id":723,"range":[[359,8],[359,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"724":{"id":724,"range":[[360,8],[360,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"725":{"id":725,"range":[[396,37],[396,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"726":{"id":726,"range":[[400,29],[400,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"727":{"id":727,"range":[[401,4],[401,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"728":{"id":728,"range":[[467,8],[467,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"729":{"id":729,"range":[[476,48],[476,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"730":{"id":730,"range":[[573,8],[573,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"731":{"id":731,"range":[[578,16],[578,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"732":{"id":732,"range":[[588,0],[588,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"733":{"id":733,"range":[[609,30],[609,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"734":{"id":734,"range":[[614,4],[614,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"735":{"id":735,"range":[[618,12],[618,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"736":{"id":736,"range":[[619,18],[619,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"737":{"id":737,"range":[[634,34],[634,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"738":{"id":738,"range":[[635,28],[635,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"739":{"id":739,"range":[[635,35],[635,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"740":{"id":740,"range":[[646,35],[646,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"741":{"id":741,"range":[[647,4],[647,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"742":{"id":742,"range":[[651,12],[651,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"743":{"id":743,"range":[[691,12],[691,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"744":{"id":744,"range":[[707,12],[707,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"745":{"id":745,"range":[[709,23],[709,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"746":{"id":746,"range":[[729,4],[729,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"747":{"id":747,"range":[[732,12],[732,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"748":{"id":748,"range":[[733,13],[733,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"749":{"id":749,"range":[[737,8],[737,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"750":{"id":750,"range":[[741,4],[741,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"751":{"id":751,"range":[[745,37],[745,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"752":{"id":752,"range":[[745,44],[745,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"753":{"id":753,"range":[[745,62],[745,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"754":{"id":754,"range":[[745,69],[745,74]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"755":{"id":755,"range":[[746,9],[746,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"756":{"id":756,"range":[[746,16],[746,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"757":{"id":757,"range":[[748,54],[748,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"758":{"id":758,"range":[[755,19],[755,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"759":{"id":759,"range":[[757,19],[757,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"760":{"id":760,"range":[[759,19],[759,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"761":{"id":761,"range":[[761,19],[761,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"762":{"id":762,"range":[[763,19],[763,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"763":{"id":763,"range":[[775,4],[775,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"764":{"id":764,"range":[[782,12],[782,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"765":{"id":765,"range":[[783,21],[783,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"766":{"id":766,"range":[[797,4],[797,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"767":{"id":767,"range":[[809,25],[809,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"768":{"id":768,"range":[[812,41],[812,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"769":{"id":769,"range":[[832,5],[832,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"770":{"id":770,"range":[[833,4],[833,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"771":{"id":771,"range":[[862,20],[862,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"772":{"id":772,"range":[[863,6],[863,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"773":{"id":773,"range":[[866,35],[866,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"774":{"id":774,"range":[[920,52],[920,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"775":{"id":775,"range":[[927,52],[927,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"776":{"id":776,"range":[[930,54],[930,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"777":{"id":777,"range":[[946,28],[946,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"778":{"id":778,"range":[[952,4],[952,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"779":{"id":779,"range":[[953,4],[953,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"780":{"id":780,"range":[[961,4],[961,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"781":{"id":781,"range":[[962,4],[962,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"782":{"id":782,"range":[[962,13],[962,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"783":{"id":783,"range":[[962,29],[962,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"784":{"id":784,"range":[[964,8],[964,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"785":{"id":785,"range":[[966,8],[966,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"786":{"id":786,"range":[[967,8],[967,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"787":{"id":787,"range":[[969,8],[969,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"788":{"id":788,"range":[[969,33],[969,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"789":{"id":789,"range":[[970,8],[970,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"790":{"id":790,"range":[[972,8],[972,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"791":{"id":791,"range":[[975,8],[975,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"792":{"id":792,"range":[[975,36],[975,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"793":{"id":793,"range":[[976,8],[976,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"794":{"id":794,"range":[[987,8],[987,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"795":{"id":795,"range":[[988,8],[988,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"796":{"id":796,"range":[[1046,27],[1046,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"797":{"id":797,"range":[[1048,22],[1048,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"798":{"id":798,"range":[[1058,27],[1058,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"799":{"id":799,"range":[[1060,22],[1060,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"800":{"id":800,"range":[[1067,52],[1067,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"801":{"id":801,"range":[[1068,13],[1068,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"802":{"id":802,"range":[[1099,4],[1099,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"803":{"id":803,"range":[[1109,22],[1109,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"804":{"id":804,"range":[[1118,4],[1118,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"805":{"id":805,"range":[[1119,11],[1119,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"806":{"id":806,"range":[[1120,4],[1120,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"807":{"id":807,"range":[[1121,4],[1121,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"808":{"id":808,"range":[[1123,23],[1123,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"809":{"id":809,"range":[[1123,38],[1123,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"810":{"id":810,"range":[[1123,46],[1123,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"811":{"id":811,"range":[[1124,19],[1124,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"812":{"id":812,"range":[[1125,19],[1125,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"813":{"id":813,"range":[[1127,12],[1127,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"814":{"id":814,"range":[[1131,4],[1131,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"815":{"id":815,"range":[[1131,10],[1131,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"816":{"id":816,"range":[[1132,11],[1132,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"817":{"id":817,"range":[[1133,17],[1133,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"818":{"id":818,"range":[[1137,28],[1137,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"819":{"id":819,"range":[[1137,41],[1137,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"820":{"id":820,"range":[[1142,4],[1142,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"821":{"id":821,"range":[[1146,29],[1146,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"822":{"id":822,"range":[[1148,3],[1148,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"823":{"id":823,"range":[[1152,39],[1152,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"824":{"id":824,"range":[[1156,8],[1156,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"825":{"id":825,"range":[[1162,0],[1162,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"826":{"id":826,"range":[[1162,23],[1162,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"827":{"id":827,"range":[[1162,36],[1162,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"828":{"id":828,"range":[[1168,4],[1168,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"829":{"id":829,"range":[[1172,0],[1172,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"830":{"id":830,"range":[[1174,32],[1174,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"831":{"id":831,"range":[[1174,54],[1174,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"832":{"id":832,"range":[[1179,18],[1179,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"833":{"id":833,"range":[[1193,4],[1193,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"834":{"id":834,"range":[[1198,4],[1198,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"835":{"id":835,"range":[[1199,4],[1199,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"836":{"id":836,"range":[[1205,67],[1205,71]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"837":{"id":837,"range":[[1221,8],[1221,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"838":{"id":838,"range":[[1222,12],[1222,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"839":{"id":839,"range":[[1242,4],[1242,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"840":{"id":840,"range":[[1243,4],[1243,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"841":{"id":841,"range":[[1244,4],[1244,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"842":{"id":842,"range":[[1245,4],[1245,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"843":{"id":843,"range":[[1251,4],[1251,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"844":{"id":844,"range":[[1253,4],[1253,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"845":{"id":845,"range":[[1254,4],[1254,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"846":{"id":846,"range":[[1267,0],[1267,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"847":{"id":847,"range":[[1271,13],[1271,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"848":{"id":848,"range":[[1278,4],[1278,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"849":{"id":849,"range":[[1287,28],[1287,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"850":{"id":850,"range":[[1290,36],[1290,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"851":{"id":851,"range":[[1292,32],[1292,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"852":{"id":852,"range":[[1293,32],[1293,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"853":{"id":853,"range":[[1344,4],[1344,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"854":{"id":854,"range":[[1345,8],[1345,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"855":{"id":855,"range":[[1362,8],[1362,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"856":{"id":856,"range":[[1365,33],[1365,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"857":{"id":857,"range":[[1374,43],[1374,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"858":{"id":858,"range":[[1412,22],[1412,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"859":{"id":859,"range":[[1412,32],[1412,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"860":{"id":860,"range":[[1414,8],[1414,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"861":{"id":861,"range":[[1415,8],[1415,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"862":{"id":862,"range":[[1416,14],[1416,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"863":{"id":863,"range":[[1422,29],[1422,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"864":{"id":864,"range":[[1426,47],[1426,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"865":{"id":865,"range":[[1430,3],[1430,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"866":{"id":866,"range":[[1431,41],[1431,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"867":{"id":867,"range":[[1436,8],[1436,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"868":{"id":868,"range":[[1439,8],[1439,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"869":{"id":869,"range":[[1474,15],[1474,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"870":{"id":870,"range":[[1475,15],[1475,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"871":{"id":871,"range":[[1481,36],[1481,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"872":{"id":872,"range":[[1485,28],[1485,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"873":{"id":873,"range":[[1488,30],[1488,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"874":{"id":874,"range":[[1489,26],[1489,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"875":{"id":875,"range":[[1495,8],[1495,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"876":{"id":876,"range":[[1498,28],[1498,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"877":{"id":877,"range":[[1500,24],[1500,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"878":{"id":878,"range":[[1501,26],[1501,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"879":{"id":879,"range":[[1512,28],[1512,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"880":{"id":880,"range":[[1515,26],[1515,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"881":{"id":881,"range":[[1516,26],[1516,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"882":{"id":882,"range":[[1522,8],[1522,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"883":{"id":883,"range":[[1523,49],[1523,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"884":{"id":884,"range":[[1525,28],[1525,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"885":{"id":885,"range":[[1525,34],[1525,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"886":{"id":886,"range":[[1531,26],[1531,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"887":{"id":887,"range":[[1532,26],[1532,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"888":{"id":888,"range":[[1538,8],[1538,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"889":{"id":889,"range":[[1543,16],[1543,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"890":{"id":890,"range":[[1543,23],[1543,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"891":{"id":891,"range":[[1552,4],[1552,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"892":{"id":892,"range":[[1553,4],[1553,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"893":{"id":893,"range":[[1554,23],[1554,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"894":{"id":894,"range":[[1555,4],[1555,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"895":{"id":895,"range":[[1556,4],[1556,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"896":{"id":896,"range":[[1557,23],[1557,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"897":{"id":897,"range":[[1562,8],[1562,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"898":{"id":898,"range":[[1563,8],[1563,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"899":{"id":899,"range":[[1563,16],[1563,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"900":{"id":900,"range":[[1566,8],[1566,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"901":{"id":901,"range":[[1566,18],[1566,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"902":{"id":902,"range":[[1571,8],[1571,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"903":{"id":903,"range":[[1572,8],[1572,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"904":{"id":904,"range":[[1572,16],[1572,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"905":{"id":905,"range":[[1574,35],[1574,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"906":{"id":906,"range":[[1575,8],[1575,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"907":{"id":907,"range":[[1575,18],[1575,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"908":{"id":908,"range":[[1577,4],[1577,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"909":{"id":909,"range":[[1582,8],[1582,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"910":{"id":910,"range":[[1583,8],[1583,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"911":{"id":911,"range":[[1583,28],[1583,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"912":{"id":912,"range":[[1583,52],[1583,55]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"913":{"id":913,"range":[[1584,8],[1584,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"914":{"id":914,"range":[[1584,43],[1584,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"915":{"id":915,"range":[[1584,53],[1584,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"916":{"id":916,"range":[[1584,63],[1584,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"917":{"id":917,"range":[[1585,11],[1585,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"918":{"id":918,"range":[[1585,20],[1585,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"919":{"id":919,"range":[[1585,25],[1585,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"920":{"id":920,"range":[[1590,0],[1590,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"921":{"id":921,"range":[[1591,32],[1591,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"922":{"id":922,"range":[[1609,12],[1609,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"923":{"id":923,"range":[[1619,28],[1619,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"924":{"id":924,"range":[[1652,13],[1652,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"925":{"id":925,"range":[[1660,41],[1660,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"926":{"id":926,"range":[[1668,44],[1668,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"927":{"id":927,"range":[[1685,4],[1685,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"928":{"id":928,"range":[[1696,0],[1696,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"929":{"id":929,"range":[[1711,4],[1711,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"930":{"id":930,"range":[[1716,4],[1716,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"931":{"id":931,"range":[[1720,6],[1720,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"932":{"id":932,"range":[[1725,35],[1725,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"933":{"id":933,"range":[[1737,8],[1737,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"934":{"id":934,"range":[[1741,12],[1741,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"935":{"id":935,"range":[[1742,15],[1742,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"936":{"id":936,"range":[[1742,25],[1742,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"937":{"id":937,"range":[[1742,36],[1742,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"938":{"id":938,"range":[[1747,8],[1747,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"939":{"id":939,"range":[[1751,12],[1751,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"940":{"id":940,"range":[[1756,8],[1756,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"941":{"id":941,"range":[[1759,12],[1759,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"942":{"id":942,"range":[[1766,38],[1766,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"943":{"id":943,"range":[[1779,8],[1779,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"944":{"id":944,"range":[[1784,12],[1784,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"945":{"id":945,"range":[[1785,15],[1785,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"946":{"id":946,"range":[[1785,25],[1785,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"947":{"id":947,"range":[[1785,36],[1785,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"948":{"id":948,"range":[[1790,8],[1790,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"949":{"id":949,"range":[[1794,12],[1794,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"950":{"id":950,"range":[[1799,8],[1799,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"951":{"id":951,"range":[[1802,12],[1802,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"952":{"id":952,"range":[[1814,15],[1814,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"953":{"id":953,"range":[[1850,24],[1850,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"954":{"id":954,"range":[[1858,4],[1858,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"955":{"id":955,"range":[[1863,8],[1863,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"956":{"id":956,"range":[[1864,36],[1864,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"957":{"id":957,"range":[[1866,4],[1866,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"958":{"id":958,"range":[[1874,4],[1874,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"959":{"id":959,"range":[[1881,4],[1881,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"960":{"id":960,"range":[[1893,27],[1893,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"961":{"id":961,"range":[[1895,31],[1895,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"962":{"id":962,"range":[[1902,26],[1902,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"963":{"id":963,"range":[[1908,0],[1908,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"964":{"id":964,"range":[[1917,4],[1917,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"965":{"id":965,"range":[[1922,7],[1922,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"966":{"id":966,"range":[[1924,7],[1924,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"967":{"id":967,"range":[[1932,4],[1932,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"968":{"id":968,"range":[[1936,29],[1936,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"969":{"id":969,"range":[[1936,34],[1936,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"970":{"id":970,"range":[[1936,58],[1936,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"971":{"id":971,"range":[[1940,0],[1940,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"972":{"id":972,"range":[[1941,21],[1941,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"973":{"id":973,"range":[[1941,31],[1941,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"974":{"id":974,"range":[[1946,8],[1946,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"975":{"id":975,"range":[[1946,19],[1946,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"976":{"id":976,"range":[[1963,26],[1963,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"977":{"id":977,"range":[[1963,53],[1963,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"978":{"id":978,"range":[[1970,17],[1970,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"979":{"id":979,"range":[[1971,9],[1971,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"980":{"id":980,"range":[[1972,17],[1972,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"981":{"id":981,"range":[[1977,4],[1977,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"982":{"id":982,"range":[[1978,27],[1978,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"983":{"id":983,"range":[[1978,45],[1978,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"984":{"id":984,"range":[[1979,4],[1979,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"985":{"id":985,"range":[[1985,66],[1985,69]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"986":{"id":986,"range":[[1986,15],[1986,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"987":{"id":987,"range":[[1986,33],[1986,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"988":{"id":988,"range":[[1986,57],[1986,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"989":{"id":989,"range":[[1991,31],[1991,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"990":{"id":990,"range":[[1991,46],[1991,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"991":{"id":991,"range":[[1992,66],[1992,69]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"992":{"id":992,"range":[[1994,4],[1994,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"993":{"id":993,"range":[[2001,40],[2001,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"994":{"id":994,"range":[[2017,32],[2017,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"995":{"id":995,"range":[[2023,13],[2023,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"996":{"id":996,"range":[[2026,0],[2026,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"997":{"id":997,"range":[[2039,8],[2039,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"998":{"id":998,"range":[[2049,8],[2049,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"999":{"id":999,"range":[[2070,12],[2070,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1000":{"id":1000,"range":[[1,36],[1,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1001":{"id":1001,"range":[[10,0],[10,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1002":{"id":1002,"range":[[15,0],[15,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1003":{"id":1003,"range":[[26,4],[26,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1004":{"id":1004,"range":[[29,1],[29,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1005":{"id":1005,"range":[[30,14],[30,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1006":{"id":1006,"range":[[30,47],[30,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1007":{"id":1007,"range":[[43,12],[43,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1008":{"id":1008,"range":[[44,12],[44,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1009":{"id":1009,"range":[[48,20],[48,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1010":{"id":1010,"range":[[48,26],[48,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1011":{"id":1011,"range":[[48,40],[48,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1012":{"id":1012,"range":[[49,26],[49,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1013":{"id":1013,"range":[[49,59],[49,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1014":{"id":1014,"range":[[57,11],[57,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1015":{"id":1015,"range":[[58,36],[58,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1016":{"id":1016,"range":[[70,44],[70,62]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1017":{"id":1017,"range":[[74,4],[74,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1018":{"id":1018,"range":[[86,17],[86,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1019":{"id":1019,"range":[[88,31],[88,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1020":{"id":1020,"range":[[90,17],[90,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1021":{"id":1021,"range":[[96,10],[96,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1022":{"id":1022,"range":[[100,4],[100,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1023":{"id":1023,"range":[[104,28],[104,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1024":{"id":1024,"range":[[107,36],[107,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1025":{"id":1025,"range":[[109,40],[109,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1026":{"id":1026,"range":[[113,32],[113,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1027":{"id":1027,"range":[[114,32],[114,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1028":{"id":1028,"range":[[123,24],[123,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1029":{"id":1029,"range":[[123,32],[123,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1030":{"id":1030,"range":[[133,61],[133,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1031":{"id":1031,"range":[[139,12],[139,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1032":{"id":1032,"range":[[150,4],[150,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1033":{"id":1033,"range":[[151,4],[151,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1034":{"id":1034,"range":[[153,23],[153,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1035":{"id":1035,"range":[[160,12],[160,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1036":{"id":1036,"range":[[164,17],[164,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1037":{"id":1037,"range":[[168,53],[168,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1038":{"id":1038,"range":[[170,48],[170,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1039":{"id":1039,"range":[[180,44],[180,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1040":{"id":1040,"range":[[197,63],[197,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1041":{"id":1041,"range":[[198,28],[198,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1042":{"id":1042,"range":[[207,11],[207,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1043":{"id":1043,"range":[[208,4],[208,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1044":{"id":1044,"range":[[210,8],[210,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1045":{"id":1045,"range":[[211,12],[211,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1046":{"id":1046,"range":[[211,19],[211,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1047":{"id":1047,"range":[[211,23],[211,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1048":{"id":1048,"range":[[211,35],[211,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1049":{"id":1049,"range":[[215,59],[215,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1050":{"id":1050,"range":[[216,15],[216,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1051":{"id":1051,"range":[[231,48],[231,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1052":{"id":1052,"range":[[269,47],[269,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1053":{"id":1053,"range":[[276,15],[276,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1054":{"id":1054,"range":[[285,12],[285,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1055":{"id":1055,"range":[[287,16],[287,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1056":{"id":1056,"range":[[288,23],[288,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1057":{"id":1057,"range":[[292,47],[292,55]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1058":{"id":1058,"range":[[293,6],[293,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1059":{"id":1059,"range":[[314,25],[314,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1060":{"id":1060,"range":[[338,25],[338,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1061":{"id":1061,"range":[[342,8],[342,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1062":{"id":1062,"range":[[343,23],[343,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1063":{"id":1063,"range":[[344,29],[344,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1064":{"id":1064,"range":[[345,8],[345,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1065":{"id":1065,"range":[[349,8],[349,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1066":{"id":1066,"range":[[353,8],[353,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1067":{"id":1067,"range":[[354,8],[354,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1068":{"id":1068,"range":[[359,8],[359,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1069":{"id":1069,"range":[[360,8],[360,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1070":{"id":1070,"range":[[396,37],[396,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1071":{"id":1071,"range":[[400,29],[400,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1072":{"id":1072,"range":[[401,4],[401,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1073":{"id":1073,"range":[[467,8],[467,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1074":{"id":1074,"range":[[476,48],[476,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1075":{"id":1075,"range":[[573,8],[573,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1076":{"id":1076,"range":[[578,16],[578,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1077":{"id":1077,"range":[[588,0],[588,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1078":{"id":1078,"range":[[609,30],[609,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1079":{"id":1079,"range":[[614,4],[614,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1080":{"id":1080,"range":[[618,12],[618,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1081":{"id":1081,"range":[[619,18],[619,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1082":{"id":1082,"range":[[634,34],[634,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1083":{"id":1083,"range":[[635,28],[635,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1084":{"id":1084,"range":[[635,35],[635,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1085":{"id":1085,"range":[[646,35],[646,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1086":{"id":1086,"range":[[647,4],[647,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1087":{"id":1087,"range":[[651,12],[651,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1088":{"id":1088,"range":[[691,12],[691,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1089":{"id":1089,"range":[[707,12],[707,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1090":{"id":1090,"range":[[709,23],[709,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1091":{"id":1091,"range":[[729,4],[729,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1092":{"id":1092,"range":[[732,12],[732,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1093":{"id":1093,"range":[[733,13],[733,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1094":{"id":1094,"range":[[737,8],[737,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1095":{"id":1095,"range":[[741,4],[741,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1096":{"id":1096,"range":[[745,37],[745,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1097":{"id":1097,"range":[[745,44],[745,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1098":{"id":1098,"range":[[745,62],[745,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1099":{"id":1099,"range":[[745,69],[745,74]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1100":{"id":1100,"range":[[746,9],[746,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1101":{"id":1101,"range":[[746,16],[746,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1102":{"id":1102,"range":[[748,54],[748,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1103":{"id":1103,"range":[[755,19],[755,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1104":{"id":1104,"range":[[757,19],[757,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1105":{"id":1105,"range":[[759,19],[759,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1106":{"id":1106,"range":[[761,19],[761,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1107":{"id":1107,"range":[[763,19],[763,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1108":{"id":1108,"range":[[775,4],[775,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1109":{"id":1109,"range":[[782,12],[782,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1110":{"id":1110,"range":[[783,21],[783,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1111":{"id":1111,"range":[[797,4],[797,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1112":{"id":1112,"range":[[809,25],[809,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1113":{"id":1113,"range":[[812,41],[812,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1114":{"id":1114,"range":[[832,5],[832,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1115":{"id":1115,"range":[[833,4],[833,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1116":{"id":1116,"range":[[862,20],[862,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1117":{"id":1117,"range":[[863,6],[863,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1118":{"id":1118,"range":[[866,35],[866,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1119":{"id":1119,"range":[[920,52],[920,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1120":{"id":1120,"range":[[927,52],[927,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1121":{"id":1121,"range":[[930,54],[930,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1122":{"id":1122,"range":[[946,28],[946,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1123":{"id":1123,"range":[[952,4],[952,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1124":{"id":1124,"range":[[953,4],[953,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1125":{"id":1125,"range":[[961,4],[961,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1126":{"id":1126,"range":[[962,4],[962,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1127":{"id":1127,"range":[[962,13],[962,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1128":{"id":1128,"range":[[962,29],[962,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1129":{"id":1129,"range":[[964,8],[964,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1130":{"id":1130,"range":[[966,8],[966,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1131":{"id":1131,"range":[[967,8],[967,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1132":{"id":1132,"range":[[969,8],[969,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1133":{"id":1133,"range":[[969,33],[969,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1134":{"id":1134,"range":[[970,8],[970,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1135":{"id":1135,"range":[[972,8],[972,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1136":{"id":1136,"range":[[975,8],[975,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1137":{"id":1137,"range":[[975,36],[975,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1138":{"id":1138,"range":[[976,8],[976,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1139":{"id":1139,"range":[[987,8],[987,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1140":{"id":1140,"range":[[988,8],[988,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1141":{"id":1141,"range":[[1046,27],[1046,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1142":{"id":1142,"range":[[1048,22],[1048,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1143":{"id":1143,"range":[[1058,27],[1058,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1144":{"id":1144,"range":[[1060,22],[1060,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1145":{"id":1145,"range":[[1067,52],[1067,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1146":{"id":1146,"range":[[1068,13],[1068,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1147":{"id":1147,"range":[[1099,4],[1099,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1148":{"id":1148,"range":[[1109,22],[1109,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1149":{"id":1149,"range":[[1118,4],[1118,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1150":{"id":1150,"range":[[1119,11],[1119,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1151":{"id":1151,"range":[[1120,4],[1120,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1152":{"id":1152,"range":[[1121,4],[1121,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1153":{"id":1153,"range":[[1123,23],[1123,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1154":{"id":1154,"range":[[1123,38],[1123,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1155":{"id":1155,"range":[[1123,46],[1123,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1156":{"id":1156,"range":[[1124,19],[1124,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1157":{"id":1157,"range":[[1125,19],[1125,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1158":{"id":1158,"range":[[1127,12],[1127,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1159":{"id":1159,"range":[[1131,4],[1131,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1160":{"id":1160,"range":[[1131,10],[1131,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1161":{"id":1161,"range":[[1132,11],[1132,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1162":{"id":1162,"range":[[1133,17],[1133,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1163":{"id":1163,"range":[[1137,28],[1137,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1164":{"id":1164,"range":[[1137,41],[1137,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1165":{"id":1165,"range":[[1142,4],[1142,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1166":{"id":1166,"range":[[1146,29],[1146,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1167":{"id":1167,"range":[[1148,3],[1148,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1168":{"id":1168,"range":[[1152,39],[1152,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1169":{"id":1169,"range":[[1156,8],[1156,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1170":{"id":1170,"range":[[1162,0],[1162,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1171":{"id":1171,"range":[[1162,23],[1162,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1172":{"id":1172,"range":[[1162,36],[1162,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1173":{"id":1173,"range":[[1168,4],[1168,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1174":{"id":1174,"range":[[1172,0],[1172,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1175":{"id":1175,"range":[[1174,32],[1174,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1176":{"id":1176,"range":[[1174,54],[1174,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1177":{"id":1177,"range":[[1179,18],[1179,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1178":{"id":1178,"range":[[1193,4],[1193,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1179":{"id":1179,"range":[[1198,4],[1198,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1180":{"id":1180,"range":[[1199,4],[1199,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1181":{"id":1181,"range":[[1205,67],[1205,71]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1182":{"id":1182,"range":[[1221,8],[1221,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1183":{"id":1183,"range":[[1222,12],[1222,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1184":{"id":1184,"range":[[1242,4],[1242,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1185":{"id":1185,"range":[[1243,4],[1243,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1186":{"id":1186,"range":[[1244,4],[1244,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1187":{"id":1187,"range":[[1245,4],[1245,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1188":{"id":1188,"range":[[1251,4],[1251,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1189":{"id":1189,"range":[[1253,4],[1253,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1190":{"id":1190,"range":[[1254,4],[1254,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1191":{"id":1191,"range":[[1267,0],[1267,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1192":{"id":1192,"range":[[1271,13],[1271,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1193":{"id":1193,"range":[[1278,4],[1278,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1194":{"id":1194,"range":[[1287,28],[1287,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1195":{"id":1195,"range":[[1290,36],[1290,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1196":{"id":1196,"range":[[1292,32],[1292,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1197":{"id":1197,"range":[[1293,32],[1293,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1198":{"id":1198,"range":[[1344,4],[1344,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1199":{"id":1199,"range":[[1345,8],[1345,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1200":{"id":1200,"range":[[1362,8],[1362,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1201":{"id":1201,"range":[[1365,33],[1365,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1202":{"id":1202,"range":[[1374,43],[1374,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1203":{"id":1203,"range":[[1412,22],[1412,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1204":{"id":1204,"range":[[1412,32],[1412,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1205":{"id":1205,"range":[[1414,8],[1414,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1206":{"id":1206,"range":[[1415,8],[1415,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1207":{"id":1207,"range":[[1416,14],[1416,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1208":{"id":1208,"range":[[1422,29],[1422,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1209":{"id":1209,"range":[[1426,47],[1426,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1210":{"id":1210,"range":[[1430,3],[1430,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1211":{"id":1211,"range":[[1431,41],[1431,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1212":{"id":1212,"range":[[1436,8],[1436,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1213":{"id":1213,"range":[[1439,8],[1439,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1214":{"id":1214,"range":[[1474,15],[1474,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1215":{"id":1215,"range":[[1475,15],[1475,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1216":{"id":1216,"range":[[1481,36],[1481,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1217":{"id":1217,"range":[[1485,28],[1485,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1218":{"id":1218,"range":[[1488,30],[1488,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1219":{"id":1219,"range":[[1489,26],[1489,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1220":{"id":1220,"range":[[1495,8],[1495,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1221":{"id":1221,"range":[[1498,28],[1498,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1222":{"id":1222,"range":[[1500,24],[1500,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1223":{"id":1223,"range":[[1501,26],[1501,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1224":{"id":1224,"range":[[1512,28],[1512,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1225":{"id":1225,"range":[[1515,26],[1515,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1226":{"id":1226,"range":[[1516,26],[1516,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1227":{"id":1227,"range":[[1522,8],[1522,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1228":{"id":1228,"range":[[1523,49],[1523,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1229":{"id":1229,"range":[[1525,28],[1525,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1230":{"id":1230,"range":[[1525,34],[1525,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1231":{"id":1231,"range":[[1531,26],[1531,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1232":{"id":1232,"range":[[1532,26],[1532,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1233":{"id":1233,"range":[[1538,8],[1538,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1234":{"id":1234,"range":[[1543,16],[1543,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1235":{"id":1235,"range":[[1543,23],[1543,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1236":{"id":1236,"range":[[1552,4],[1552,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1237":{"id":1237,"range":[[1553,4],[1553,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1238":{"id":1238,"range":[[1554,23],[1554,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1239":{"id":1239,"range":[[1555,4],[1555,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1240":{"id":1240,"range":[[1556,4],[1556,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1241":{"id":1241,"range":[[1557,23],[1557,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1242":{"id":1242,"range":[[1562,8],[1562,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1243":{"id":1243,"range":[[1563,8],[1563,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1244":{"id":1244,"range":[[1563,16],[1563,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1245":{"id":1245,"range":[[1566,8],[1566,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1246":{"id":1246,"range":[[1566,18],[1566,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1247":{"id":1247,"range":[[1571,8],[1571,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1248":{"id":1248,"range":[[1572,8],[1572,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1249":{"id":1249,"range":[[1572,16],[1572,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1250":{"id":1250,"range":[[1574,35],[1574,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1251":{"id":1251,"range":[[1575,8],[1575,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1252":{"id":1252,"range":[[1575,18],[1575,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1253":{"id":1253,"range":[[1577,4],[1577,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1254":{"id":1254,"range":[[1582,8],[1582,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1255":{"id":1255,"range":[[1583,8],[1583,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1256":{"id":1256,"range":[[1583,28],[1583,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1257":{"id":1257,"range":[[1583,52],[1583,55]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1258":{"id":1258,"range":[[1584,8],[1584,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1259":{"id":1259,"range":[[1584,43],[1584,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1260":{"id":1260,"range":[[1584,53],[1584,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1261":{"id":1261,"range":[[1584,63],[1584,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1262":{"id":1262,"range":[[1585,11],[1585,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1263":{"id":1263,"range":[[1585,20],[1585,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1264":{"id":1264,"range":[[1585,25],[1585,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1265":{"id":1265,"range":[[1590,0],[1590,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1266":{"id":1266,"range":[[1591,32],[1591,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1267":{"id":1267,"range":[[1609,12],[1609,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1268":{"id":1268,"range":[[1619,28],[1619,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1269":{"id":1269,"range":[[1652,13],[1652,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1270":{"id":1270,"range":[[1660,41],[1660,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1271":{"id":1271,"range":[[1668,44],[1668,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1272":{"id":1272,"range":[[1685,4],[1685,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1273":{"id":1273,"range":[[1696,0],[1696,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1274":{"id":1274,"range":[[1711,4],[1711,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1275":{"id":1275,"range":[[1716,4],[1716,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1276":{"id":1276,"range":[[1720,6],[1720,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1277":{"id":1277,"range":[[1725,35],[1725,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1278":{"id":1278,"range":[[1737,8],[1737,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1279":{"id":1279,"range":[[1741,12],[1741,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1280":{"id":1280,"range":[[1742,15],[1742,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1281":{"id":1281,"range":[[1742,25],[1742,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1282":{"id":1282,"range":[[1742,36],[1742,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1283":{"id":1283,"range":[[1747,8],[1747,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1284":{"id":1284,"range":[[1751,12],[1751,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1285":{"id":1285,"range":[[1756,8],[1756,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1286":{"id":1286,"range":[[1759,12],[1759,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1287":{"id":1287,"range":[[1766,38],[1766,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1288":{"id":1288,"range":[[1779,8],[1779,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1289":{"id":1289,"range":[[1784,12],[1784,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1290":{"id":1290,"range":[[1785,15],[1785,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1291":{"id":1291,"range":[[1785,25],[1785,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1292":{"id":1292,"range":[[1785,36],[1785,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1293":{"id":1293,"range":[[1790,8],[1790,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1294":{"id":1294,"range":[[1794,12],[1794,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1295":{"id":1295,"range":[[1799,8],[1799,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1296":{"id":1296,"range":[[1802,12],[1802,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1297":{"id":1297,"range":[[1814,15],[1814,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1298":{"id":1298,"range":[[1850,24],[1850,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1299":{"id":1299,"range":[[1858,4],[1858,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1300":{"id":1300,"range":[[1863,8],[1863,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1301":{"id":1301,"range":[[1864,36],[1864,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1302":{"id":1302,"range":[[1866,4],[1866,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1303":{"id":1303,"range":[[1874,4],[1874,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1304":{"id":1304,"range":[[1881,4],[1881,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1305":{"id":1305,"range":[[1893,27],[1893,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1306":{"id":1306,"range":[[1895,31],[1895,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1307":{"id":1307,"range":[[1902,26],[1902,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1308":{"id":1308,"range":[[1908,0],[1908,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1309":{"id":1309,"range":[[1917,4],[1917,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1310":{"id":1310,"range":[[1922,7],[1922,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1311":{"id":1311,"range":[[1924,7],[1924,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1312":{"id":1312,"range":[[1932,4],[1932,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1313":{"id":1313,"range":[[1936,29],[1936,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1314":{"id":1314,"range":[[1936,34],[1936,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1315":{"id":1315,"range":[[1936,58],[1936,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1316":{"id":1316,"range":[[1940,0],[1940,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1317":{"id":1317,"range":[[1941,21],[1941,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1318":{"id":1318,"range":[[1941,31],[1941,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1319":{"id":1319,"range":[[1946,8],[1946,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1320":{"id":1320,"range":[[1946,19],[1946,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1321":{"id":1321,"range":[[1963,26],[1963,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1322":{"id":1322,"range":[[1963,53],[1963,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1323":{"id":1323,"range":[[1970,17],[1970,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1324":{"id":1324,"range":[[1971,9],[1971,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1325":{"id":1325,"range":[[1972,17],[1972,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1326":{"id":1326,"range":[[1977,4],[1977,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1327":{"id":1327,"range":[[1978,27],[1978,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1328":{"id":1328,"range":[[1978,45],[1978,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1329":{"id":1329,"range":[[1979,4],[1979,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1330":{"id":1330,"range":[[1985,66],[1985,69]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1331":{"id":1331,"range":[[1986,15],[1986,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1332":{"id":1332,"range":[[1986,33],[1986,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1333":{"id":1333,"range":[[1986,57],[1986,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1334":{"id":1334,"range":[[1991,31],[1991,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1335":{"id":1335,"range":[[1991,46],[1991,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1336":{"id":1336,"range":[[1992,66],[1992,69]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1337":{"id":1337,"range":[[1994,4],[1994,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1338":{"id":1338,"range":[[2001,40],[2001,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1339":{"id":1339,"range":[[2017,32],[2017,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1340":{"id":1340,"range":[[2023,13],[2023,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1341":{"id":1341,"range":[[2026,0],[2026,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1342":{"id":1342,"range":[[2039,8],[2039,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1343":{"id":1343,"range":[[2049,8],[2049,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1344":{"id":1344,"range":[[2070,12],[2070,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1345":{"id":1345,"range":[[2078,4],[2078,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1346":{"id":1346,"range":[[2081,13],[2081,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1347":{"id":1347,"range":[[2103,5],[2103,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1348":{"id":1348,"range":[[2109,4],[2109,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1349":{"id":1349,"range":[[2111,4],[2111,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1350":{"id":1350,"range":[[2115,4],[2115,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1351":{"id":1351,"range":[[2117,8],[2117,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1352":{"id":1352,"range":[[2118,8],[2118,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1353":{"id":1353,"range":[[2118,25],[2118,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1354":{"id":1354,"range":[[2118,42],[2118,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1355":{"id":1355,"range":[[2121,27],[2121,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1356":{"id":1356,"range":[[2124,24],[2124,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1357":{"id":1357,"range":[[2293,4],[2293,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1358":{"id":1358,"range":[[2296,8],[2296,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1359":{"id":1359,"range":[[2297,8],[2297,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1360":{"id":1360,"range":[[2312,66],[2312,74]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1361":{"id":1361,"range":[[2350,26],[2350,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1362":{"id":1362,"range":[[2351,31],[2351,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1363":{"id":1363,"range":[[2352,13],[2352,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1364":{"id":1364,"range":[[2364,14],[2364,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1365":{"id":1365,"range":[[2364,23],[2364,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1366":{"id":1366,"range":[[2365,9],[2365,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1367":{"id":1367,"range":[[2392,21],[2392,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1368":{"id":1368,"range":[[2447,5],[2447,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1369":{"id":1369,"range":[[2447,46],[2447,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1370":{"id":1370,"range":[[2449,12],[2449,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1371":{"id":1371,"range":[[2453,12],[2453,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1372":{"id":1372,"range":[[2458,8],[2458,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1373":{"id":1373,"range":[[2459,17],[2459,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1374":{"id":1374,"range":[[2502,18],[2502,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1375":{"id":1375,"range":[[2503,9],[2503,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1376":{"id":1376,"range":[[2513,7],[2513,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1377":{"id":1377,"range":[[2514,18],[2514,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1378":{"id":1378,"range":[[2514,34],[2514,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1379":{"id":1379,"range":[[2516,11],[2516,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1380":{"id":1380,"range":[[2516,26],[2516,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1381":{"id":1381,"range":[[2516,37],[2516,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1382":{"id":1382,"range":[[2517,11],[2517,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1383":{"id":1383,"range":[[2517,19],[2517,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1384":{"id":1384,"range":[[2518,11],[2518,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1385":{"id":1385,"range":[[2518,19],[2518,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1386":{"id":1386,"range":[[2522,0],[2522,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1387":{"id":1387,"range":[[2651,8],[2651,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1388":{"id":1388,"range":[[2655,23],[2655,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1389":{"id":1389,"range":[[2662,39],[2662,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1390":{"id":1390,"range":[[2666,8],[2666,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1391":{"id":1391,"range":[[2668,11],[2668,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1392":{"id":1392,"range":[[2670,2],[2670,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1393":{"id":1393,"range":[[2670,11],[2670,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1394":{"id":1394,"range":[[2679,8],[2679,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1395":{"id":1395,"range":[[2690,12],[2690,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1396":{"id":1396,"range":[[2695,16],[2695,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1397":{"id":1397,"range":[[2702,22],[2702,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1398":{"id":1398,"range":[[2709,16],[2709,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1399":{"id":1399,"range":[[2717,8],[2717,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1400":{"id":1400,"range":[[2718,8],[2718,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1401":{"id":1401,"range":[[2731,2],[2731,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1402":{"id":1402,"range":[[2732,8],[2732,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1403":{"id":1403,"range":[[2778,33],[2778,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1404":{"id":1404,"range":[[2782,48],[2782,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1405":{"id":1405,"range":[[2783,18],[2783,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1406":{"id":1406,"range":[[2784,3],[2784,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1407":{"id":1407,"range":[[2795,4],[2795,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1408":{"id":1408,"range":[[2809,58],[2809,69]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1409":{"id":1409,"range":[[2812,8],[2812,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1410":{"id":1410,"range":[[2813,8],[2813,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1411":{"id":1411,"range":[[2815,12],[2815,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1412":{"id":1412,"range":[[2818,12],[2818,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1413":{"id":1413,"range":[[2827,13],[2827,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1414":{"id":1414,"range":[[2827,25],[2827,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1415":{"id":1415,"range":[[2830,33],[2830,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1416":{"id":1416,"range":[[2839,12],[2839,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1417":{"id":1417,"range":[[2840,12],[2840,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1418":{"id":1418,"range":[[2843,12],[2843,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1419":{"id":1419,"range":[[2855,12],[2855,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1420":{"id":1420,"range":[[2862,12],[2862,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1421":{"id":1421,"range":[[2863,12],[2863,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1422":{"id":1422,"range":[[2868,16],[2868,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1423":{"id":1423,"range":[[2869,16],[2869,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1424":{"id":1424,"range":[[2869,28],[2869,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1425":{"id":1425,"range":[[2870,25],[2870,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1426":{"id":1426,"range":[[2870,33],[2870,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1427":{"id":1427,"range":[[2871,35],[2871,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1428":{"id":1428,"range":[[2871,50],[2871,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1429":{"id":1429,"range":[[2871,60],[2871,62]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1430":{"id":1430,"range":[[2877,12],[2877,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1431":{"id":1431,"range":[[2886,13],[2886,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1432":{"id":1432,"range":[[2886,25],[2886,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1433":{"id":1433,"range":[[2889,34],[2889,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1434":{"id":1434,"range":[[2889,51],[2889,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1435":{"id":1435,"range":[[2891,44],[2891,55]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1436":{"id":1436,"range":[[2898,55],[2898,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1437":{"id":1437,"range":[[2900,55],[2900,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1438":{"id":1438,"range":[[2901,16],[2901,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1439":{"id":1439,"range":[[2905,16],[2905,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1440":{"id":1440,"range":[[2908,25],[2908,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1441":{"id":1441,"range":[[2915,16],[2915,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1442":{"id":1442,"range":[[2916,16],[2916,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1443":{"id":1443,"range":[[2926,9],[2926,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1444":{"id":1444,"range":[[2932,56],[2932,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1445":{"id":1445,"range":[[2934,56],[2934,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1446":{"id":1446,"range":[[2935,16],[2935,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1447":{"id":1447,"range":[[2939,16],[2939,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1448":{"id":1448,"range":[[2942,25],[2942,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1449":{"id":1449,"range":[[2949,16],[2949,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1450":{"id":1450,"range":[[2950,16],[2950,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1451":{"id":1451,"range":[[2958,48],[2958,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1452":{"id":1452,"range":[[2965,40],[2965,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1453":{"id":1453,"range":[[2966,28],[2966,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1454":{"id":1454,"range":[[2969,39],[2969,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1455":{"id":1455,"range":[[2970,15],[2970,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1456":{"id":1456,"range":[[2970,45],[2970,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1457":{"id":1457,"range":[[2988,9],[2988,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1458":{"id":1458,"range":[[2989,21],[2989,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1459":{"id":1459,"range":[[2992,4],[2992,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1460":{"id":1460,"range":[[3000,26],[3000,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1461":{"id":1461,"range":[[3000,34],[3000,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1462":{"id":1462,"range":[[3002,12],[3002,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1463":{"id":1463,"range":[[3002,19],[3002,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1464":{"id":1464,"range":[[3005,16],[3005,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1465":{"id":1465,"range":[[3006,52],[3006,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1466":{"id":1466,"range":[[3011,20],[3011,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1467":{"id":1467,"range":[[3012,20],[3012,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1468":{"id":1468,"range":[[3014,21],[3014,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1469":{"id":1469,"range":[[3020,48],[3020,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1470":{"id":1470,"range":[[3020,56],[3020,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1471":{"id":1471,"range":[[3027,48],[3027,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1472":{"id":1472,"range":[[3027,56],[3027,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1473":{"id":1473,"range":[[3034,50],[3034,55]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1474":{"id":1474,"range":[[3034,58],[3034,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1475":{"id":1475,"range":[[3040,12],[3040,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1476":{"id":1476,"range":[[3043,12],[3043,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1477":{"id":1477,"range":[[3046,26],[3046,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1478":{"id":1478,"range":[[3046,34],[3046,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1479":{"id":1479,"range":[[3048,12],[3048,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1480":{"id":1480,"range":[[3048,19],[3048,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1481":{"id":1481,"range":[[3051,53],[3051,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1482":{"id":1482,"range":[[3052,16],[3052,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1483":{"id":1483,"range":[[3057,20],[3057,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1484":{"id":1484,"range":[[3058,20],[3058,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1485":{"id":1485,"range":[[3060,21],[3060,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1486":{"id":1486,"range":[[3066,48],[3066,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1487":{"id":1487,"range":[[3066,56],[3066,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1488":{"id":1488,"range":[[3072,48],[3072,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1489":{"id":1489,"range":[[3072,56],[3072,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1490":{"id":1490,"range":[[3078,50],[3078,55]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1491":{"id":1491,"range":[[3078,58],[3078,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1492":{"id":1492,"range":[[3086,12],[3086,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1493":{"id":1493,"range":[[3087,30],[3087,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1494":{"id":1494,"range":[[3090,22],[3090,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1495":{"id":1495,"range":[[3091,23],[3091,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1496":{"id":1496,"range":[[3096,23],[3096,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1497":{"id":1497,"range":[[3097,23],[3097,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1498":{"id":1498,"range":[[3103,17],[3103,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1499":{"id":1499,"range":[[3105,26],[3105,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1500":{"id":1500,"range":[[3105,34],[3105,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1501":{"id":1501,"range":[[3117,52],[3117,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1502":{"id":1502,"range":[[3119,46],[3119,51]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1503":{"id":1503,"range":[[3119,54],[3119,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1504":{"id":1504,"range":[[3122,12],[3122,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1505":{"id":1505,"range":[[3122,19],[3122,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1506":{"id":1506,"range":[[3130,20],[3130,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1507":{"id":1507,"range":[[3131,20],[3131,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1508":{"id":1508,"range":[[3133,21],[3133,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1509":{"id":1509,"range":[[3139,34],[3139,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1510":{"id":1510,"range":[[3139,42],[3139,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1511":{"id":1511,"range":[[3145,34],[3145,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1512":{"id":1512,"range":[[3145,42],[3145,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1513":{"id":1513,"range":[[3151,34],[3151,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1514":{"id":1514,"range":[[3151,42],[3151,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1515":{"id":1515,"range":[[3159,12],[3159,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1516":{"id":1516,"range":[[3160,53],[3160,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1517":{"id":1517,"range":[[3162,46],[3162,51]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1518":{"id":1518,"range":[[3162,54],[3162,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1519":{"id":1519,"range":[[3165,12],[3165,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1520":{"id":1520,"range":[[3165,19],[3165,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1521":{"id":1521,"range":[[3172,20],[3172,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1522":{"id":1522,"range":[[3173,20],[3173,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1523":{"id":1523,"range":[[3175,21],[3175,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1524":{"id":1524,"range":[[3181,34],[3181,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1525":{"id":1525,"range":[[3181,42],[3181,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1526":{"id":1526,"range":[[3188,34],[3188,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1527":{"id":1527,"range":[[3188,42],[3188,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1528":{"id":1528,"range":[[3195,34],[3195,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1529":{"id":1529,"range":[[3195,42],[3195,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1530":{"id":1530,"range":[[3203,12],[3203,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1531":{"id":1531,"range":[[3204,30],[3204,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1532":{"id":1532,"range":[[3207,23],[3207,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1533":{"id":1533,"range":[[3208,23],[3208,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1534":{"id":1534,"range":[[3214,23],[3214,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1535":{"id":1535,"range":[[3215,23],[3215,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1536":{"id":1536,"range":[[3221,17],[3221,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1537":{"id":1537,"range":[[3232,4],[3232,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1538":{"id":1538,"range":[[3234,4],[3234,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1539":{"id":1539,"range":[[3234,20],[3234,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1540":{"id":1540,"range":[[3235,27],[3235,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1541":{"id":1541,"range":[[3236,15],[3236,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1542":{"id":1542,"range":[[3239,4],[3239,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1543":{"id":1543,"range":[[3241,4],[3241,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1544":{"id":1544,"range":[[3243,4],[3243,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1545":{"id":1545,"range":[[3244,4],[3244,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1546":{"id":1546,"range":[[3244,21],[3244,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1547":{"id":1547,"range":[[3244,32],[3244,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1548":{"id":1548,"range":[[3244,45],[3244,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1549":{"id":1549,"range":[[3245,16],[3245,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1550":{"id":1550,"range":[[3246,11],[3246,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1551":{"id":1551,"range":[[3247,18],[3247,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1552":{"id":1552,"range":[[3248,27],[3248,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1553":{"id":1553,"range":[[3251,28],[3251,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1554":{"id":1554,"range":[[3251,44],[3251,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1555":{"id":1555,"range":[[3251,49],[3251,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1556":{"id":1556,"range":[[3251,57],[3251,62]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1557":{"id":1557,"range":[[3263,4],[3263,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1558":{"id":1558,"range":[[3269,4],[3269,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1559":{"id":1559,"range":[[3271,4],[3271,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1560":{"id":1560,"range":[[3272,4],[3272,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1561":{"id":1561,"range":[[3279,39],[3279,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1562":{"id":1562,"range":[[3279,54],[3279,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1563":{"id":1563,"range":[[3287,13],[3287,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1564":{"id":1564,"range":[[3287,24],[3287,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1565":{"id":1565,"range":[[3290,32],[3290,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1566":{"id":1566,"range":[[3294,4],[3294,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1567":{"id":1567,"range":[[3295,11],[3295,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1568":{"id":1568,"range":[[3295,26],[3295,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1569":{"id":1569,"range":[[3295,39],[3295,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1570":{"id":1570,"range":[[3297,8],[3297,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1571":{"id":1571,"range":[[3298,8],[3298,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1572":{"id":1572,"range":[[3299,44],[3299,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1573":{"id":1573,"range":[[3302,8],[3302,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1574":{"id":1574,"range":[[3308,0],[3308,2]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1575":{"id":1575,"range":[[3321,3],[3321,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1576":{"id":1576,"range":[[3327,4],[3327,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1577":{"id":1577,"range":[[3328,4],[3328,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1578":{"id":1578,"range":[[3333,13],[3333,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1579":{"id":1579,"range":[[3338,12],[3338,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1580":{"id":1580,"range":[[3361,0],[3361,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1581":{"id":1581,"range":[[3362,19],[3362,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1582":{"id":1582,"range":[[3362,58],[3362,62]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1583":{"id":1583,"range":[[3363,57],[3363,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1584":{"id":1584,"range":[[3366,19],[3366,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1585":{"id":1585,"range":[[3376,28],[3376,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1586":{"id":1586,"range":[[3379,36],[3379,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1587":{"id":1587,"range":[[3385,4],[3385,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1588":{"id":1588,"range":[[3389,32],[3389,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1589":{"id":1589,"range":[[3390,32],[3390,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1590":{"id":1590,"range":[[3392,4],[3392,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1591":{"id":1591,"range":[[3392,63],[3392,70]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1592":{"id":1592,"range":[[3395,22],[3395,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1593":{"id":1593,"range":[[3400,4],[3400,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1594":{"id":1594,"range":[[3415,27],[3415,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1595":{"id":1595,"range":[[3416,8],[3416,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1596":{"id":1596,"range":[[3423,12],[3423,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1597":{"id":1597,"range":[[3424,12],[3424,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1598":{"id":1598,"range":[[3426,38],[3426,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1599":{"id":1599,"range":[[3433,43],[3433,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1600":{"id":1600,"range":[[3450,4],[3450,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1601":{"id":1601,"range":[[3450,37],[3450,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1602":{"id":1602,"range":[[3450,47],[3450,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1603":{"id":1603,"range":[[3451,43],[3451,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1604":{"id":1604,"range":[[3451,53],[3451,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1605":{"id":1605,"range":[[3466,4],[3466,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1606":{"id":1606,"range":[[3475,22],[3475,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1607":{"id":1607,"range":[[3475,29],[3475,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1608":{"id":1608,"range":[[3478,0],[3478,2]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1609":{"id":1609,"range":[[3478,32],[3478,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1610":{"id":1610,"range":[[3478,58],[3478,65]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1611":{"id":1611,"range":[[3484,45],[3484,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"1612":{"id":1612,"range":[[3491,34],[3491,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/R/boot/R/bootfuns.q","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1b24151ad9c0bcd409b633e1fd2182bc404a1c71","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":20,"softTabs":true,"scrollTop":2749,"scrollLeft":0,"displayBuffer":{"id":21,"softWrap":false,"editorWidthInChars":80,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/R/boot/R/bootfuns.q","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/tra/src/R/boot/R/bootfuns.q","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":["sample"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["sample"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/tra/src/R/boot/R/bootfuns.q":1395344249501},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":106271},"tree-view":{"directoryExpansionStates":{"R":{}},"selectedPath":"/Users/tra/src/R/boot/R/bootfuns.q","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}