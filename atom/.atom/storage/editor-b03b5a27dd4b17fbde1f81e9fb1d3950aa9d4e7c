{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1440,"height":877,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/tra/src/advanced-apps.wiki","buffers":[{"text":"\n\n\n# Load Data\n\nFirst download the Fort Collins load data from [this zip file](./analysis/data/ft-collins-history-2011-2012.tar.gz) and unpack it somewhere.  Then set your working directory to the directory where\nyou unpacked the file (above the 'csvs' directory).\n\nThe following block of code will load up all of the CSV files and pull the hour, day-of-year,\nand day-of-week information into their own columns.\n\n\n```r\n# set working directory to wherever you have unpacked\n# ft-collins-history-2011-2012.tar.gz\nsetwd(\"~/src/advanced-apps.wiki/analysis/data/fcu\")\n\nloads = NULL\nfor (year in 2011:2013) {\n    for (month in 1:12) {\n        filename = paste0(\"./csvs/\", month, \"-\", year, \".csv\")\n        cat(\"loading \", filename, \"\\n\")\n        data = read.csv(filename)\n        # convert garbage characters to integer\n        if (is.factor(data$value)) {\n            data$value = as.integer(as.character(data$value))\n        }\n        # get rid of stuff that looks bad\n        data = data[!is.na(data$value) & data$value > 0, ]\n        \n        # ignore minutes:seconds-tz part, truncate to the hour, then add hour to get\n        # to hour-ending time also, keep times in MST to avoid hour shift at DST\n        # boundaries (considered using UTC but that would put peaks around 0300\n        # which will probably be bad)\n        stimes = gsub(\"(T..):..:..(-..):(..)$\", \"\\\\1\\\\2\\\\3\", data$collectedAt)\n        hours = strptime(stimes, \"%Y-%m-%dT%H%z\", tz = \"MST\") + 3600\n        loads.month = aggregate(data$value, list(hours), mean)\n        loads = rbind(loads, loads.month)\n        rm(stimes)\n        rm(hours)\n        rm(data)\n        rm(loads.month)\n    }\n}\n```\n\n```\n## loading  ./csvs/1-2011.csv \n## loading  ./csvs/2-2011.csv \n## loading  ./csvs/3-2011.csv \n## loading  ./csvs/4-2011.csv \n## loading  ./csvs/5-2011.csv \n## loading  ./csvs/6-2011.csv \n## loading  ./csvs/7-2011.csv \n## loading  ./csvs/8-2011.csv \n## loading  ./csvs/9-2011.csv \n## loading  ./csvs/10-2011.csv \n## loading  ./csvs/11-2011.csv \n## loading  ./csvs/12-2011.csv \n## loading  ./csvs/1-2012.csv \n## loading  ./csvs/2-2012.csv \n## loading  ./csvs/3-2012.csv \n## loading  ./csvs/4-2012.csv \n## loading  ./csvs/5-2012.csv \n## loading  ./csvs/6-2012.csv \n## loading  ./csvs/7-2012.csv \n## loading  ./csvs/8-2012.csv \n## loading  ./csvs/9-2012.csv \n## loading  ./csvs/10-2012.csv \n## loading  ./csvs/11-2012.csv \n## loading  ./csvs/12-2012.csv \n## loading  ./csvs/1-2013.csv \n## loading  ./csvs/2-2013.csv \n## loading  ./csvs/3-2013.csv \n## loading  ./csvs/4-2013.csv \n## loading  ./csvs/5-2013.csv \n## loading  ./csvs/6-2013.csv \n## loading  ./csvs/7-2013.csv \n## loading  ./csvs/8-2013.csv \n## loading  ./csvs/9-2013.csv \n## loading  ./csvs/10-2013.csv \n## loading  ./csvs/11-2013.csv \n## loading  ./csvs/12-2013.csv\n```\n\n```r\n\n# do this after looping over the data\ncolnames(loads) = c(\"time\", \"load\")\nloads$hour = as.POSIXlt(loads$time)$hour\nloads$wday = ((as.POSIXlt(loads$time)$wday + 6)%%7) + 1  # put sunday at 7 so it's next to saturday\nloads$yday = as.POSIXlt(loads$time)$yday\nloads$day = 365 * (as.POSIXlt(loads$time)$year - 111) + as.POSIXlt(loads$time)$yday\n```\n\n\nBefore removing the `time` field, save a copy for later (when we merge weather).\n\n```r\nloads.orig = loads\nloads$time = NULL\n```\n\n\n## MAPE Function\n\nFort Collins wants to measure their MAPE from hours ending 11:00 to 21:00.  The following function\nruns the specified model and outputs the MAPE in that time range.\n\n```r\n# test model error using K-folds\nmodel_mape = function(model, formula, data, tdata = NULL, foldon = \"day\", K = 6, \n    normalize = FALSE, verbose = FALSE, weights = NULL, feedforward = FALSE, \n    ...) {\n    uniques = unique(data[, foldon])\n    folds = split(sample(uniques), 1:length(uniques)%%K)\n    sape = 0\n    y = all.vars(formula)[1]  # the name of the thing we are solving for\n    \n    if (is.null(tdata)) {\n        tdata = data\n    }\n    \n    # normalize data between 0 and 1\n    if (normalize) {\n        ndata = sweep(data, 2, apply(data, 2, min), \"-\")\n        ndata = sweep(ndata, 2, apply(ndata, 2, max), \"/\")\n        ntdata = sweep(tdata, 2, apply(data, 2, min), \"-\")\n        ntdata = sweep(ntdata, 2, apply(ndata, 2, max), \"/\")\n        min_y = min(tdata[y])\n        scale_y = max(tdata[y]) - min_y\n    } else {\n        ndata = data\n        ntdata = tdata\n        min_y = 0\n        scale_y = 1\n    }\n    min_hour = 11\n    max_hour = 21\n    \n    total_test_count = 0\n    for (fold in 1:K) {\n        test_rows = tdata[, foldon] %in% unlist(folds[fold])\n        train_rows = !(data[, foldon] %in% unlist(folds[fold]))\n        \n        train_data = subset(ndata, train_rows)\n        test_data = subset(ntdata, test_rows & ntdata$hour >= min_hour & ntdata$hour <= \n            max_hour)\n        test_data_orig = subset(tdata, test_rows & tdata$hour >= min_hour & \n            tdata$hour <= max_hour)\n        \n        if (is.vector(weights)) {\n            # for some reason, weights need to be assigned in a global environment so\n            # they're accessible\n            assign(\"model_mape.weights\", subset(weights, !test_rows), inherits = TRUE)\n            fit = model(formula, data = train_data, weights = model_mape.weights, \n                ...)\n            rm(\"model_mape.weights\", inherits = TRUE)\n        } else {\n            fit = model(formula, data = train_data, ...)\n        }\n        if (feedforward) {\n            for (cur_hour in min_hour:max_hour) {\n                test_hour = subset(test_data, test_data$hour == cur_hour)\n                if (cur_hour > min_hour) {\n                  # test_hour$load.prev = apply(test_hour[,c('day', 'hour')], 1, function(x)\n                  # test_data[test_data$day==x['day']&test_data$hour==(cur_hour-1),]$prediction[1])\n                  test_hour$load.prev = apply(test_hour[, c(\"day\", \"hour\")], \n                    1, function(x) test_data[test_data$day == x[\"day\"] & test_data$hour == \n                      (cur_hour - 1), ]$prediction[1])\n                }\n                cur_predictions = predict(fit, test_hour, distribution = \"gaussian\", \n                  n.trees = 1000, interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n                # put the predictions on test_data so that we can get them in the correct\n                # order later\n                test_data$prediction[test_data$hour == cur_hour] = cur_predictions\n            }\n            predictions = test_data$prediction\n        } else {\n            predictions = predict(fit, test_data, ...)\n        }\n        norm_residuals = (predictions - test_data[y])\n        # denormalize\n        residuals = norm_residuals * scale_y\n        \n        # sum of absolute percentage errors for fold K\n        sape_k = sum(abs(residuals/test_data_orig[y]))\n        sape = sape + sape_k\n        test_count = nrow(test_data[y])\n        total_test_count = total_test_count + test_count\n        if (verbose) {\n            cat(\"mape[\", fold, \"] = \", round(100 * sape_k/test_count, 2), \"\\n\", \n                sep = \"\")\n        }\n    }\n    # mean absolute percentage error (MAPE)\n    round(100 * sape/total_test_count, 2)\n}\n```\n\nAnd since `neuralnet` doesn't define a predict method, we need to write one.\nThis will get called when `predict` is called with the result of a `neuralnet` call.\nSimply put, this gives us an answer that is similar in format to all of the other\n`predict` calls so that we can use it in our model comparisons below.\n\n```r\npredict.nn = function(fit, data, ...) {\n    orig_formula = paste(fit$model.list$response, paste(fit$model.list$variables, \n        collapse = \"+\"), sep = \"~\")\n    # remove the intercept from the original formula since compute doesn't want\n    # that\n    matrix_formula = as.formula(paste(orig_formula, \"- 1\"))\n    datam = model.matrix(matrix_formula, data)\n    result = compute(fit, datam)\n    # return only the last column which is the prediction values\n    predictions = result$net.result[, 1]\n}\n```\n\n\n## Models without Weather\n\nFirst, to get a baseline of our worst models, let's try some simple fits to the data.\n\n\n```r\nrequire(gbm)\nfit = gbm(load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, interaction.depth = 4, \n    shrinkage = 0.2)\nsummary(fit)\n```\n\n<img src=\"analysis/images/gbm-simple.png\" title=\"plot of chunk gbm-simple\" alt=\"plot of chunk gbm-simple\" style=\"display: block; margin: auto;\" />\n\n```\n##       var rel.inf\n## hour hour  57.946\n## yday yday  32.309\n## day   day   6.871\n## wday wday   2.874\n```\n\n<img src=\"analysis/images/gbm-simple-plot.png\" title=\"plot of chunk gbm-simple-plot\" alt=\"plot of chunk gbm-simple-plot\" style=\"display: block; margin: auto;\" />\n\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2)\n```\n\n```\n## [1] 3.96\n```\n\n\nSince we are trying to get the best estimates during peak load, what happens if we weight by\nthe load itself?\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, weights = loads$load)\n```\n\n```\n## [1] 3.99\n```\n\nNo improvement.  Let's subtract out the minimum and square the result so that the maximum weights have more effect.\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, weights = (loads$load - min(loads$load))^2)\n```\n\n```\n## [1] 4.2\n```\n\nIt looks like the weights have no discernible effect for `gbm`.\n\n### Adding Yesterday's Load\n\nMany load forecast algorithms use the load from the previous day.\nLet's add that to our feature vector to see how it changes the results.\n\n\n```r\nloads$dayago = apply(loads, 1, function(x) loads[loads$hour == x[\"hour\"] & loads$day == \n    (x[\"day\"] - 1), ]$load[1])\n```\n\n\n\n```r\nfit = gbm(load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, interaction.depth = 4, \n    shrinkage = 0.2)\npar((mfrow = c(1, 1)))\n```\n\n```\n## NULL\n```\n\n```r\nsummary(fit)\n```\n\n<img src=\"analysis/images/yesterday-gbm.png\" title=\"plot of chunk yesterday-gbm\" alt=\"plot of chunk yesterday-gbm\" style=\"display: block; margin: auto;\" />\n\n```\n##           var rel.inf\n## dayago dayago  85.772\n## hour     hour   5.521\n## yday     yday   3.259\n## wday     wday   2.977\n## day       day   2.472\n```\n\nNot surprisingly, the load from the previous day dominates the estimate.  Let's look at MAPE.\n\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2)\n```\n\n```\n## [1] 4.39\n```\n\n```r\n# 4.2\n```\n\n\nWhich is worse than before. Let's try adding week-ago loads too:\n\n```r\nloads$weekago = apply(loads, 1, function(x) loads[loads$hour == x[\"hour\"] & \n    loads$day == (x[\"day\"] - 7), ]$load[1])\nfit = gbm(load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, interaction.depth = 4, \n    shrinkage = 0.2)\nsummary(fit)\n```\n\n<img src=\"analysis/images/lastweek-gbm.png\" title=\"plot of chunk lastweek-gbm\" alt=\"plot of chunk lastweek-gbm\" style=\"display: block; margin: auto;\" />\n\n```\n##             var rel.inf\n## dayago   dayago  73.165\n## weekago weekago  18.200\n## yday       yday   2.845\n## day         day   2.298\n## wday       wday   1.953\n## hour       hour   1.540\n```\n\n\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2)\n```\n\n```\n## [1] 4.32\n```\n\n\nAbout the same. Let's try adding hour-ago loads too:\n\n```r\nloads$hourago = apply(loads, 1, function(x) loads[loads$hour == (x[\"hour\"] - \n    1) & loads$day == x[\"day\"], ]$load[1])\nfit = gbm(load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, interaction.depth = 4, \n    shrinkage = 0.2)\nsummary(fit)\n```\n\n<img src=\"analysis/images/hourago-gbm.png\" title=\"plot of chunk hourago-gbm\" alt=\"plot of chunk hourago-gbm\" style=\"display: block; margin: auto;\" />\n\n```\n##             var rel.inf\n## hourago hourago 75.9012\n## dayago   dayago 16.4347\n## weekago weekago  4.2185\n## hour       hour  2.6735\n## yday       yday  0.4092\n## wday       wday  0.2304\n## day         day  0.1324\n```\n\n\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2)\n```\n\n```\n## [1] 1.25\n```\n\nThat's much better.  For comparison, how does random forests do with this data?\n\nFirst, the `randomForest` package doesn't deal with `NA` data so let's remove those records.\n\n```r\nloads.clean = loads[!is.na(loads$dayago) & !is.na(loads$weekago) & !is.na(loads$hourago), \n    ]\n```\n\n\nAfter trying several settings, the following model is about as good as `randomForest`\ndoes on the data.\nAny number of trees above 80 doesn't appear to improve the results appreciably for this data.\n\n\n```r\nrequire(randomForest)\nmodel_mape(randomForest, load ~ ., loads.clean, ntree = 80, mtry = 5, verbose = FALSE)\n```\n\n```\n## [1] 1.3\n```\n\nThis looks a little worse than boosting and it trains noticeably slower.\n\nBut we might not always have the load from an hour ago.  Can we use the\nprevious hour's estimate to feed forward?  We'll come back to that.\nFirst let's load up some weather data and see how that affects the model.\nFor now, remove hour-ago from the data.\n\n```r\nloads$hourago = NULL\n```\n\n\n# Weather Data\n\n\n```r\n# set working directory to wherever the weather csv files are\nsetwd(\"~/src/advanced-apps.wiki/analysis/data/fcu\")\n\nweathers = NULL\nfor (year in 2011:2013) {\n    filename = paste0(\"./\", year, \"_ft_collins.csv\")\n    cat(\"loading \", filename, \"\\n\")\n    data = read.csv(filename)\n    \n    numeric_fields = c(\"temperature\", \"dew_point\", \"wind_speed\", \"wind_direction\", \n        \"cloud_ceiling\", \"visibility\", \"pressure\")\n    for (field in numeric_fields) {\n        data[field] = as.numeric(as.character(data[field][, 1]))\n    }\n    \n    # ignore minutes:seconds-tz part, truncate to the hour, then add hour to get\n    # to hour-ending time also, keep times in MST to avoid hour shift at DST\n    # boundaries\n    stimes = gsub(\"(T..):..:..([+-]....)$\", \"\\\\1\\\\2\", data$timestamp)\n    hours = strptime(stimes, \"%Y-%m-%dT%H%z\", tz = \"MST\") + 3600\n    weathers.hourly = aggregate(data[, numeric_fields], list(hours), FUN = mean)\n    \n    # take the median sky_cover value\n    weathers.hourly$sky_cover = as.factor(levels(data$sky_cover)[aggregate(as.integer(data$sky_cover), \n        list(hours), median)[, 2]])\n    \n    weathers = rbind(weathers, weathers.hourly)\n    rm(stimes)\n    rm(hours)\n    rm(data)\n    rm(weathers.hourly)\n}\n```\n\n```\n## loading  ./2011_ft_collins.csv \n## loading  ./2012_ft_collins.csv \n## loading  ./2013_ft_collins.csv\n```\n\n```r\ncolnames(weathers)[1] = \"time\"\n```\n\n\nNow merge the `loads` and `weathers` data frames into one big `data.frame` called `features`.\n\n```r\nloads = merge(loads.orig, weathers, by = \"time\")\nloads$time = NULL\n```\n\n\n## Models with Weather\n\nLet's get the same summary information for a boosting model that we got without weather:\n\n```r\nfit = gbm(load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, interaction.depth = 4, \n    shrinkage = 0.2)\npar((mfrow = c(1, 1)))\n```\n\n```\n## NULL\n```\n\n```r\nsummary(fit)\n```\n\n<img src=\"analysis/images/gbm-simple-with-weather.png\" title=\"plot of chunk gbm-simple-with-weather\" alt=\"plot of chunk gbm-simple-with-weather\" style=\"display: block; margin: auto;\" />\n\n```\n##                           var  rel.inf\n## temperature       temperature 58.43780\n## hour                     hour 31.29312\n## yday                     yday  4.04666\n## wday                     wday  2.45888\n## dew_point           dew_point  2.23266\n## day                       day  0.66551\n## pressure             pressure  0.26467\n## wind_speed         wind_speed  0.21055\n## wind_direction wind_direction  0.17385\n## cloud_ceiling   cloud_ceiling  0.09432\n## visibility         visibility  0.06807\n## sky_cover           sky_cover  0.05390\n```\n\n\nAs expected temperature plays a large part in the model.  Plotting the top 3 influences:\n<img src=\"analysis/images/gbm-simple-plot-with-weather.png\" title=\"plot of chunk gbm-simple-plot-with-weather\" alt=\"plot of chunk gbm-simple-plot-with-weather\" style=\"display: block; margin: auto;\" />\n\n\nAnd the MAPE calculation:\n\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.28\n## mape[2] = 2.16\n## mape[3] = 2.43\n## mape[4] = 2.38\n## mape[5] = 2.17\n## mape[6] = 2.23\n```\n\n```\n## [1] 2.27\n```\n\nCompared to the same model without weather, we decreased from 3.7% to 2.2% just by adding weather.\n\nNow let's look at what happens if we add loads from previous times at various time periods.\n\n### Previous Load\n\nLet's try adding yesterday's load back in.\n\n\n```r\nloads$dayago = apply(loads[, c(\"load\", \"hour\", \"day\")], 1, function(x) loads[loads$hour == \n    x[\"hour\"] & loads$day == (x[\"day\"] - 1), ]$load[1])\n```\n\n\n\n\n```r\nfit = gbm(load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, interaction.depth = 4, \n    shrinkage = 0.2)\npar((mfrow = c(1, 1)))\n```\n\n```\n## NULL\n```\n\n```r\nsummary(fit)\n```\n\n<img src=\"analysis/images/yesterday-gbm-with-weather.png\" title=\"plot of chunk yesterday-gbm-with-weather\" alt=\"plot of chunk yesterday-gbm-with-weather\" style=\"display: block; margin: auto;\" />\n\n```\n##                           var  rel.inf\n## dayago                 dayago 66.77172\n## temperature       temperature 21.33792\n## hour                     hour  7.21422\n## wday                     wday  2.25631\n## yday                     yday  0.82040\n## dew_point           dew_point  0.57527\n## day                       day  0.30057\n## pressure             pressure  0.23264\n## wind_speed         wind_speed  0.16724\n## cloud_ceiling   cloud_ceiling  0.10265\n## wind_direction wind_direction  0.08778\n## visibility         visibility  0.08543\n## sky_cover           sky_cover  0.04784\n```\n\n\n\nLet's look at MAPE.\n\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.03\n## mape[2] = 2.21\n## mape[3] = 2.08\n## mape[4] = 2.11\n## mape[5] = 2.56\n## mape[6] = 2.37\n```\n\n```\n## [1] 2.22\n```\n\n```r\n# 2.2\n```\n\nThis is virtually no different than before.\n\nLet's see how a week-ago loads does.\n\n\n```r\nloads$dayago = NULL\nloads$weekago = apply(loads[, c(\"load\", \"hour\", \"day\")], 1, function(x) loads[loads$hour == \n    x[\"hour\"] & loads$day == (x[\"day\"] - 7), ]$load[1])\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.32\n## mape[2] = 2.21\n## mape[3] = 2.5\n## mape[4] = 2.43\n## mape[5] = 2.73\n## mape[6] = 2.32\n```\n\n```\n## [1] 2.42\n```\n\n\nAbout the same. Let's try adding hour-ago loads for various hour increments.\n\n```r\nloads$weekago = NULL\nloads$hour12.ago = apply(loads[, c(\"load\", \"hour\", \"day\")], 1, function(x) loads[loads$hour == \n    (x[\"hour\"] - 12) & loads$day == x[\"day\"], ]$load[1])\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.14\n## mape[2] = 2.12\n## mape[3] = 2.19\n## mape[4] = 2.3\n## mape[5] = 2.11\n## mape[6] = 2.04\n```\n\n```\n## [1] 2.15\n```\n\n```r\n\nloads$hour12.ago = NULL\nloads$hour6.ago = apply(loads[, c(\"load\", \"hour\", \"day\")], 1, function(x) loads[loads$hour == \n    (x[\"hour\"] - 6) & loads$day == x[\"day\"], ]$load[1])\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.06\n## mape[2] = 2\n## mape[3] = 2.06\n## mape[4] = 1.98\n## mape[5] = 1.99\n## mape[6] = 1.91\n```\n\n```\n## [1] 2\n```\n\n```r\n\nloads$hour6.ago = NULL\nloads$hour3.ago = apply(loads[, c(\"load\", \"hour\", \"day\")], 1, function(x) loads[loads$hour == \n    (x[\"hour\"] - 3) & loads$day == x[\"day\"], ]$load[1])\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.7\n## mape[2] = 1.59\n## mape[3] = 1.62\n## mape[4] = 1.58\n## mape[5] = 1.6\n## mape[6] = 1.7\n```\n\n```\n## [1] 1.63\n```\n\n```r\n\nloads$hour3.ago = NULL\nloads$hour1.ago = apply(loads[, c(\"load\", \"hour\", \"day\")], 1, function(x) loads[loads$hour == \n    (x[\"hour\"] - 1) & loads$day == x[\"day\"], ]$load[1])\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.02\n## mape[2] = 1.03\n## mape[3] = 1.04\n## mape[4] = 1.04\n## mape[5] = 0.97\n## mape[6] = 1.03\n```\n\n```\n## [1] 1.02\n```\n\n```r\n\nloads$hour1.ago = NULL\n```\n\n\nThe estimates are best for the case where you have the most recent (1-hour) load.  As expected the accuracy\ndecreases as the time shift increases.  At somewhere around 12-24 hours the estimate with the previous load\nis about the same as the estimate without.  So the model degrades to being just a the long-term load estimate\nwithout knowledge of previous load.\n\n### 10:00AM Load\n\nUnfortunately, we often don't have the 1-hour ago load value.  Specifically, for Fort Collins, they are\nmost interested in the load estimate from 10:00 AM forward.  So let's look at a model that uses the load\nat 10:00 for the daily projection.\n\n\n```r\nloads$load.10am = apply(loads[, c(\"load\", \"hour\", \"day\")], 1, function(x) loads[x[\"hour\"] > \n    10 & loads$hour == 10 & loads$day == x[\"day\"], ]$load[1])\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.86\n## mape[2] = 2.04\n## mape[3] = 1.75\n## mape[4] = 1.87\n## mape[5] = 1.95\n## mape[6] = 1.79\n```\n\n```\n## [1] 1.88\n```\n\n```r\nloads$load.10am = NULL\n```\n\n\nThe MAPE is between the 3-hour and 6-hour estimates from before which is reasonable since we are doing\nestimates for a 10-hour window between 11:00 and 21:00.  So on average you would expect it to be something\nlike a 5-hour estimate.\n\n## Feed-Forward Load\n\nWhat if we just feed forward estimates from one hour to the next?\nIn order to study this idea, `model_mape` had to be modified to do the feed-forward process.\n\n\n```r\nloads$load.prev = apply(loads[, c(\"load\", \"hour\", \"day\")], 1, function(x) loads[loads$hour == \n    (x[\"hour\"] - 1) & loads$day == x[\"day\"], ]$load[1])\n```\n\n\nWithout the `feedforward` flag we should get the same MAPE as the `hours.ago` model above. \n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.07\n## mape[2] = 0.99\n## mape[3] = 1.03\n## mape[4] = 1.01\n## mape[5] = 1.01\n## mape[6] = 0.94\n```\n\n```\n## [1] 1.01\n```\n\nAnd with the `feedforward` flag, the error should increase.\n\n```r\nmodel_mape(gbm, load ~ ., loads, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.08\n## mape[2] = 1.86\n## mape[3] = 1.78\n## mape[4] = 1.96\n## mape[5] = 1.87\n## mape[6] = 1.93\n```\n\n```\n## [1] 1.91\n```\n\n```r\n# 1.9\n```\n\n\n\n```r\nloads$load.prev = NULL\n```\n\n\n### Multiple Training\n\nNext we explore training with multiple instances of every feature vector.\nFor the first example, we take each feature and we add a a `load.prev` sample with the value of the previous load.\nThen we duplicate that record with an `NA` as the value.  That way, we can train the algorithm both for the\ncase where we have a previous load, and the case where we don't.\n\nSo we don't pollute the original data, let's create a new data.frame called `loads.multi`\n\n```r\nloads.prev = loads\nloads.prev$load.prev = apply(loads[, c(\"hour\", \"day\")], 1, function(x) loads[loads$hour == \n    (x[\"hour\"] - 1) & loads$day == x[\"day\"], ]$load[1])\n\nloads.prev.na = loads.prev\nloads.prev.na$load.prev = NA\n\nloads.multi = rbind(loads.prev.na, loads.prev)\n```\n\n\nRunning this with the data set that has no previous load we would expect to be around the same MAPE as\nwe got above with no previous loads (approx. 2.2%):\n\n```r\nmodel_mape(gbm, load ~ ., loads.multi, tdata = loads.prev.na, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.01\n## mape[2] = 2.34\n## mape[3] = 2.41\n## mape[4] = 2.16\n## mape[5] = 2.44\n## mape[6] = 2.27\n```\n\n```\n## [1] 2.27\n```\n\nIdeally using the 1-hour previous load data for testing would get us close to the 1-hour MAPE (approx 1.1%).\n\n```r\nmodel_mape(gbm, load ~ ., loads.multi, tdata = loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.42\n## mape[2] = 1.43\n## mape[3] = 1.53\n## mape[4] = 1.48\n## mape[5] = 1.37\n## mape[6] = 1.3\n```\n\n```\n## [1] 1.42\n```\n\nUnfortunately, we don't do as well as before.  This seems to suggest that we cannot achieve the same level of \naccuracy with one model to accomodate estimates that use previous loads.  We might need a different model for each\ntime differential up to some threshold (12-24 hours?).  Or perhaps we can use the feed-forward model up to some\nthreshold then switch to a more general model.\n\n\n## Identifying Important Observations\n\nTo get an idea of the relative importance of each observation, do a summary on the `gbm` output.\n\n\n```r\nsummary(gbm(load ~ ., loads.prev, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 5, shrinkage = 0.2))\n```\n\n<img src=\"analysis/images/gbm-summary.png\" title=\"plot of chunk gbm-summary\" alt=\"plot of chunk gbm-summary\" style=\"display: block; margin: auto;\" />\n\n```\n##                           var  rel.inf\n## load.prev           load.prev 86.97112\n## temperature       temperature  5.99805\n## hour                     hour  5.85714\n## dew_point           dew_point  0.34087\n## yday                     yday  0.33140\n## wday                     wday  0.13181\n## pressure             pressure  0.10519\n## day                       day  0.07648\n## cloud_ceiling   cloud_ceiling  0.06635\n## wind_speed         wind_speed  0.04884\n## wind_direction wind_direction  0.04086\n## visibility         visibility  0.01715\n## sky_cover           sky_cover  0.01474\n```\n\n\nFirst let's get the baseline numbers with and without the previous load.\n\n\n```r\nmodel_mape(gbm, load ~ ., loads.prev, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 0.96\n```\n\n```r\n# 1.0\nmodel_mape(gbm, load ~ . - load.prev, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 2.24\n```\n\n```r\n# 2.2\n```\n\n\nNow try removing observatrions from the bottom of the list until we see a\nsignificant change in MAPE.  First remove visibility and check the MAPE.\n\n\n```r\nmodel_mape(gbm, load ~ . - visibility, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 0.96\n```\n\n```r\n# 1.0\nmodel_mape(gbm, load ~ . - visibility - load.prev, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 2.28\n```\n\n```r\n# 2.2\n```\n\n\nIt looks like visibility has no discernible effect.  Let's remove more things until we see\na noticeable difference.\n\n\n```r\nmodel_mape(gbm, load ~ . - visibility - sky_cover, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 0.96\n```\n\n```r\n# 1.0\nmodel_mape(gbm, load ~ . - visibility - sky_cover - load.prev, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 2.27\n```\n\n```r\n# 2.2\n```\n\n\n\n\n```r\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling, loads.prev, \n    distribution = \"gaussian\", n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, \n    verbose = FALSE)\n```\n\n```\n## [1] 0.96\n```\n\n```r\n# 1.0\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - load.prev, \n    loads.prev, distribution = \"gaussian\", n.trees = 1000, interaction.depth = 5, \n    shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 2.27\n```\n\n```r\n# 2.2\n```\n\n\n\n\n```r\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - wind_direction - \n    wind_speed, loads.prev, distribution = \"gaussian\", n.trees = 1000, interaction.depth = 5, \n    shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 0.96\n```\n\n```r\n# 1.0\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - wind_direction - \n    wind_speed - load.prev, loads.prev, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 2.29\n```\n\n```r\n# 2.2\n```\n\n\n\n```r\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - wind_direction - \n    wind_speed - pressure, loads.prev, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 0.94\n```\n\n```r\n# 1.0\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - wind_direction - \n    wind_speed - pressure - load.prev, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 2.24\n```\n\n```r\n# 2.2\n```\n\n\n\n```r\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - wind_direction - \n    wind_speed - pressure - day, loads.prev, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 0.94\n```\n\n```r\n# 1.0\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - wind_direction - \n    wind_speed - pressure - day - load.prev, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 2.43\n```\n\n```r\n# 2.4\n```\n\n\nWe finally found something that makes a small difference.  Removing `day` makes a small\ndifference for the long-term forecast, which makes some sense since it is\nthe long-term measure of days since the beginning of time.\nBut it makes no difference for the short-term forecast.  This suggests that we might be \nable to use fewer variables for the short-term forecast.\nHowever, since day is always increasing, it might be better to instead model this\nby decreasing the influence of older observations over time.\n\n\n\n```r\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - wind_direction - \n    wind_speed - pressure - day - wday, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 0.98\n```\n\n```r\n# 1.0\nmodel_mape(gbm, load ~ . - visibility - sky_cover - cloud_ceiling - wind_direction - \n    wind_speed - pressure - day - wday - load.prev, loads.prev, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = FALSE)\n```\n\n```\n## [1] 3.81\n```\n\n\nAnd now we have our first significant effect on the long-term forecast.\nThis suggests that we need to keep `wday` in the long-term forecast.  And keeping\nit in the short-term forecast has no effect so keeping it might be a decision of\nexpediency.  We might as well keep it for both long-term and short-term forecasts since\nit improves long-term forecasts and has no measurable effect on long-term forecasts.\n\nWe are left with the following observations in order of significance:\n\n * previous load (if available, short-term forecasts only)\n * temperature\n * hour\n * day-of-year (yday)\n * dew point\n * day-of-week (wday)\n \nBreaking this down further by weather and time data.\nThe most important weather data is always in the order of:\n\n  * temperature\n  * dew point\n  \nAnd the most important time data is in the order of:\n\n  * hour\n  * day-of-year\n  * day-of-week\n\n### Tuning the Boosting Model\n\nBased on the last section, let's remove the unused observations and try to tune the `gbm` settings.\n\n```r\nloads.basic = loads.prev\nloads.basic$visibility = NULL\nloads.basic$sky_cover = NULL\nloads.basic$cloud_ceiling = NULL\nloads.basic$wind_direction = NULL\nloads.basic$wind_speed = NULL\nloads.basic$pressure = NULL\n```\n\n\nLet's start with the tunings we have been using up to this point.  We will also tune\nthe short term (with previous load) and long-term models separately.  As much as possible\nwe'd like to tune them the same but that may not always be feasible.\n\nAlso, because the intent is to feed forward the short-term estimates for the most recent load,\nwe will consider use the `feedforward` setting to evaluate the short-term model.\n\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 5, shrinkage = 0.2, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.85\n## mape[2] = 1.8\n## mape[3] = 1.9\n## mape[4] = 1.86\n## mape[5] = 1.92\n## mape[6] = 1.87\n```\n\n```\n## [1] 1.87\n```\n\n```r\n\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.53\n## mape[2] = 2.43\n## mape[3] = 2.2\n## mape[4] = 2.31\n## mape[5] = 2.64\n## mape[6] = 2.37\n```\n\n```\n## [1] 2.41\n```\n\n\n#### interaction.depth\n\nIncreasing interaction depth increases the complexity of the interactions between observations.\nHere are runs with the short-term model.\n\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 3, shrinkage = 0.2, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.06\n## mape[2] = 1.91\n## mape[3] = 2.09\n## mape[4] = 1.92\n## mape[5] = 2.04\n## mape[6] = 2.02\n```\n\n```\n## [1] 2.01\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.79\n## mape[2] = 1.89\n## mape[3] = 2.22\n## mape[4] = 1.89\n## mape[5] = 1.97\n## mape[6] = 1.87\n```\n\n```\n## [1] 1.94\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 5, shrinkage = 0.2, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.9\n## mape[2] = 1.92\n## mape[3] = 1.95\n## mape[4] = 1.88\n## mape[5] = 1.86\n## mape[6] = 1.82\n```\n\n```\n## [1] 1.89\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 6, shrinkage = 0.2, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.79\n## mape[2] = 1.62\n## mape[3] = 1.91\n## mape[4] = 1.79\n## mape[5] = 1.81\n## mape[6] = 1.99\n```\n\n```\n## [1] 1.82\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 7, shrinkage = 0.2, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.74\n## mape[2] = 1.76\n## mape[3] = 1.84\n## mape[4] = 1.81\n## mape[5] = 2.15\n## mape[6] = 1.73\n```\n\n```\n## [1] 1.84\n```\n\nThe MAPE decreases slightly as we increase the depth.  Beyond 4 there doesn't seem to be significant improvement.\n\nAnd now, the long-term model:\n\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 3, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.31\n## mape[2] = 2.4\n## mape[3] = 2.64\n## mape[4] = 2.27\n## mape[5] = 2.48\n## mape[6] = 2.48\n```\n\n```\n## [1] 2.43\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.64\n## mape[2] = 2.32\n## mape[3] = 2.24\n## mape[4] = 2.42\n## mape[5] = 2.57\n## mape[6] = 2.29\n```\n\n```\n## [1] 2.42\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 5, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.59\n## mape[2] = 2.47\n## mape[3] = 2.26\n## mape[4] = 2.43\n## mape[5] = 2.62\n## mape[6] = 2.23\n```\n\n```\n## [1] 2.43\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 6, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.39\n## mape[2] = 2.39\n## mape[3] = 2.38\n## mape[4] = 2.69\n## mape[5] = 2.61\n## mape[6] = 2.29\n```\n\n```\n## [1] 2.46\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 7, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.46\n## mape[2] = 2.49\n## mape[3] = 2.35\n## mape[4] = 2.73\n## mape[5] = 2.22\n## mape[6] = 2.48\n```\n\n```\n## [1] 2.46\n```\n\n\nFor the long-term model, a depth of 4 seems to be best.  So we'll use it for both models.\n\n\n#### shrinkage\n\nWith shrinkage, we want the largest value that gives good performance because a larger\nshrinkage might allow us to use less trees.\n\nFirst the short-term model:\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.1, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.09\n## mape[2] = 2.07\n## mape[3] = 1.88\n## mape[4] = 2.05\n## mape[5] = 1.9\n## mape[6] = 2.08\n```\n\n```\n## [1] 2.01\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.15, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.01\n## mape[2] = 1.84\n## mape[3] = 1.94\n## mape[4] = 1.78\n## mape[5] = 2.15\n## mape[6] = 1.91\n```\n\n```\n## [1] 1.94\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.2, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.99\n## mape[2] = 2.09\n## mape[3] = 1.99\n## mape[4] = 1.89\n## mape[5] = 1.93\n## mape[6] = 1.89\n```\n\n```\n## [1] 1.96\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.25, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.9\n## mape[2] = 1.75\n## mape[3] = 1.84\n## mape[4] = 2.08\n## mape[5] = 1.8\n## mape[6] = 1.99\n```\n\n```\n## [1] 1.89\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.3, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.85\n## mape[2] = 2.05\n## mape[3] = 1.83\n## mape[4] = 1.88\n## mape[5] = 1.9\n## mape[6] = 1.8\n```\n\n```\n## [1] 1.89\n```\n\n\nIt flattens out between 0.2 and 0.3.  Let's see what the long-term model looks like before deciding.\n\nFor the long-term model:\n\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.1, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.42\n## mape[2] = 2.21\n## mape[3] = 2.52\n## mape[4] = 2.51\n## mape[5] = 2.58\n## mape[6] = 2.34\n```\n\n```\n## [1] 2.43\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.15, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.33\n## mape[2] = 2.38\n## mape[3] = 2.65\n## mape[4] = 2.53\n## mape[5] = 2.52\n## mape[6] = 2.25\n```\n\n```\n## [1] 2.44\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.2, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.17\n## mape[2] = 2.62\n## mape[3] = 2.32\n## mape[4] = 2.37\n## mape[5] = 2.45\n## mape[6] = 2.6\n```\n\n```\n## [1] 2.42\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.13\n## mape[2] = 2.51\n## mape[3] = 2.64\n## mape[4] = 2.54\n## mape[5] = 2.5\n## mape[6] = 2.19\n```\n\n```\n## [1] 2.42\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.3, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.57\n## mape[2] = 2.18\n## mape[3] = 2.6\n## mape[4] = 2.42\n## mape[5] = 2.38\n## mape[6] = 2.61\n```\n\n```\n## [1] 2.46\n```\n\n\nThis is best from 0.15 to 0.25 so the overlap between short and long-term suggests we choose 0.25.\n\n#### n.trees\n\nWe'd like to use as few trees as we can without increasing MAPE.\n\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1500, \n    interaction.depth = 4, shrinkage = 0.25, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.83\n## mape[2] = 2\n## mape[3] = 2.06\n## mape[4] = 1.92\n## mape[5] = 1.77\n## mape[6] = 1.88\n```\n\n```\n## [1] 1.91\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 1000, \n    interaction.depth = 4, shrinkage = 0.25, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.87\n## mape[2] = 1.99\n## mape[3] = 2.05\n## mape[4] = 1.98\n## mape[5] = 1.86\n## mape[6] = 1.86\n```\n\n```\n## [1] 1.94\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 750, \n    interaction.depth = 4, shrinkage = 0.25, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.94\n## mape[2] = 1.92\n## mape[3] = 1.94\n## mape[4] = 2.08\n## mape[5] = 1.95\n## mape[6] = 1.9\n```\n\n```\n## [1] 1.95\n```\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.basic, distribution = \"gaussian\", n.trees = 500, \n    interaction.depth = 4, shrinkage = 0.25, feedforward = TRUE, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.87\n## mape[2] = 2.18\n## mape[3] = 2.03\n## mape[4] = 1.85\n## mape[5] = 2.06\n## mape[6] = 2.02\n```\n\n```\n## [1] 2\n```\n\nIt looks like the elbow in this curve is around 1000 trees.\n\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1500, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.62\n## mape[2] = 2.44\n## mape[3] = 2.49\n## mape[4] = 2.57\n## mape[5] = 2.22\n## mape[6] = 2.45\n```\n\n```\n## [1] 2.46\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.25\n## mape[2] = 2.46\n## mape[3] = 2.3\n## mape[4] = 2.44\n## mape[5] = 2.49\n## mape[6] = 2.66\n```\n\n```\n## [1] 2.44\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 750, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.71\n## mape[2] = 2.3\n## mape[3] = 2.3\n## mape[4] = 2.55\n## mape[5] = 2.44\n## mape[6] = 2.46\n```\n\n```\n## [1] 2.46\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.basic, distribution = \"gaussian\", \n    n.trees = 500, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.38\n## mape[2] = 2.5\n## mape[3] = 2.38\n## mape[4] = 2.39\n## mape[5] = 2.53\n## mape[6] = 2.62\n```\n\n```\n## [1] 2.47\n```\n\n\nIt looks like we could reasonably get away with fewer than 1000 trees for the long-term model.\nBut for consistency, let's stick with 1000.\n\n#### final settings\n\nHere's the settings that seem to work well for short and long-term models\n\n * n.trees = 1000\n * interaction.depth = 4\n * shrinkage = 0.25\n \n## Summary\n\nFor now we will use 2 models to forecast load.  The short-term model will feed forward the\nlast observed load for 12 hours.  After 12 hours we will switch to the long-term model.  Both\nmodels will use the gradient boosting trees algorithm with the settings described in the previous\nsection.\n\n\n\n## Appendix - Generating this Document\n\nIf you are in RStudio and want an HTML version of this document, just click Knit HTML above this pane.  If you want to generate the markdown for the github wiki, keep reading.\n\nFirst, configure the figure path so that the images end up in the images folder with\na relative url in \"analysis/images/\"\n```r\nrequire(knitr)\ngetwd()\nsetwd(\"/your/path/to/advanced-apps.wiki/analysis\")  # change this line to your path\nopts_knit$set(base.dir = '..')\nopts_chunk$set(fig.path = paste0(basename(getwd()), '/images/'))\n```\n\nThen you can generate the markdown for this page using the `knitr` package\n```r\nknit(\"fcu.Rmd\", output=\"Analyzing-FCU-Data-with-R.md\")\n```\n\n","markers":{"markers":{"1":{"id":1,"range":[[35,16],[35,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":24,"autoscroll":true},"deserializer":"Marker"},"2":{"id":2,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":30,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/Analyzing-FCU-Data-with-R.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ee9d2d48a4abf2bf3ef74875ec9fa95733369704","deserializer":"TextBuffer"},{"text":"\nfcu.load = function(timezone='UTC', longmont=FALSE, coalesce=mean, mean.time.offset=-1800) {\n  setwd('~/src/advanced-apps.wiki/analysis/data/fcu')\n  \n  loads = fcu.load.loads(timezone, coalesce)\n  \n  # fill in load.prev\n  loads$load.prev = apply(loads, 1, function(x) loads[(loads$time+3600)==as.POSIXct(x['time'],timezone),]$load[1])\n  \n  weathers = fcu.load.weathers(timezone, coalesce)\n  loads = merge(loads, weathers, by=\"time\")\n  \n  if (longmont) {\n    weathers = fcu.load.weathers(timezone, ext=\"_longmont.csv\")\n    colnames(weathers) = c(\"time\", \"temperature.lm\", \"dew_point.lm\")\n    loads = merge(loads, weathers, by=\"time\")\n  }\n\n  if (identical(coalesce, mean)) {\n    # offset the time in the previous hour (back 30 minutes by default)\n    loads$time = loads$time + mean.time.offset\n  }\n  loads$hour = as.POSIXlt(loads$time)$hour + as.POSIXlt(loads$time)$min/60\n  loads$wday = ((as.POSIXlt(loads$time)$wday + 6) %% 7) + 1  # put sunday at 7 so it's next to saturday\n  loads$yday = as.POSIXlt(loads$time)$yday\n  loads$day = as.Date(loads$time) - as.Date(\"2011-01-01\")\n  \n  loads$time = NULL\n  \n  loads  \n}\n\nfcu.load.loads = function(timezone, coalesce) {\n  # set working directory to wherever you have unpacked ft-collins-history-2011-2012.tar.gz\n  \n  loads = NULL\n  for (year in 2011:2013) {\n    for (month in 1:12) {\n      filename = paste0('./csvs/', month, '-', year, '.csv')\n      cat(\"loading \", filename, \"\\n\")\n      data = read.csv(filename)\n      # convert garbage characters to integer\n      if (is.factor(data$value)) {\n        data$value = as.integer(as.character(data$value))\n      }\n      # get rid of stuff that looks bad\n      data = data[!is.na(data$value) & data$value>0,]\n      \n      # ignore minutes:seconds-tz part, truncate to the hour, then add hour to get to hour-ending time\n      # also, keep times in MST to avoid hour shift at DST boundaries\n      # (considered using UTC but that would put peaks around 0300 which will probably be bad)\n      stimes = gsub('(T..):..:..(-..):(..)$', '\\\\1\\\\2\\\\3', data$collectedAt)\n      hours = strptime(stimes, \"%Y-%m-%dT%H%z\", tz=timezone)+3600\n      loads.month = aggregate(data$value, list(hours), coalesce)\n      loads = rbind(loads, loads.month)\n      rm(stimes); rm(hours) ; rm(data) ; rm(loads.month)\n    }\n  }\n  \n  # do this after looping over the data\n  colnames(loads) = c(\"time\", \"load\")\n  loads\n}\n\nfcu.load.weathers = function(timezone, coalesce, ext=\"_ft_collins.csv\") {\n  weathers = NULL\n  for (year in 2011:2013) {\n    filename = paste0('./', year, ext)\n    cat(\"loading \", filename, \"\\n\")\n    data = read.csv(filename)\n    \n    numeric_fields = c('temperature', 'dew_point', 'wind_speed', 'wind_direction', 'cloud_ceiling', 'visibility', 'pressure')\n    for (field in numeric_fields) {\n      data[field] = as.numeric(as.character(data[field][,1]))\n    }\n    \n    # ignore minutes:seconds-tz part, truncate to the hour, then add hour to get to hour-ending time\n    # also, keep times in MST to avoid hour shift at DST boundaries\n    stimes = gsub('(T..):..:..([+-]....)$', '\\\\1\\\\2', data$timestamp)\n    hours = strptime(stimes, \"%Y-%m-%dT%H%z\", tz=timezone)+3600\n    weathers.hourly = aggregate(data[,numeric_fields], list(hours), FUN=coalesce)\n    \n    # take the median sky_cover value\n    weathers.hourly$sky_cover = as.factor(levels(data$sky_cover)[aggregate(as.integer(data$sky_cover), list(hours), median)[,2]])\n    \n    weathers = rbind(weathers, weathers.hourly)\n    rm(stimes); rm(hours) ; rm(data) ; rm(weathers.hourly)\n  }\n  colnames(weathers)[1] = \"time\"\n  \n  # remove unused columns\n  weathers$visibility = NULL\n  weathers$sky_cover = NULL\n  weathers$cloud_ceiling = NULL\n  weathers$wind_direction = NULL\n  weathers$wind_speed = NULL\n  weathers$pressure = NULL\n  \n  weathers\n}\n\nlast = function(x) {\n  tail(x,1)\n}\n","markers":{"markers":{"1":{"id":1,"range":[[40,0],[40,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":10,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/fcu.R","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9b0c7fd68f60aab0b1cf2782c0343cb3230a07d9","deserializer":"TextBuffer"},{"text":"require(gbm)\nrequire(stats)\n\nload.train = function(data.train) {\n  # if/when we change the model, then we change the call here\n  # this call should return an object which can be serialized and \"responds to\" predict\n  load.gbm.dual(data=data.train)\n}\n\n\nload.gbm.dual = function(formula=load~temperature+dew_point+hour+yday+wday, data, ...) {\n  # for small data sets, may need to tweak n.minobsinnode\n  bag.fraction = 0.5\n  args = list(distribution      = \"gaussian\",\n              n.trees           = 1000,\n              bag.fraction      = bag.fraction,\n              n.minobsinnode    = min(10, as.integer(nrow(data)*bag.fraction/2)),\n              interaction.depth = 4,\n              shrinkage         = 0.25)\n  args = c(args, list(...))\n\n  # train short-term model\n  formula.short = update(terms(formula, data=data), ~.+load.prev)\n  fit.short = do.call(gbm, c(list(formula.short, data=data), args))\n  fit.short$data = NULL\n  fit.short$m = NULL\n  fit.short$call = NULL\n  fit.short$fit = NULL\n  \n  # train long-term model\n  formula.long = update(terms(formula, data=data), ~.-load.prev)\n  fit.long = do.call(gbm, c(list(formula.long, data=data), args))\n  fit.long$data = NULL\n  fit.long$m = NULL\n  fit.long$call = NULL\n  fit.long$fit = NULL\n  \n  fit = list(short = list(fit=fit.short, args=args),\n             long  = list(fit=fit.long,  args=args))\n  class(fit) = \"load.gbm.dual\"\n  return(fit)\n}\n\npredict.load.gbm.dual = function(fit, data, impute.columns=c('temperature', 'dew_point')) {\n  if (length(impute.columns) > 0) {\n    data = impute.data(data, impute.columns)\n  }\n  # use short-term model with feed-forward for the first 12 hours\n  predict.short = vector()\n  \n  data.1 = data[1,]\n  load.prev = data.1$load.prev\n  yday = data.1$yday\n  hour = data.1$hour\n\n  short = (data$yday == yday & data$hour <= hour+12) |\n    (hour+12 >= 24 & data$yday == (yday + 1) & data$hour <= (hour+12)%%24)\n  short = short & !is.na(short)\n  data.short = data[short,]\n  data.long = data[!short,]\n  \n  for (index in seq_len(nrow(data.short))) {\n    row = data.short[index,]\n    row['load.prev'] = load.prev  # feed-forward from previous prediction\n    load = do.call(predict, c(list(fit[['short']]$fit, row), fit[['short']]$args))\n    predict.short = c(predict.short, load)\n    load.prev = load\n  }\n  \n  # user long-term model for the rest of the data\n  predict.long = do.call(predict, c(list(fit[['long']]$fit, data.long), fit[['long']]$args))\n  \n  # output the combined prediction\n  c(predict.short, predict.long)\n}\n\n# fill in missing/NA values by interpolating between the non-missing values\nimpute.data = function(data, fields) {\n  data.copy = data\n  \n  # interpolate using cubic spline\n  for (field in fields) {\n    # require at least 3 values before spline fitting\n    if (sum(!is.na(data.copy[field])) > 2) {\n      interpolated = spline(data.copy[field], xout=1:nrow(data.copy), method=\"natural\")$y\n      data.copy[field] = interpolated\n    }\n  }\n\n  data.copy\n}\n","markers":{"markers":{"1":{"id":1,"range":[[50,19],[50,19]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":14,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/load.R","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4b1f9fe491085f9b442d0940f3713da475822a1a","deserializer":"TextBuffer"},{"text":"\nfcu.report = function(data, day.start = 731, train.days=425, filename = '/tmp/fcu-mapes.csv', ref.date = as.Date(\"2011-01-01\")) {\n  set.seed(314159) # so we get same results on future runs\n  mapes = mape_loop(load.gbm.dual, load~.-day, data, day.start=day.start, train.days=train.days)\n  mapes = round(mapes[,-(1:3)], 2)\n  days = as.character(ref.date + cbind(day.start:(day.start+nrow(mapes)-1)))\n  mapes = cbind(days, mapes)\n  colnames(mapes)=c(\"date\", \"today\", \"today+1\", \"today+2\", \"today+3\", \"today+4\", \"today+5\", \"today+6\")\n  write.csv(mapes, filename, row.names = FALSE, quote=c(1))\n  mapes\n}\n\nhourly_apes = function(model, formula, data.train, data.test, day.start, day.stop, hour.start=17, hour.stop=27, ...) {\n  fit = model(formula, data=data.train, ...)\n\n  data.test.days = data.test[(data.test$day >= day.start & data.test$day <= day.stop & data.test$hour >= hour.start & data.test$hour <= hour.stop) |\n    (hour.stop >= 24 & data.test$day >= (day.start+1) & data.test$day <= (day.stop+1) & data.test$hour <= hour.stop %% 24),]\n  prediction = predict(fit, data.test.days, ...)\n  data.merge = cbind(data.test.days, prediction)\n\n  y = all.vars(formula)[1]  # the name of the thing we are solving for\n\n  apes = vector('numeric')\n  for (day in day.start:day.stop) {\n    # looping over every hour ensures that we have an NA even for hours we have no prediction\n    apes.day = c()\n    for (hour in hour.start:hour.stop) {\n      data.hour = data.merge[data.merge$day==day&data.merge$hour==hour,]\n      if (nrow(data.hour) == 1) {\n        ape = as.numeric(100*abs((data.hour[y] - data.hour$prediction) / data.hour[y]))\n        apes.day = c(apes.day, ape)\n      } else {\n        apes.day = c(apes.day, NA)\n      }\n    }\n\n    apes = rbind(apes, apes.day)\n  }\n\n  # columns are hours, rows are days\n  apes\n}\n\ndaily_mapes = function(model, formula, data.train, data.test, day.start, day.stop, hour.start=17, hour.stop=27, ...) {\n  apes = hourly_apes(model, formula, data.train, data.test, day.start, day.stop, hour.start, hour.stop, ...)\n  apply(apes, 1, mean, na.rm=TRUE)\n}\n\nmape_loop = function(model, formula, data, day.start=as.integer(365*1.3), train.days = as.integer(365*1.5), forecast.days = 7, ...) {\n  total_mapes = vector()\n  for (day in day.start:(max(data$day) - forecast.days - 1)) {\n    # train on train.days of data before current day\n    data.train = data[data$day >= max(1,day-train.days) & data$day < day,]\n    # calculate mape for forecast.days after current day from 11:00 to 21:00\n    apes = hourly_apes(model, formula, data.train, data, day.start=day, day.stop=day+forecast.days-1, ...)\n    # first 3 elements are first 3 apes, then the next 7 values are mape for each forecast day\n    mapes = c(apes[1,1], apes[1,2], apes[1,3], apply(apes, 1, mean, na.rm=TRUE))\n    mapes[is.nan(mapes)]=NA\n    \n    cat(\"day[\",  day, \"] = \", mapes, \"\\n\")\n    total_mapes = rbind(total_mapes, mapes)\n  }\n  cat(\"average = \", apply(total_mapes, 2, mean, na.rm = TRUE), \"\\n\")\n  total_mapes\n}\n\n\nmodel_mape = function(model, formula, data, tdata=NULL, foldon=\"day\", K=6, normalize=FALSE, verbose=FALSE, weights=NULL, feedforward=FALSE, ...) {\n  uniques = unique(data[,foldon])\n  folds = split(sample(uniques), 1:length(uniques)%%K)\n  sape = 0\n  y = all.vars(formula)[1]  # the name of the thing we are solving for\n\n  if (is.null(tdata)) {\n    tdata = data\n  }\n\n  # normalize data between 0 and 1\n  if (normalize) {\n    ndata = sweep(data, 2, apply(data, 2, min), \"-\")\n    ndata = sweep(ndata, 2, apply(ndata, 2, max), \"/\")\n    ntdata = sweep(tdata, 2, apply(data, 2, min), \"-\")\n    ntdata = sweep(ntdata, 2, apply(ndata, 2, max), \"/\")\n    min_y = min(tdata[y])\n    scale_y = max(tdata[y]) - min_y\n  } else {\n    ndata = data\n    ntdata = tdata\n    min_y = 0\n    scale_y = 1\n  }\n  min_hour = 11\n  max_hour = 21\n\n  total_test_count = 0\n  for (fold in 1:K) {\n    test_rows = tdata[,foldon] %in% unlist(folds[fold])\n    train_rows = !(data[,foldon] %in% unlist(folds[fold]))\n\n    train_data = subset(ndata, train_rows)\n    test_data = subset(ntdata, test_rows & ntdata$hour >= min_hour & ntdata$hour <= max_hour)\n    test_data_orig = subset(tdata, test_rows & tdata$hour >= min_hour & tdata$hour <= max_hour)\n\n    if (is.vector(weights)) {\n      # for some reason, weights need to be assigned in a global environment so they're accessible\n      assign('model_mape.weights', subset(weights, !test_rows), inherits=TRUE)\n      fit = model(formula, data=train_data, weights=model_mape.weights, ...)\n      rm('model_mape.weights', inherits=TRUE)\n    } else {\n      fit = model(formula, data=train_data, ...)\n    }\n    if (feedforward) {\n      for (cur_hour in min_hour:max_hour) {\n        test_hour = subset(test_data, test_data$hour == cur_hour)\n        if (cur_hour > min_hour) {\n          #          test_hour$load.prev = apply(test_hour[,c('day', 'hour')], 1, function(x) test_data[test_data$day==x['day']&test_data$hour==(cur_hour-1),]$prediction[1])\n          test_hour$load.prev = apply(test_hour[,c('day', 'hour')], 1, function(x) test_data[test_data$day==x['day']&test_data$hour==(cur_hour-1),]$prediction[1])\n        }\n        cur_predictions = predict(fit, test_hour, distribution=\"gaussian\", n.trees=1000, interaction.depth=4, shrinkage=0.2, verbose=TRUE)\n        # put the predictions on test_data so that we can get them in the correct order later\n        test_data$prediction[test_data$hour == cur_hour] = cur_predictions\n      }\n      predictions = test_data$prediction\n    } else {\n      predictions = predict(fit, test_data, ...)\n    }\n    norm_residuals = (predictions - test_data[y])\n    # denormalize\n    residuals = norm_residuals*scale_y\n\n    # sum of absolute percentage errors for fold K\n    sape_k = sum(abs(residuals / test_data_orig[y]))\n    sape = sape + sape_k\n    test_count = nrow(test_data[y])\n    total_test_count = total_test_count + test_count\n    if (verbose) {\n      cat(\"mape[\", fold, \"] = \", round(100*sape_k/test_count,2), \"\\n\", sep=\"\")\n    }\n  }\n  # mean absolute percentage error (MAPE)\n  round(100*sape/total_test_count, 2)\n}\n","markers":{"markers":{"1":{"id":1,"range":[[108,12],[108,12]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":18,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/mape.R","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"558320568eb6a9cbdc43ef1e38e815c57c634191","deserializer":"TextBuffer"},{"text":"```{r, echo=FALSE}\n# this is hidden on the output, it just sets some defaults\nopts_chunk$set(fig.align='center')\nopts_chunk$set(fig.width=7, fig.height=7)\nopts_chunk$set(dpi = 110)\nopts_chunk$set(warning = FALSE)\nopts_chunk$set(collapse = TRUE)\npar(mar=c(5.1,4.1,2.1,2.1))\n```\n\nThe function `mape_loop` was written to generate the output needed for Fort Collins.  But it\nalso has an argument `train.days` which allows us to try to find the optimal value for the\nnumber of days to train the algorithm.  One theory is that it might be better to choose slightly\nmore than an integer multiple of year to train with so that you effectively weigh the data more\nheavily in the season you are currently in.  This will allow us to test that theory.\n\nTo explain output of `mape_loop`, all values are averages of the errors for different time period.\nThe first 3 values correspond to the first 3 hours of the estimate for a given day.  They are the\nshort-term estimates and thus we expect them to have the smallest error.  The values after that\nare the mean estimates for each day, starting with day 1.  The day 1 estimate should be the best and\nthe subsequent days should be about the same because they all use the long-term model.\n\n```{r calc-mapes, cache=TRUE}\ntrain.periods = c(15, 30, 45, 120, 210, 365-60, 365-30, 365, 365+30, 365+60, 365+90, 365+120, 365+180, 2*365-120, 2*365-60, 2*365, 2*365+30, 2*365+60, 3*365)\n\nif (!exists('mapes')) mapes = list()\n\nfor (period in train.periods) {\n  message(\"training period \", period, \":\")\n  if (is.null(mapes[[as.character(period)]])) {\n    mapes[[as.character(period)]] = mape_loop(load.gbm.dual, load~.-day, loads.basic, day.start=365*2, train.days=period)\n  }\n}\n```\n\n\n```{r plot-day-1}\n# pulls the 4th element out of each result\nhour.1 = sapply(train.periods, function(x) apply(mapes[[as.character(x)]], 2, mean, na.rm=TRUE)[1])\nhour.3 = sapply(train.periods, function(x) apply(mapes[[as.character(x)]], 2, mean, na.rm=TRUE)[3])\nday.1 = sapply(train.periods, function(x) apply(mapes[[as.character(x)]], 2, mean, na.rm=TRUE)[4])\nday.3 = sapply(train.periods, function(x) apply(mapes[[as.character(x)]], 2, mean, na.rm=TRUE)[6])\n\ndata.range = range(hour.1, hour.3, day.1, day.3)\nplot(train.periods, hour.1, col=\"red\", pch=19, type=\"p\", xlab=\"training days\", ylab=\"MAPE\", ylim = data.range)\npoints(loess.smooth(train.periods, hour.1, span=0.5), type=\"l\", col=\"red\")\n\npoints(train.periods, hour.3, col=\"grey\", pch=19, type=\"p\")\npoints(loess.smooth(train.periods, hour.3, span=0.5), type=\"l\", col=\"grey\")\n\npoints(train.periods, day.1, col=\"blue\", pch=19, type=\"p\")\npoints(loess.smooth(train.periods, day.1, span=0.5), type=\"l\", col=\"blue\")\n\npoints(train.periods, day.3, col=\"green\", pch=19, type=\"p\")\npoints(loess.smooth(train.periods, day.3, span=0.5), type=\"l\", col=\"green\")\n\nlegend(630, max(data.range), c('hour 1', 'hour 3', 'day 1', 'day 3'), col=c('red', 'grey', 'blue', 'green'), pch=c(19,19,19))\n```\n\nBased on this plot it appears that the MAPE doesn't improve much, if any beyond about 400 days.\nAlbeit small, the improvement does appear to continue for period above 2 years.  For now we\nshould train with all past data.\n\n## Appendix - Generating this Document\n\nIf you are in RStudio and want an HTML version of this document, just click Knit HTML above this pane.  If you want to generate the markdown for the github wiki, keep reading.\n\nFirst, configure the figure path so that the images end up in the images folder with\na relative url in \"analysis/images/\"\n```r\nrequire(knitr)\ngetwd()\nsetwd(\"/your/path/to/advanced-apps.wiki/analysis\")  # change this line to your path\nopts_knit$set(base.dir = '..')\nopts_chunk$set(fig.path = paste0(basename(getwd()), '/images/'))\n```\n\nThen you can generate the markdown for this page using the `knitr` package\n```r\nknit(\"mapeLoop.Rmd\", output=\"Optimizing-Number-Training-Days.md\")\n\n# if you want to get a pretty email when it's done\nsystem(\"uuencode images/plot-day-1.png mape-plot.png | mailx -s 'MAPE plot' tra@mac.com\")\n```\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":22,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/mapeLoop.Rmd","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"91710f185bc5d092bf3d6a8f1a5fe8fa1a8b1d74","deserializer":"TextBuffer"},{"text":"\n\n\nThe function `mape_loop` was written to generate the output needed for Fort Collins.  But it\nalso has an argument `train.days` which allows us to try to find the optimal value for the\nnumber of days to train the algorithm.  One theory is that it might be better to choose slightly\nmore than an integer multiple of year to train with so that you effectively weigh the data more\nheavily in the season you are currently in.  This will allow us to test that theory.\n\nTo explain output of `mape_loop`, all values are averages of the errors for different time period.\nThe first 3 values correspond to the first 3 hours of the estimate for a given day.  They are the\nshort-term estimates and thus we expect them to have the smallest error.  The values after that\nare the mean estimates for each day, starting with day 1.  The day 1 estimate should be the best and\nthe subsequent days should be about the same because they all use the long-term model.\n\n\n```r\ntrain.periods = c(15, 30, 45, 120, 210, 365 - 60, 365 - 30, 365, 365 + 30, 365 + \n    60, 365 + 90, 365 + 120, 365 + 180, 2 * 365 - 120, 2 * 365 - 60, 2 * 365, \n    2 * 365 + 30, 2 * 365 + 60, 3 * 365)\n\nif (!exists(\"mapes\")) mapes = list()\n\nfor (period in train.periods) {\n    message(\"training period \", period, \":\")\n    if (is.null(mapes[[as.character(period)]])) {\n        mapes[[as.character(period)]] = mape_loop(load.gbm.dual, load ~ . - \n            day, loads.basic, day.start = 365 * 2, train.days = period)\n    }\n}\n```\n\n```\n## training period 15:\n## training period 30:\n## training period 45:\n## training period 120:\n## training period 210:\n## training period 305:\n## training period 335:\n## training period 365:\n## training period 395:\n## training period 425:\n## training period 455:\n## training period 485:\n## training period 545:\n## training period 610:\n```\n\n```\n## day[ 730 ] =  NA NA NA NaN 3.813 1.168 1.828 1.701 2.817 1.199 \n## day[ 731 ] =  2.847 5.595 7.204 5.137 1.426 1.707 1.53 2.543 1.418 1.252 \n## day[ 732 ] =  0.3218 0.6036 0.368 0.5552 1.249 2.16 2.246 1.586 1.119 2.296 \n## day[ 733 ] =  0.02566 1.102 1.426 0.8539 2.609 3.608 1.543 1.05 2.268 0.561 \n## day[ 734 ] =  0.807 0.6376 0.5162 0.6862 2.446 1.548 0.9805 2.502 0.7115 2.022 \n## day[ 735 ] =  0.2666 0.3715 0.2778 0.8668 1.153 1.17 2.313 0.9337 1.908 3.26 \n## day[ 736 ] =  0.1657 0.07897 0.4655 0.5356 1.103 1.971 0.8246 2.212 3.1 3.345 \n## day[ 737 ] =  0.04203 0.4407 0.4444 0.7548 2.104 0.4628 2.144 3.212 4.114 3.658 \n## day[ 738 ] =  0.2801 0.8644 1.575 1.379 0.7325 2.24 3.627 4.159 3.321 4.494 \n## day[ 739 ] =  1.051 1.437 1.901 1.506 2.049 3.188 3.604 4.215 4.987 1.573 \n## day[ 740 ] =  2.299 1.85 2.726 2.196 2.994 2.467 2.691 4.799 1.356 0.9704 \n## day[ 741 ] =  2.077 2.411 2.641 2.509 3.294 2.435 5.15 1.288 0.7708 1.757 \n## day[ 742 ] =  0.6875 0.02862 0.1226 0.7724 4.154 5.405 1.102 0.5997 2.085 1.649 \n## day[ 743 ] =  0.6613 1.182 0.03622 1.262 4.525 1.383 0.6574 1.986 1.511 1.946 \n## day[ 744 ] =  0.9253 1.632 0.913 1.25 1.251 0.6065 1.493 1.493 1.43 1.155 \n## day[ 745 ] =  0.02297 0.148 0.4668 0.5411 0.8165 1.886 1.511 2.37 1.162 1.171 \n## day[ 746 ] =  0.4591 0.8404 0.4272 0.8215 1.822 1.313 3.417 1.806 0.9739 0.6749 \n## day[ 747 ] =  0.354 0.432 0.2366 1.679 1.419 2.337 1.493 0.9532 0.9895 1.114 \n## day[ 748 ] =  0.1975 0.1247 1.341 2.869 3.071 0.9735 1.03 0.7288 1.029 1.24 \n## day[ 749 ] =  0.7814 1.553 2.68 2.053 1.345 0.9614 1.009 1.381 1.202 2.909 \n## day[ 750 ] =  0.8225 1.335 0.7156 1.07 1.139 0.8638 1.044 1.08 3.004 1.332 \n## day[ 751 ] =  0.4445 0.3746 0.8281 1.095 1.097 1.21 0.8394 2.647 1.394 1.181 \n## day[ 752 ] =  0.3127 0.2555 0.6344 0.8849 1.299 0.9862 2.59 0.8061 1.268 1.419 \n## day[ 753 ] =  0.7019 0.4945 0.843 1.493 1.002 2.664 0.9053 1.135 1.564 2.552 \n## day[ 754 ] =  0.04319 0.4975 0.5932 0.5089 2.447 0.7973 0.9315 1.283 2.607 0.6663 \n## day[ 755 ] =  1.322 1.495 1.303 1.945 1.166 1.144 1.641 2.484 0.5258 1.902 \n## day[ 756 ] =  0.07114 0.1572 0.3766 1.413 1.288 1.561 2.284 0.5905 1.998 1.314 \n## day[ 757 ] =  1.086 0.3821 1.036 2.124 1.473 2.354 0.8738 1.777 1.289 3.042 \n## day[ 758 ] =  0.00397 0.006929 0.2006 1.43 2.682 0.8509 2 1.07 2.935 0.7924 \n## day[ 759 ] =  1.002 1.773 1.833 1.198 0.8716 2.156 1.074 3.036 0.5061 1.124 \n## day[ 760 ] =  0.4383 0.2105 0.407 0.7492 2.041 1.453 3.5 0.9141 0.5429 1.87 \n## day[ 761 ] =  0.08042 0.5058 0.6757 0.6207 1.042 3.03 0.4647 0.8522 1.67 1.348 \n## day[ 762 ] =  0.2025 0.1913 0.07721 1.345 2.721 0.6523 1.368 0.9663 2.085 1.301 \n## day[ 763 ] =  0.5935 1.324 2.748 3.455 0.7057 1.332 1.43 1.758 1.419 2.117 \n## day[ 764 ] =  0.1703 1.102 2.243 1.671 1.314 1.115 2.094 1.461 2.345 2.686 \n## day[ 765 ] =  0.1093 0.7083 1.125 0.8504 1.166 1.796 1.367 2.27 3.185 0.8383 \n## day[ 766 ] =  1.001 1.237 1.448 1.887 1.435 1.253 2.393 2.761 0.4932 1.745 \n## day[ 767 ] =  0.4637 0.08123 1.151 0.6693 1.104 2.229 3.122 0.7108 1.871 1.114 \n## day[ 768 ] =  0.6721 0.01953 1.436 1.997 1.823 2.947 0.706 2.195 1.194 1.67 \n## day[ 769 ] =  1.023 1.438 2.949 2.821 2.801 0.8387 1.472 0.9485 1.872 1.83 \n## day[ 770 ] =  0.9917 2.762 3.754 3.653 0.867 1.75 0.86 1.979 1.846 1.164 \n## day[ 771 ] =  0.4313 0.154 0.8954 1.043 1.295 0.8921 1.918 2 1.191 2.065 \n## day[ 772 ] =  0.8404 1.171 2.414 2.846 1.194 2.118 1.868 1.55 1.913 3.113 \n## day[ 773 ] =  0.7783 0.3253 1.096 1.608 2.141 2.301 1.386 1.85 2.729 1.455 \n## day[ 774 ] =  1.824 2.874 2.563 1.613 1.952 1.6 1.807 2.242 1.348 2.166 \n## day[ 775 ] =  1.091 2.416 3.472 1.808 1.162 1.564 2.585 1.456 2.128 1.195 \n## day[ 776 ] =  0.2521 0.1101 0.6851 1.079 1.415 3.128 1.701 2.669 1.327 1.494 \n## day[ 777 ] =  0.9223 1.641 1.388 2.175 2.56 1.696 2.704 1.629 1.755 1.496 \n## day[ 778 ] =  0.2926 0.6738 0.07519 1.069 1.541 2.237 0.8682 1.335 1.832 4.906 \n## day[ 779 ] =  0.01806 0.2739 0.3383 2.005 2.375 1.145 1.323 1.107 4.674 3.035 \n## day[ 780 ] =  0.03 1.394 2.235 1.644 1.41 1.363 1.665 5.253 2.861 1.678 \n## day[ 781 ] =  0.09703 0.06007 1.126 0.7975 1.062 1.539 5.178 2.323 1.757 3.504 \n## day[ 782 ] =  0.9 2.18 3.14 2.328 1.873 4.765 2.484 1.621 4.039 2.142 \n## day[ 783 ] =  1.809 2.002 0.7413 1.751 4.398 2.738 1.477 4.1 1.982 2.005 \n## day[ 784 ] =  2.103 3.926 4.599 3.422 2.9 1.284 4.151 2.149 1.931 1.676 \n## day[ 785 ] =  1.022 1.864 2.028 2.64 1.502 4.166 2.228 2.419 1.994 1.121 \n## day[ 786 ] =  0.4066 0.4001 0.1916 2.049 3.809 2.001 2.245 1.797 1.238 1.347 \n## day[ 787 ] =  0.6028 2.23 2.742 2.706 2.234 1.744 1.926 0.9977 1.618 1.684 \n## day[ 788 ] =  0.3372 1.221 1.687 1.805 1.824 2.373 1.204 1.275 1.248 1.443 \n## day[ 789 ] =  0.3751 0.6585 0.8652 1.552 1.199 1.32 1.402 1.29 1.17 0.7696 \n## day[ 790 ] =  0.6598 0.4103 0.7734 1.317 1.862 1.275 1.952 2.043 1.258 1.58 \n## day[ 791 ] =  0.6222 0.6042 0.5218 0.779 1.282 0.9271 1.211 1.06 1.514 6.634 \n## day[ 792 ] =  1.557 3.033 2.757 2.248 1.949 1.94 1.132 1.586 7.124 3.001 \n## day[ 793 ] =  0.399 0.4473 1.16 1.69 1.584 0.8466 1.669 6.624 3.2 2.587 \n## day[ 794 ] =  0.8903 1.314 1.592 1.563 1.198 1.327 7.054 2.489 1.904 0.9478 \n## day[ 795 ] =  0.09867 0.334 0.5088 1.439 1.165 6.925 2.982 1.684 1.085 1.107 \n## day[ 796 ] =  0.7974 1.691 1.949 1.036 6.993 3.076 1.957 1.149 1.476 1.511 \n## day[ 797 ] =  2.778 4.451 3.293 2.21 3.602 1.72 0.8197 1.02 1.171 1.085 \n## day[ 798 ] =  0.8098 0.842 1.169 0.9162 2.342 1.197 1.353 1.766 1.616 0.8714 \n## day[ 799 ] =  0.06078 0.2897 0.1159 0.7395 1.114 1.27 1.3 1.022 0.7754 2.405 \n## day[ 800 ] =  0.85 1.679 1.083 1.62 1.169 1.81 1.356 0.8756 2.248 1.424 \n## day[ 801 ] =  0.5722 0.5567 0.9936 1.188 2.222 1.534 1.393 2.468 1.719 2.98 \n## day[ 802 ] =  1.089 0.8945 0.8272 1.424 1.547 0.889 2.598 1.314 3.685 1.072 \n## day[ 803 ] =  0.9227 1.59 1.369 1.736 0.82 2.382 1.595 2.885 1.127 2.071 \n## day[ 804 ] =  0.1546 0.7763 1.288 1.412 2.296 1.052 3.448 1.065 1.281 1.098 \n## day[ 805 ] =  0.4672 0.01951 0.007031 1.37 1.158 2.333 0.7446 1.155 1.34 2.525 \n## day[ 806 ] =  0.6192 0.06284 0.2399 0.8326 2.346 0.6135 1.218 1.137 1.667 0.9184 \n## day[ 807 ] =  0.2842 0.1737 0.5747 0.8539 0.8474 1.352 1.421 2.14 0.3577 1.392 \n## day[ 808 ] =  0.2967 0.05512 0.1276 0.5711 1.083 1.319 2.086 0.4376 1.367 2.537 \n## day[ 809 ] =  1.352 1.26 0.4598 1.723 1.434 1.154 1.918 2.016 2.448 0.6157 \n## day[ 810 ] =  1.027 2.578 0.2319 2.358 1.304 1.43 1.529 2.326 1.009 1.94 \n## day[ 811 ] =  0.8363 0.3983 0.04497 1.025 1.212 2.327 2.345 0.8292 1.673 1.96 \n## day[ 812 ] =  0.4568 0.1296 0.005019 0.1971 2.35 2.559 0.7831 1.823 1.726 0.9702 \n## day[ 813 ] =  1.398 2.247 2.596 3.38 2.421 0.9203 1.948 1.653 1.143 5.178 \n## day[ 814 ] =  1.161 2.136 2.497 1.588 0.9454 2.181 2.229 1.173 5.022 0.955 \n## day[ 815 ] =  0.6741 1.268 1.893 1.147 2.077 1.706 1.254 5.997 0.6934 3.438 \n## day[ 816 ] =  0.2244 0.1466 0.36 0.9485 1.628 1.104 5.669 0.6081 3.292 0.8415 \n## day[ 817 ] =  0.5616 0.9212 0.836 1.808 1.092 5.355 0.5564 3.084 0.7074 0.7532 \n## day[ 818 ] =  1.076 0.2052 0.584 0.9049 6.105 0.8344 2.445 0.911 0.9897 0.9998 \n## day[ 819 ] =  1.461 2.8 5.647 5.827 0.7443 3.433 1.081 1.269 1.394 1.072 \n## day[ 820 ] =  0.4858 0.2802 0.08579 1.042 2.611 0.7447 0.8031 0.9002 1.123 2.374 \n## day[ 821 ] =  1.422 2.268 2.978 3.561 0.92 0.6773 0.991 1.046 2.28 6.468 \n## day[ 822 ] =  0.5285 0.7188 1.114 1.127 1.298 0.7525 0.6988 1.813 4.495 4.549 \n## day[ 823 ] =  0.01103 0.7543 1.392 1.121 0.9136 0.7026 3.336 6.956 3.403 1.654 \n## day[ 824 ] =  0.3307 0.06482 0.418 1.035 0.8509 2.756 4.993 3.5 1.473 3.187 \n## day[ 825 ] =  0.6636 0.2094 0.9875 0.8834 2.509 4.814 3.537 1.067 3.079 1.634 \n## day[ 826 ] =  0.7441 1.218 0.7629 2.295 6.289 3.969 1.549 3.33 1.737 NaN \n## day[ 827 ] =  0.3199 0.21 0.4036 1.074 3.997 1.803 2.848 1.676 NaN 2.34 \n## day[ 828 ] =  1.956 2.554 1.359 2.57 2.245 2.784 1.753 NaN 2.69 2.038 \n## day[ 829 ] =  0.9225 1.79 1.985 1.812 2.594 1.54 NaN 2.212 0.8852 3.205 \n## day[ 830 ] =  0.4926 0.7348 0.7096 1.099 1.353 NaN 1.75 1.108 2.765 1.409 \n## day[ 831 ] =  0.2057 0.2301 0.3939 0.7476 NaN 2.979 1.948 3.124 1.315 3.324 \n## day[ 832 ] =  NA NA NA NaN 1.859 1.362 2.148 1.307 3.798 1.537 \n## day[ 833 ] =  NA NA NA 2.04 1.153 3.16 1.553 3.065 1.477 1.409 \n## day[ 834 ] =  1.007 1.505 2.043 2.093 2.397 1.556 3.771 1.465 1.458 2.087 \n## day[ 835 ] =  0.7891 1.438 2.013 1.989 1.544 3.54 1.577 1.359 1.975 1.079 \n## day[ 836 ] =  0.3588 0.008691 0.3141 1.283 4.316 1.541 1.288 1.582 0.7065 5.291 \n## day[ 837 ] =  0.4729 1.365 1.85 2.791 1.191 1.344 1.902 1.155 4.248 1.676 \n## day[ 838 ] =  0.8583 1.483 0.3618 1.054 1.215 1.906 0.9494 4.514 1.195 3.632 \n## day[ 839 ] =  1.015 1.92 2.652 1.854 1.674 1.051 4.185 1.808 4.69 2.591 \n## day[ 840 ] =  0.5781 0.7747 0.04382 1.097 1.041 4.35 1.383 3.885 2.457 2.923 \n## day[ 841 ] =  1.637 2.804 4.354 3.321 4.114 1.69 4.29 2.783 2.487 3.711 \n## day[ 842 ] =  0.7679 1.322 1.793 3.518 1.562 4.238 2.226 2.401 2.945 0.8618 \n## day[ 843 ] =  0.7644 1.396 1.489 1.67 3.739 2.301 2.766 3.627 0.9316 1.465 \n## day[ 844 ] =  0.9808 2.022 2.074 3.095 2.349 1.666 2.421 0.5437 1.421 3.549 \n## day[ 845 ] =  0.614 0.7392 0.02873 0.9156 2.745 5.02 0.3522 1.611 4.054 2.585 \n## day[ 846 ] =  1.142 2.244 2.531 1.268 2.848 0.2765 1.552 2.936 2.721 2.153 \n## day[ 847 ] =  0.8387 0.6969 1.719 1.316 0.3549 1.619 2.918 2.569 2.95 1.693 \n## day[ 848 ] =  0.8194 1.488 NA 1.154 1.351 3.174 2.665 2.23 1.52 1.097 \n## day[ 849 ] =  0.02667 0.1899 0.4334 1.099 3.24 3.074 2.374 1.398 0.824 1.165 \n## day[ 850 ] =  0.3738 0.6068 0.6754 1.7 3.102 2.203 1.42 0.8125 1.615 1.246 \n## day[ 851 ] =  0.4985 0.6031 0.5261 1.547 2.313 1.308 0.8932 1.41 1.101 2.378 \n## day[ 852 ] =  0.3082 1.084 1.59 2.269 1.496 0.8159 1.859 1.17 1.886 1.216 \n## day[ 853 ] =  0.9074 1.053 1.616 1.039 1.153 1.135 1.45 2.084 1.286 3.059 \n## day[ 854 ] =  0.8245 0.7632 0.7538 1.284 1.122 1.219 1.922 1.398 2.265 2.317 \n## day[ 855 ] =  0.05507 0.03703 0.004205 0.7591 1.047 1.486 1.689 2.1 2.925 6.417 \n## day[ 856 ] =  0.2699 0.1238 0.01502 2.052 2.122 1.227 2.618 1.989 4.639 2.526 \n## day[ 857 ] =  0.01462 0.344 0.5114 1.175 0.9808 2.127 2.793 4.532 2.137 3.459 \n## day[ 858 ] =  0.1732 0.2309 1.371 1.198 2.742 2.612 5.6 1.475 2.175 4.156 \n## day[ 859 ] =  0.4451 0.01161 0.275 2.535 3.527 5.149 2.081 2.759 4.389 2.297 \n## day[ 860 ] =  0.1529 0.5944 1.179 1.536 4.984 1.672 1.869 3.673 2.47 4.142 \n## day[ 861 ] =  2.686 2.761 2.911 1.755 2.841 3.249 4.655 2.353 4.992 3.163 \n## day[ 862 ] =  2.871 3.31 3.546 2.334 2.753 4.521 2.708 4.669 3.763 1.788 \n## day[ 863 ] =  0.7936 2.61 3.446 1.646 4.195 2.384 4.761 4.108 1.719 1.203 \n## day[ 864 ] =  1.118 1.028 0.7994 0.8441 2.208 4.191 3.515 2.04 1.403 1.851 \n## day[ 865 ] =  0.9568 2.15 2.057 1.535 3.8 3.095 1.031 1.347 1.739 1.144 \n## day[ 866 ] =  0.03367 0.5001 2.249 1.693 2.924 1.304 1.577 1.658 0.9728 1.428 \n## day[ 867 ] =  0.2583 0.02096 0.3854 1.964 1.513 1.455 1.631 1.226 1.46 3.06 \n## day[ 868 ] =  0.1343 0.1017 0.1209 0.9597 1.333 1.608 0.9516 1.155 2.963 NaN \n## day[ 869 ] =  0.2855 0.5201 0.947 1.265 2.356 1.039 2.204 4.1 NaN NaN \n## day[ 870 ] =  1.165 1.716 1.765 2.077 1.133 1.254 1.834 NaN NaN NaN \n## day[ 871 ] =  1.002 0.8939 1.365 1.681 1.527 3.809 NaN NaN NaN 3.843 \n## day[ 872 ] =  0.8725 0.6129 0.8917 1.785 3.6 NaN NaN NaN 3.628 1.406 \n## day[ 873 ] =  0.5854 1.233 1.962 1.736 NaN NaN NaN 3.928 1.961 1.593 \n## day[ 874 ] =  NA NA NA NaN NaN NaN 4.311 1.192 1.243 4.251 \n## day[ 875 ] =  NA NA NA NaN NaN 3.323 1.158 1.502 4.542 NaN \n## day[ 876 ] =  NA NA NA NaN 4.35 1.423 0.6532 4.31 NaN NaN \n## day[ 877 ] =  1.54 3.065 3.995 3.913 2.155 1.258 6.336 NaN NaN NaN \n## day[ 878 ] =  1.392 1.755 1.338 1.711 1.759 3.29 NaN NaN NaN NaN \n## day[ 879 ] =  0.3212 0.04994 0.06079 0.144 3.66 NaN NaN NaN NaN NaN \n## day[ 880 ] =  NA NA NA 2.603 NaN NaN NaN NaN NaN 5.767 \n## day[ 881 ] =  NA NA NA NaN NaN NaN NaN NaN 0.8615 5.244 \n## day[ 882 ] =  NA NA NA NaN NaN NaN NaN 1.047 4.643 6.977 \n## day[ 883 ] =  NA NA NA NaN NaN NaN 0.9773 6.236 7.608 NaN \n## day[ 884 ] =  NA NA NA NaN NaN 0.7855 5.789 8.01 NaN 5.774 \n## day[ 885 ] =  NA NA NA NaN 1.086 5.614 6.937 NaN 3.825 2.995 \n## day[ 886 ] =  0.8348 1.316 1.503 1.036 5.602 7.432 NaN 4.811 3.028 4.259 \n## day[ 887 ] =  1.389 2.624 2.468 1.197 7.222 NaN 4.209 2.892 5.649 2.248 \n## day[ 888 ] =  1.691 1.94 1.805 2.595 NaN 4.464 3.284 3.798 2.839 2.972 \n## day[ 889 ] =  NA NA NA NaN 2.215 2.139 4.073 2.678 2.866 1.746 \n## day[ 890 ] =  1.395 0.3579 0.8773 0.9925 2.257 3.215 3.131 2.134 2.064 3.454 \n## day[ 891 ] =  0.2303 0.3349 1.818 1.478 3.263 2.752 2.902 2.127 3.446 2.768 \n## day[ 892 ] =  1.197 1.576 2.903 3.956 2.449 3.145 1.733 2.742 3.235 2.583 \n## day[ 893 ] =  0.5934 2.268 3.673 1.928 2.857 2.492 2.889 3.24 2.54 8.159 \n## day[ 894 ] =  1.568 1.361 1.063 1.713 1.836 3.274 3.581 2.179 8.598 2.2 \n## day[ 895 ] =  0.2052 0.0723 0.1551 2.218 2.915 3.751 2.608 8.249 2.521 2.112 \n## day[ 896 ] =  3.717 7.234 10 7.312 4.2 2.28 7.953 3.276 2.564 2.297 \n## day[ 897 ] =  2.884 4.218 4.507 3.044 2.261 9.027 2.515 2.555 2.098 6.539 \n## day[ 898 ] =  0.8548 2.698 2.972 1.975 8.656 2.817 2.501 2.151 6.687 5.357 \n## day[ 899 ] =  1.618 2.046 2.151 1.274 2.902 2.384 2.593 7.612 5.922 2.941 \n## day[ 900 ] =  0.2443 1.623 1.78 0.975 2.448 1.876 5.826 5.774 2.526 1.741 \n## day[ 901 ] =  1.561 2.314 1.49 1.035 1.908 5.528 5.693 2.622 1.954 3.092 \n## day[ 902 ] =  0.6946 1.172 3.227 2.108 5.125 6.475 2.765 1.798 3.448 NaN \n## day[ 903 ] =  0.1622 1.12 0.9471 1.442 5.693 2.162 2.513 2.727 NaN NaN \n## day[ 904 ] =  1.38 0.3911 0.6391 1.482 3.262 1.699 3.469 NaN NaN NaN \n## day[ 905 ] =  0.4862 2.322 1.551 1.803 1.835 3.371 NaN NaN NaN 1.87 \n## day[ 906 ] =  0.7697 0.4778 0.06252 1.162 3.078 NaN NaN NaN 2.257 3.308 \n## day[ 907 ] =  0.6545 0.5979 0.2196 0.7224 NaN NaN NaN 2.257 3.495 5.377 \n## day[ 908 ] =  NA NA NA NaN NaN NaN 2.887 3.434 5.353 8.641 \n## day[ 909 ] =  NA NA NA NaN NaN 2.807 3.705 5.942 7.737 4.91 \n## day[ 910 ] =  NA NA NA NaN 3.793 4.259 5.202 8.332 5.538 1.527 \n## day[ 911 ] =  NA NA 7.282 2.814 4.893 6.438 8.632 4.682 1.502 NaN \n## day[ 912 ] =  1.432 2.01 0.1624 1.079 6.164 8.87 4.774 1.863 NaN NaN \n## day[ 913 ] =  0.9907 0.9663 2.161 2.808 8.256 5.233 2.135 NaN NaN 2.476 \n## day[ 914 ] =  3.611 3.899 3.595 6.016 3.58 2.099 NaN NaN 2.921 3.589 \n## day[ 915 ] =  0.4891 1.073 1.523 2.221 1.496 NaN NaN 2.373 4.562 4.211 \n## day[ 916 ] =  1.758 0.6065 0.4714 1.829 NaN NaN 3.204 4.497 3.944 4.738 \n## day[ 917 ] =  NA NA NA NaN NaN 5.766 4.296 4.385 4.177 1.238 \n## day[ 918 ] =  NA NA NA NaN 5.136 3.988 4.031 3.495 1.564 3.087 \n## day[ 919 ] =  11.57 10.97 9.458 6.795 4.363 4.117 3.35 4.084 2.84 3.195 \n## day[ 920 ] =  1.988 1.321 0.0668 1.285 4.142 2.67 3.289 5.447 3.263 2.928 \n## day[ 921 ] =  0.7254 2.49 3.414 1.489 2.849 1.795 3.622 4.255 2.486 1.631 \n## day[ 922 ] =  0.3861 0.6441 1.759 2.327 2.555 6.191 3.711 2.815 2.543 2.422 \n## day[ 923 ] =  0.4001 2.456 4.333 3.443 2.202 3.624 3.107 2.449 3.058 1.896 \n## day[ 924 ] =  NA NA NA 1.49 2.598 2.392 2.055 3.104 3.054 4.593 \n## day[ 925 ] =  0.8149 1.969 1.64 1.273 2.51 2.347 2.341 4.287 3.35 7.039 \n## day[ 926 ] =  1.442 2.606 2.472 2.101 2.458 2.63 3.569 4.178 8.563 2.543 \n## day[ 927 ] =  1.501 1.849 0.04233 2.304 2.671 2.106 3.886 6.623 3.718 1.595 \n## day[ 928 ] =  0.3369 0.3478 0.6624 4.106 2.892 4.084 7.339 2.977 1.192 4.029 \n## day[ 929 ] =  1.213 1.68 0.2503 1.775 4.2 8.901 3.483 1.889 3.982 11.46 \n## day[ 930 ] =  2.264 4.588 6.519 4.465 6.397 2.835 1.048 3.544 9.696 3.437 \n## day[ 931 ] =  0.9754 0.7068 0.9098 1.202 2.354 0.7794 4.221 9.438 3.47 1.645 \n## day[ 932 ] =  1.281 1.465 1.713 1.484 0.5567 4.116 9.901 3.48 2.534 11.2 \n## day[ 933 ] =  0.5185 1.253 0.07193 0.8746 3.757 9.504 4.076 1.802 10.08 10.28 \n## day[ 934 ] =  0.5807 0.1921 0.7887 3.014 10.17 4.01 2.058 11.03 8.881 3.97 \n## day[ 935 ] =  3.798 2.963 4.277 4.134 3.216 2.148 11.86 9.626 3.86 2.846 \n## day[ 936 ] =  1.157 1.431 0.8047 1.959 1.482 11.34 9.425 4.499 2.75 3.871 \n## day[ 937 ] =  1.311 0.9844 0.3989 1.384 10.58 9.699 4.453 2.623 3.557 2.329 \n## day[ 938 ] =  1.054 2.267 3.887 2.734 8.935 4.481 2.757 4.313 2.328 5.356 \n## day[ 939 ] =  0.6983 1.847 2.601 3.184 4.46 2.781 4.219 2.532 4.922 2.543 \n## day[ 940 ] =  1.45 1.964 1.895 0.9845 1.992 3.637 2.399 4.995 2.018 2.218 \n## day[ 941 ] =  0.5597 0.773 1.011 1.352 4.125 2.401 3.66 3.388 1.954 3.471 \n## day[ 942 ] =  0.5268 0.1726 2.27 2.069 2.715 3.264 3.586 2.236 2.391 8.971 \n## day[ 943 ] =  0.8422 0.6415 1.545 1.457 5.265 2.169 1.983 2.483 7.586 5.411 \n## day[ 944 ] =  0.07116 1.128 0.1982 1.713 2.039 2.227 2.42 7.894 4.819 5.494 \n## day[ 945 ] =  0.3884 1.724 2.957 1.473 2.04 2.692 10.87 8.204 5.783 10.47 \n## day[ 946 ] =  0.9626 1.316 2.52 2.019 3.026 8.525 4.17 5.462 10.29 4.82 \n## day[ 947 ] =  0.8516 1.213 1.344 2.323 9.211 6.263 4.885 9.399 4.995 1.34 \n## day[ 948 ] =  0.5638 1.625 3.234 3.163 4.661 4.986 9.687 5.107 1.275 2.792 \n## day[ 949 ] =  NA NA 0.8144 1.599 4.959 10.15 6.072 2.758 2.378 1.404 \n## day[ 950 ] =  0.5656 0.6782 0.6505 2.627 9.655 4.789 2.2 2.936 1.389 2.933 \n## day[ 951 ] =  1.038 2.353 4.235 5.581 5.786 1.278 2.369 1.457 2.821 1.475 \n## day[ 952 ] =  1.862 3.533 4.233 2.192 2.485 2.132 1.949 2.982 2.212 3.873 \n## day[ 953 ] =  0.4071 0.8317 2.244 1.634 2.463 1.746 3.134 2.798 5.686 4.082 \n## day[ 954 ] =  0.5563 2.138 1.894 1.824 1.887 2.355 1.478 5.231 4.088 5.434 \n## day[ 955 ] =  0.4101 0.08113 1.079 1.392 2.737 1.487 4.673 4.351 6.329 5.461 \n## day[ 956 ] =  0.09178 1.015 0.9934 0.5239 2.04 6.164 4.178 5.777 6.138 9.471 \n## day[ 957 ] =  0.9656 1.974 0.2503 1.189 5.306 4.907 6.755 7.3 10.55 4.941 \n## day[ 958 ] =  1.095 0.794 0.5273 1.743 3.545 5.813 6.369 10.92 5.869 5.075 \n## day[ 959 ] =  0.2453 1.254 5.082 3.717 4.081 5.685 10.44 4.711 4.063 0.8687 \n## day[ 960 ] =  0.2922 0.3826 0.00746 1.537 5.714 9.469 4.311 4.338 1.848 1.595 \n## day[ 961 ] =  1.48 0.2326 0.5908 1.573 8.744 4.158 3.645 1.765 2.844 4.481 \n## day[ 962 ] =  0.6097 1.407 1.859 1.276 3.124 3.097 1.344 2.041 3.432 5.46 \n## day[ 963 ] =  1.514 1.11 0.3609 1.587 2.404 1.019 1.957 2.467 3.719 5.05 \n## day[ 964 ] =  0.7647 0.8573 1.661 1.802 1.914 1.594 3.201 4.118 5.112 2.877 \n## day[ 965 ] =  0.07239 1.435 1.831 1.71 3.211 3.738 4.781 5.676 2.776 1.802 \n## day[ 966 ] =  0.4445 0.4376 0.7602 0.8771 4.536 5.365 5.696 3.523 1.617 4.714 \n## day[ 967 ] =  NA 8.02 5.73 2.63 3.938 4.913 3.152 1.527 5.207 6.391 \n## day[ 968 ] =  0.8691 0.5062 0.3503 0.9215 4.389 4.058 1.66 5.506 5.655 5.158 \n## day[ 969 ] =  0.241 0.2848 0.1918 1.746 3.366 1.819 5.684 5.602 5.701 3.322 \n## day[ 970 ] =  0.4882 0.6312 0.7196 1.202 2.059 5.081 6.798 4.659 2.884 3.42 \n## day[ 971 ] =  0.1078 0.2553 0.2472 1.274 4.456 4.536 4.962 3.349 4.779 2.569 \n## day[ 972 ] =  0.1048 1.845 4.454 5.448 6.348 3.472 3.288 4.67 3.039 8.818 \n## day[ 973 ] =  1.39 0.7971 0.4006 1.982 4.788 3.096 4.791 3.404 9.322 12.26 \n## day[ 974 ] =  0.08443 0.5765 0.5276 1.439 5.028 4.952 3.337 9.397 11.73 9.409 \n## day[ 975 ] =  0.205 0.7192 2.115 2.908 6.126 5.619 10.19 13.53 10.08 8.036 \n## day[ 976 ] =  1.034 0.05042 0.5475 1.56 1.791 8.298 11.98 8.929 9.148 2.709 \n## day[ 977 ] =  1.042 2.855 3.65 1.681 7.754 11.8 8.933 4.935 3.823 9.106 \n## day[ 978 ] =  1.896 2.826 4.336 3.224 12.2 9.608 7.663 4.231 7.495 8.942 \n## day[ 979 ] =  1.744 2.141 2.572 4.117 6.296 6.172 4.619 8.996 10.97 11.03 \n## day[ 980 ] =  1.109 0.5752 1.135 1.503 6.156 4.161 8.669 9.442 9.777 2.712 \n## day[ 981 ] =  0.5509 1.681 1.815 1.405 4.363 11.07 12.64 11.97 2.155 2.979 \n## day[ 982 ] =  0.9705 2.2 2.699 1.946 9.055 10 8.751 2.381 3.322 5.866 \n## day[ 983 ] =  1.534 1.656 2.677 2.024 6.238 7.832 2.06 2.811 6.057 3.278 \n## day[ 984 ] =  1.138 3.66 5.545 3.738 7.596 2.354 4.74 5.539 5.206 2.172 \n## day[ 985 ] =  0.8917 1.539 2.2 3.227 2.153 2.229 4.12 3.857 1.608 1.208 \n## day[ 986 ] =  0.7128 1.679 0.8146 0.8487 2.689 3.596 3.395 1.307 1.176 1.999 \n## day[ 987 ] =  2.223 3.641 3.751 2.484 2.989 3.609 1.831 1.335 3.039 4.62 \n## day[ 988 ] =  0.1798 0.4412 1.174 1.401 2.854 0.9008 1.659 2.379 4.948 1.835 \n## day[ 989 ] =  1.379 1.198 0.8234 1.585 1.667 1.362 1.762 3.538 2.022 2.181 \n## day[ 990 ] =  NA NA NA 3.583 1.492 1.591 2.985 1.514 1.484 2.347 \n## day[ 991 ] =  0.4328 1.754 2.64 1.807 1.845 4.607 2.066 1.517 3.071 4.431 \n## day[ 992 ] =  1.544 1.733 2.93 2.338 4.356 1.472 1.177 3.115 4.155 0.9067 \n## day[ 993 ] =  0.1289 0.03363 0.4686 1.825 2.129 1.155 2.926 4.12 0.5639 1.283 \n## day[ 994 ] =  1.48 1.088 2.87 1.832 1.448 2.511 3.405 0.638 0.8547 2.069 \n## day[ 995 ] =  0.6194 0.3236 0.4049 0.5677 1.857 3.378 1.014 1.274 2.325 1.445 \n## day[ 996 ] =  0.9416 0.7579 0.6665 0.7546 4.197 0.6418 1.313 1.955 2.112 4.602 \n## day[ 997 ] =  1.069 1.803 0.7938 0.9041 0.7908 1.17 1.7 1.902 4.568 0.9285 \n## day[ 998 ] =  1.856 2.095 2.789 2.444 1.671 2.309 1.267 5.018 1.335 1.275 \n## day[ 999 ] =  0.1464 0.1504 0.7546 0.8975 1.943 1.562 5.3 0.8698 1.323 1.096 \n## day[ 1000 ] =  0.3041 1.185 1.913 1.292 1.292 4.217 1.011 1.031 1.017 1.312 \n## day[ 1001 ] =  0.5508 0.137 1.12 1.301 5.255 1.557 1.741 1.373 1.249 1.447 \n## day[ 1002 ] =  0.09697 0.1675 0.6605 2.243 1.383 1.6 0.8527 1.357 1.226 1.032 \n## day[ 1003 ] =  0.9976 1.581 2.022 2.139 0.9927 1.246 1.749 1.587 0.8195 1.859 \n## day[ 1004 ] =  1.135 1.021 0.5131 0.7758 1.323 1.224 1.473 0.6521 1.005 1.143 \n## day[ 1005 ] =  0.4419 0.5029 0.6818 1.063 1.137 1.145 1.078 1.305 1.139 0.782 \n## day[ 1006 ] =  0.2287 0.7214 0.7919 1.59 1.297 0.9448 1.196 1.136 0.785 0.9653 \n## day[ 1007 ] =  0.4654 0.7497 1.839 0.772 0.8785 1.736 1.57 0.6103 1.094 1.107 \n## day[ 1008 ] =  0.3559 0.1529 0.8279 0.5413 1.24 0.8442 0.7123 1.317 1.539 1.48 \n## day[ 1009 ] =  0.04838 0.2463 0.4936 0.5445 1.117 0.9334 1.141 1.222 1.86 1.191 \n## day[ 1010 ] =  0.468 0.004944 0.3249 0.6069 0.8151 1.295 1.154 1.36 1.144 1.669 \n## day[ 1011 ] =  0.09906 0.1728 0.691 0.9205 1.514 1.24 1.43 1.507 1.188 NaN \n## day[ 1012 ] =  0.1547 0.4568 0.7953 1.111 1.375 1.647 1.445 2.024 NaN 0.6584 \n## day[ 1013 ] =  0.3572 0.9367 0.7008 1.271 1.413 0.8345 1.489 NaN 0.6201 1.125 \n## day[ 1014 ] =  1.728 1.927 3.034 2.128 1.255 1.758 NaN 0.6158 1.178 1.685 \n## day[ 1015 ] =  1.646 1.328 0.9479 1.984 1.635 NaN 0.5426 0.9895 1.444 1.488 \n## day[ 1016 ] =  0.1714 1.009 0.6414 0.8966 NaN 0.9108 1.15 1.532 1.6 5.533 \n## day[ 1017 ] =  NA NA NA NaN 1.604 0.7682 1.391 1.33 5.101 1.526 \n## day[ 1018 ] =  1.238 1.321 1.864 1.772 1.234 1.521 1.437 6.21 1.295 1.264 \n## day[ 1019 ] =  1.389 1.463 2.133 1.55 1.677 1.482 5.887 1.41 1.964 2.212 \n## day[ 1020 ] =  0.1128 1.178 0.7198 0.7864 1.447 5.722 1.919 1.241 1.682 1.529 \n## day[ 1021 ] =  0.1488 0.04192 0.05386 0.5937 5.411 1.479 1.268 1.782 1.626 1.058 \n## day[ 1022 ] =  1.989 3.09 4.004 4.655 1.16 1.995 1.996 1.658 0.9747 NaN \n## day[ 1023 ] =  0.08489 0.6356 0.7224 1.142 1.572 2.416 1.628 0.8794 NaN NaN \n## day[ 1024 ] =  0.08957 0.116 0.01943 0.6322 2.462 1.713 0.7159 NaN NaN NaN \n## day[ 1025 ] =  0.2427 0.3769 0.7418 1.349 1.937 1.297 NaN NaN NaN 1.209 \n## day[ 1026 ] =  1.609 2.966 3.239 2.015 1.187 NaN NaN NaN 1.366 1.088 \n## day[ 1027 ] =  0.05799 0.6757 1.088 0.6806 NaN NaN NaN 1.164 0.7772 1.047 \n## day[ 1028 ] =  NA NA NA NaN NaN NaN 1.166 0.8268 0.8657 1.101 \n## day[ 1029 ] =  NA NA NA NaN NaN 1.537 1.292 1.383 1.316 1.71 \n## day[ 1030 ] =  NA NA NA NaN 1.312 0.9223 0.9107 1.021 1.642 1.772 \n## day[ 1031 ] =  0.6949 0.8038 1.256 1.504 0.8153 1.261 1.038 1.916 1.741 2.74 \n## day[ 1032 ] =  0.02279 0.2782 0.6205 1.201 0.8954 1.239 1.951 1.545 2.792 1.307 \n## day[ 1033 ] =  1.168 1.83 2.072 2.126 1.433 1.799 1.692 2.178 1.36 2.421 \n## day[ 1034 ] =  0.5024 0.8182 0.3686 1.219 1.776 1.94 3.189 1.604 2.885 1.768 \n## day[ 1035 ] =  0.4689 0.9911 2.103 2.552 1.2 3.415 2.027 3.335 2.049 3.478 \n## day[ 1036 ] =  0.257 0.5853 0.2285 1.983 2.821 1.968 3.164 2.034 3.605 1.907 \n## day[ 1037 ] =  0.4165 1.113 1.162 3.163 0.9746 2.24 1.983 3.167 1.71 2.189 \n## day[ 1038 ] =  0.02443 0.1562 0.7981 1.416 2.811 1.88 3.369 1.635 1.881 2.538 \n## day[ 1039 ] =  0.6102 1.018 0.1533 1.151 1.794 3.1 1.658 1.696 2.696 1.432 \n## day[ 1040 ] =  0.5209 0.3941 1.174 1.464 3.119 1.676 2.403 2.824 1.563 1.226 \n## day[ 1041 ] =  0.3384 0.1705 0.1935 0.8637 1.923 2.288 2.938 1.36 0.8853 1.666 \n## day[ 1042 ] =  0.7097 0.5169 0.322 0.6879 1.939 3.042 1.42 1.113 1.672 1.327 \n## day[ 1043 ] =  0.8501 1.032 1.279 0.8634 2.061 1.126 1.184 1.754 1.459 19.42 \n## day[ 1044 ] =  0.4884 0.04332 0.7265 1.177 1.065 0.7509 1.951 1.372 20.21 20.63 \n## day[ 1045 ] =  1.921 3.314 3.547 2.694 1.528 1.36 1.05 19.81 19.47 11.25 \n## day[ 1046 ] =  0.04244 0.3896 0.5448 1.111 1.281 1.468 19.3 19.74 10.93 2.085 \n## day[ 1047 ] =  0.2159 0.1392 0.3724 0.7301 1.21 19.95 19.77 11.54 1.996 3.362 \n## day[ 1048 ] =  0.06165 0.1738 0.04209 1.315 21.17 20.86 11.7 1.912 3.333 2.924 \n## day[ 1049 ] =  4.293 6.734 8.39 16.24 20.71 11.16 2.05 3.433 2.149 4.766 \n## day[ 1050 ] =  1.851 2.973 3.665 11.13 10.63 2.246 3.413 4.503 5.229 10.21 \n## day[ 1051 ] =  3.919 6.516 8.969 6.006 3.043 3.617 4.798 4.067 10.75 8.533 \n## day[ 1052 ] =  0.1131 1.016 1.535 1.946 3.417 4.29 5.855 12 8.345 2.518 \n## day[ 1053 ] =  1.706 2.197 2.265 1.798 1.763 2.393 9.906 8.631 1.466 1.83 \n## day[ 1054 ] =  0.8445 2.157 2.65 3.305 2.723 10.01 7.78 1.136 1.179 3.439 \n## day[ 1055 ] =  0.9041 0.6943 1.035 1.191 7.777 7.266 1.676 1.052 3.372 17.19 \n## day[ 1056 ] =  1.373 1.175 0.1384 1.152 6.93 1.799 1.597 3.679 17.86 9.863 \n## day[ 1057 ] =  0.2544 1.199 1.633 2.37 1.522 1.787 5.046 17.76 9.21 4.353 \n## day[ 1058 ] =  0.3796 0.4458 0.1815 0.5015 1.379 3.544 16.85 9.767 4.751 1.3 \n## day[ 1059 ] =  0.4229 1.728 2.439 2.986 3.658 16.75 9.61 4.605 1.019 0.9907 \n## day[ 1060 ] =  0.4188 0.5349 0.007434 1.792 17.32 8.824 4.071 1.1 1.318 2.424 \n## day[ 1061 ] =  0.4516 0.6907 3.235 13.17 8.966 4.003 1.987 1.568 2.367 1.152 \n## day[ 1062 ] =  1.742 2.367 2.417 3.661 4.849 1.06 1.756 2.086 1.429 2.784 \n## day[ 1063 ] =  0.07659 1.071 1.556 3.349 0.7182 1.474 1.903 2.427 2.502 2.94 \n## day[ 1064 ] =  1.046 1.806 2.971 3.312 1.31 2.025 1.347 1.832 1.694 3.991 \n## day[ 1065 ] =  0.4264 0.3676 0.2381 0.6253 2.002 1.647 1.362 1.786 4.389 3.007 \n## day[ 1066 ] =  0.257 0.6407 0.05694 1.584 1.519 1.836 1.525 3.953 2.656 1.503 \n## day[ 1067 ] =  0.6181 1.272 0.0627 0.6896 1.794 1.914 3.829 2.314 1.824 4.682 \n## day[ 1068 ] =  1.595 2.672 2.875 1.995 1.789 3.964 2.676 1.557 4.336 1.175 \n## day[ 1069 ] =  0.2616 0.3892 1.043 1.033 4.178 2.735 1.21 3.774 0.9752 1.303 \n## day[ 1070 ] =  0.6176 0.3958 0.5934 0.7512 3.457 1.469 3.447 1.389 1.421 0.6296 \n## day[ 1071 ] =  0.1833 0.4052 0.1926 1.527 0.9464 4.614 1.09 1.328 0.6019 0.7844 \n## day[ 1072 ] =  1.66 1.878 1.209 1.695 4.319 1.559 1.966 0.9172 0.5757 1.924 \n## day[ 1073 ] =  0.4923 1.061 0.1846 2.722 0.9931 2.06 0.9486 0.9155 2.392 1.475 \n## day[ 1074 ] =  0.7294 0.6897 0.8682 1.182 1.621 0.5391 0.7905 2.106 0.917 0.808 \n## day[ 1075 ] =  1.217 2.756 2.504 1.69 1.631 0.7541 1.473 0.9813 1.096 0.7466 \n## day[ 1076 ] =  0.3434 0.6455 0.6206 0.5572 0.684 1.893 0.9862 1.295 0.8011 1.325 \n## day[ 1077 ] =  0.2488 0.1482 0.4004 1.312 1.355 1.541 1.363 0.5491 1.268 1.89 \n## day[ 1078 ] =  0.04368 0.3502 1.062 0.9077 0.9068 0.796 0.8399 1.139 1.808 3.535 \n## day[ 1079 ] =  0.09922 0.1231 0.08831 1.059 0.9723 0.6895 0.9403 1.681 3.101 0.833 \n## day[ 1080 ] =  1.011 1.659 2.284 1.803 0.7861 0.8737 1.849 2.433 1.057 1.557 \n## day[ 1081 ] =  1.313 0.9789 0.4061 0.8116 1.424 1.939 2.846 0.8073 1.474 3.183 \n## day[ 1082 ] =  0.07385 0.466 0.03047 0.9171 1.732 2.944 0.6535 0.793 4.115 9.668 \n## day[ 1083 ] =  2.139 2.022 1.702 1.494 2.44 0.9239 1.941 3.456 10.85 1.188 \n## day[ 1084 ] =  0.7615 1.705 2.722 2.213 0.6172 1.235 3.601 9.739 1.479 0.4848 \n## day[ 1085 ] =  0.2835 0.5975 0.9414 1.685 1.489 3.78 10.84 1.912 1.28 1.755 \n## day[ 1086 ] =  0.4093 0.15 0.4777 1.351 3.117 10.69 2.539 2.391 2.138 1.264 \n## average =  0.843 1.271 1.571 1.887 2.87 2.965 3.037 3.027 3.003 3.008\n```\n\n```\n## training period 670:\n```\n\n```\n## day[ 730 ] =  NA NA NA NaN 3.456 1.083 1.391 1.685 2.408 1.115 \n## day[ 731 ] =  3.892 7.102 8.656 7.389 0.9969 1.121 1.051 1.253 1.676 0.9608 \n## day[ 732 ] =  0.3785 0.2873 0.2969 0.411 1.288 1.885 2.057 1.4 1.244 2.823 \n## day[ 733 ] =  0.08942 0.6066 1.063 1.008 2.812 3.12 1.155 1.061 2.357 0.7339 \n## day[ 734 ] =  0.8542 0.4445 0.1857 0.9238 2.878 1.027 1.141 2.345 0.4984 2.03 \n## day[ 735 ] =  0.575 0.5115 1.209 1.123 1.789 1.169 2.39 0.439 2.453 3.64 \n## day[ 736 ] =  0.5606 0.5353 0.3198 0.6928 1.234 2.101 0.7513 2.563 3.017 3.61 \n## day[ 737 ] =  0.2475 0.5715 0.6998 0.7229 2.078 0.8762 2.276 2.979 4.196 4.395 \n## day[ 738 ] =  0.09564 1.317 1.828 1.417 0.7469 1.703 3.59 3.104 3.345 4.873 \n## day[ 739 ] =  1.583 2.541 3.052 1.964 2.129 2.762 3.367 3.371 4.375 1.165 \n## day[ 740 ] =  2.72 2.55 3.147 2.051 3.411 4.007 3.158 4.551 1.269 0.6884 \n## day[ 741 ] =  1.429 1.623 2.171 1.922 2.996 2.36 4.9 1.238 0.6259 1.869 \n## day[ 742 ] =  0.07068 0.8149 0.6537 0.7333 2.655 4.651 1.185 0.6179 1.767 1.157 \n## day[ 743 ] =  0.2656 0.6507 0.5629 1.168 4.303 1.414 0.5501 2.051 2.036 2.054 \n## day[ 744 ] =  1.362 0.8622 0.09866 1.868 1.149 0.7551 1.961 1.55 1.857 1.054 \n## day[ 745 ] =  0.03883 0.4554 1.059 1.326 0.3641 1.804 2.008 1.791 1.416 1.191 \n## day[ 746 ] =  0.4397 0.8662 1.063 1.082 1.589 1.706 2.637 1.72 0.9649 1.169 \n## day[ 747 ] =  0.2588 0.05598 0.1182 1.702 1.308 2 1.31 0.9195 0.9203 1.408 \n## day[ 748 ] =  1.099 0.7064 0.5238 2.151 2.567 1.309 1.081 0.8965 1.286 0.8556 \n## day[ 749 ] =  0.4622 1.091 1.666 1.221 1.76 1.207 0.7842 1.303 1.153 3.2 \n## day[ 750 ] =  0.9946 1.262 0.7644 0.9886 1.444 0.87 1.106 1.282 3.016 1.134 \n## day[ 751 ] =  0.6166 0.4166 1.203 1.079 0.7565 1.083 1.224 2.948 1.138 0.9506 \n## day[ 752 ] =  0.6699 0.7555 0.8016 0.9515 1.57 1.145 3.146 1.53 1.115 1.388 \n## day[ 753 ] =  1.073 0.05903 0.7876 1.111 1.069 2.394 1.064 0.9747 1.881 1.855 \n## day[ 754 ] =  0.009788 0.5331 0.1332 0.4879 2.648 0.8678 0.9504 1.284 2.859 0.6591 \n## day[ 755 ] =  1.75 2.042 2.194 2.309 1.34 1.025 1.46 2.483 0.7317 2.497 \n## day[ 756 ] =  0.3029 0.7125 0.09503 1.004 1.016 1.483 2.269 0.6141 1.863 1.561 \n## day[ 757 ] =  1.066 0.1625 0.7985 1.591 1.449 1.769 0.7428 2.366 1.295 2.987 \n## day[ 758 ] =  0.09101 0.1736 0.5054 1.847 2.071 0.7302 1.73 1.031 3.06 0.6029 \n## day[ 759 ] =  0.6889 1.022 0.8388 0.7181 0.6665 2.085 1.467 3.346 0.5865 0.9309 \n## day[ 760 ] =  0.8882 0.3334 0.1491 0.7806 1.297 1.193 3.26 0.4896 1.103 1.166 \n## day[ 761 ] =  0.5494 0.9008 1.129 0.9491 1.354 3.057 0.5313 1.226 1.43 2.2 \n## day[ 762 ] =  0.2401 0.07578 0.4841 1.479 2.688 0.4505 1.292 1.486 1.873 1.537 \n## day[ 763 ] =  0.5198 0.7712 2.171 2.295 0.5197 1.013 1.419 1.874 1.151 2.389 \n## day[ 764 ] =  0.2502 0.7305 1.867 0.9535 1 1.529 1.674 1.264 2.471 3.551 \n## day[ 765 ] =  0.4504 0.0947 0.2507 0.7529 1.084 1.776 1.118 2.056 2.945 0.7772 \n## day[ 766 ] =  1.53 2.075 2.034 2.805 1.903 1.211 2.088 2.852 0.5939 1.899 \n## day[ 767 ] =  0.7599 0.07637 0.759 0.8886 1.314 2.082 2.894 0.754 1.858 1.144 \n## day[ 768 ] =  0.6773 0.02832 1.697 2.049 2.747 3.291 1.114 1.806 0.9751 1.683 \n## day[ 769 ] =  1.048 1.047 2.339 2.404 2.842 0.5862 1.598 0.8343 1.212 1.768 \n## day[ 770 ] =  1.406 3.191 3.718 3.288 0.68 1.749 0.8434 1.398 2.201 1.757 \n## day[ 771 ] =  0.2201 0.09953 1.335 0.6266 1.871 0.9325 1.215 1.743 1.341 1.716 \n## day[ 772 ] =  0.8078 1.471 2.432 2.519 0.6353 1.693 2.065 1.058 1.49 3.028 \n## day[ 773 ] =  0.1513 0.2767 2.007 1.65 1.564 1.749 1.206 2.202 3.178 1.536 \n## day[ 774 ] =  2.334 3.449 3.659 2.107 1.949 1.487 2.062 2.745 1.209 1.937 \n## day[ 775 ] =  0.7344 1.589 2.879 1.628 1.116 1.878 3.014 1.583 2.774 1.514 \n## day[ 776 ] =  0.3661 0.8729 1.548 1.68 2.147 3.181 1.61 2.592 1.28 1.332 \n## day[ 777 ] =  0.6664 1.602 0.9658 1.529 2.93 1.518 2.722 1.08 1.679 2.044 \n## day[ 778 ] =  0.14 0.7091 0.9631 1.054 1.734 2.722 1.627 1.509 1.55 4.349 \n## day[ 779 ] =  0.1268 0.1406 0.07039 1.844 2.091 1.621 1.409 1.469 5.306 2.905 \n## day[ 780 ] =  0.009131 1.341 2.392 1.702 1.486 1.968 1.456 4.455 2.985 1.488 \n## day[ 781 ] =  0.236 0.365 1.839 1.032 1.549 1.566 4.397 2.936 1.327 4.554 \n## day[ 782 ] =  0.7819 2.633 2.39 1.958 1.344 5.292 2.816 1.457 4.192 2.377 \n## day[ 783 ] =  2.297 2.83 1.388 1.838 4.762 2.948 1.425 4.168 2.622 2.205 \n## day[ 784 ] =  2.639 4.097 4.96 3.829 2.627 1.458 4.075 2.582 2.284 2.286 \n## day[ 785 ] =  1.292 2.559 3.215 3.094 1.597 4.741 2.28 2.108 2.336 0.9707 \n## day[ 786 ] =  0.3937 0.7399 0.3689 1.986 3.961 2.418 2.476 2.179 1.556 1.175 \n## day[ 787 ] =  0.4372 0.992 1.93 2.303 2.466 1.882 1.875 1.225 1.247 2.113 \n## day[ 788 ] =  0.2311 0.4297 1.018 1.512 2.014 1.771 1.341 1.329 1.708 1.465 \n## day[ 789 ] =  0.5736 0.5814 0.1009 1.415 1.658 1.595 1.438 1.334 1.665 0.8455 \n## day[ 790 ] =  0.02254 0.7065 1.737 2.713 1.555 1.422 1.23 1.493 1.461 1.603 \n## day[ 791 ] =  0.3083 1.068 1.323 1.386 1.503 1.43 1.315 0.8874 1.095 7.273 \n## day[ 792 ] =  1.355 4.027 3.654 2.3 2.008 1.988 0.995 0.7913 8.466 3.123 \n## day[ 793 ] =  1.11 1.335 1.763 2.716 1.208 0.7654 1.113 5.937 2.436 1.953 \n## day[ 794 ] =  0.7265 1.016 1.651 2.11 0.8928 1.183 6.809 3.857 2.217 0.9195 \n## day[ 795 ] =  0.3116 0.3299 0.33 0.8499 2.098 8.595 3.415 2.346 1.08 1.249 \n## day[ 796 ] =  0.6961 1.364 1.396 1.273 7.812 3.069 2.582 1.342 1.933 1.377 \n## day[ 797 ] =  3.259 4.907 4.936 3.728 2.653 2.176 1.025 1.047 1.491 1.428 \n## day[ 798 ] =  1.52 1.37 1.757 1.012 2.131 1.009 1.477 1.256 1.694 1.179 \n## day[ 799 ] =  0.1829 0.6315 0.2652 0.6574 1.372 1.634 1.741 1.333 0.8474 2.274 \n## day[ 800 ] =  0.5485 1.634 0.6445 1.19 1.112 1.27 1.127 1.014 2.481 1.177 \n## day[ 801 ] =  0.5848 0.5566 0.9242 1.383 1.638 1.228 1.02 2.406 1.19 2.81 \n## day[ 802 ] =  0.3929 0.2673 0.6994 1.599 1.019 0.7974 2.412 1.159 2.11 0.9027 \n## day[ 803 ] =  0.694 1.141 0.6539 1.682 0.8117 2.499 1.585 2.76 0.764 1.394 \n## day[ 804 ] =  0.2643 0.2469 0.1641 1.133 2.197 1.463 1.815 1.269 1.261 1.105 \n## day[ 805 ] =  0.9876 0.01457 0.3562 1.248 1.765 2.11 1.288 1.412 1.233 2.474 \n## day[ 806 ] =  0.6323 0.7311 1.243 1.317 2.42 0.9572 1.448 0.9033 1.855 0.4446 \n## day[ 807 ] =  0.1495 0.2652 0.2583 1.035 1.105 1.373 1.262 1.942 0.7249 1.153 \n## day[ 808 ] =  0.3001 0.5588 0.5066 0.7243 1.327 1.132 2.194 0.4565 1.514 2.309 \n## day[ 809 ] =  1.724 1.817 0.9967 1.789 1.261 2.163 0.8424 1.122 2.109 0.9746 \n## day[ 810 ] =  0.4536 2.009 0.2779 2.082 2.232 0.3102 1.453 2.759 0.81 1.546 \n## day[ 811 ] =  0.5904 0.08201 0.8825 1.13 0.758 1.543 2.724 0.8485 1.47 2.088 \n## day[ 812 ] =  0.6792 0.6418 1.461 0.9272 1.422 2.14 0.7732 1.439 1.384 0.9185 \n## day[ 813 ] =  1.377 2.258 2.476 2.369 2.069 0.6604 1.774 2.268 1.18 5.167 \n## day[ 814 ] =  1.545 2.263 2.202 1.82 0.8727 2.064 2.017 1.251 5.696 0.5348 \n## day[ 815 ] =  0.394 0.7876 0.6856 0.9347 2.244 1.843 1.181 5.584 0.7421 3.797 \n## day[ 816 ] =  0.2219 0.09801 0.7561 0.9279 1.564 1.106 4.75 0.7049 3.49 1.101 \n## day[ 817 ] =  0.5444 1.149 0.7827 1.265 0.988 5.167 0.5856 3.316 1.032 0.783 \n## day[ 818 ] =  0.5355 1.332 1.769 1.016 5.159 0.6931 2.338 0.7254 1.122 1.134 \n## day[ 819 ] =  1.217 2.815 5.724 4.432 0.4942 3.219 0.7525 0.8439 0.8448 0.9661 \n## day[ 820 ] =  0.3829 0.2092 0.03216 0.902 3.164 0.6724 0.877 0.9257 1.206 2.399 \n## day[ 821 ] =  1.603 1.732 2.583 2.752 0.7416 0.6175 1.106 0.8104 2.186 4.553 \n## day[ 822 ] =  0.8936 0.9078 1.056 0.9093 0.7458 0.9883 1.223 2.523 6.068 4.107 \n## day[ 823 ] =  0.2908 0.02394 0.1934 0.5952 1.124 0.7255 2.563 7.028 4.386 1.729 \n## day[ 824 ] =  0.297 0.03589 0.09436 0.505 0.7904 1.768 5.752 3.298 1.035 2.99 \n## day[ 825 ] =  0.7375 0.3654 1.59 1.037 2.064 4.725 3.407 1.113 2.674 1.742 \n## day[ 826 ] =  0.3462 0.2088 0.5051 1.497 5.299 3.35 1.717 2.974 1.859 NaN \n## day[ 827 ] =  0.3394 0.02968 0.1834 3.521 4.66 1.38 2.79 1.816 NaN 3.314 \n## day[ 828 ] =  1.695 2.369 0.995 2.683 1.523 3.403 1.987 NaN 2.409 1.756 \n## day[ 829 ] =  1.152 1.711 2.112 1.898 2.914 1.863 NaN 2.541 0.8924 2.729 \n## day[ 830 ] =  0.5663 0.07053 0.6331 0.9237 1.546 NaN 2.868 1.158 2.685 1.467 \n## day[ 831 ] =  0.3921 0.5366 0.6021 1.249 NaN 2.271 1.142 2.878 1.43 3.364 \n## day[ 832 ] =  NA NA NA NaN 4.299 1.253 2.574 1.649 3.712 1.277 \n## day[ 833 ] =  NA NA NA 4.887 0.9148 2.778 1.277 3.55 1.001 1.539 \n## day[ 834 ] =  0.483 1.015 1.234 1.387 2.555 1.046 3.939 1.452 1.291 1.966 \n## day[ 835 ] =  0.9776 2.072 3.111 3.182 1.18 3.452 1.265 1.133 1.611 0.9078 \n## day[ 836 ] =  0.09147 0.2271 0.1062 1.127 4 1.222 1.496 2.247 0.8869 4.639 \n## day[ 837 ] =  0.9183 1.818 2.311 3.673 1.305 1.41 2.131 1.294 4.381 1.744 \n## day[ 838 ] =  1.099 1.318 0.1197 1.038 1.27 1.557 0.8896 4.656 1.656 4.475 \n## day[ 839 ] =  0.4446 0.8173 1.04 1.129 1.627 1.003 4.207 1.623 4.372 2.468 \n## day[ 840 ] =  0.8508 0.4452 0.145 1.29 1.037 4.257 1.989 4.325 3.267 2.877 \n## day[ 841 ] =  1.588 2.585 4.287 3.451 3.909 1.576 4.094 1.965 2.196 4.904 \n## day[ 842 ] =  1.091 1.79 1.983 2.887 1.392 3.973 2.78 2.869 3.408 0.5085 \n## day[ 843 ] =  1.061 1.66 1.125 1.442 4.283 2.299 2.804 2.754 0.2936 1.442 \n## day[ 844 ] =  0.8427 0.348 0.7176 2.696 1.315 1.87 4.031 0.2071 1.355 3.84 \n## day[ 845 ] =  1.362 1.627 1.39 1.371 2.082 3.498 0.3445 1.349 2.469 2.613 \n## day[ 846 ] =  1.868 2.98 3.434 2.431 2.815 0.5453 1.485 3.35 2.617 2.503 \n## day[ 847 ] =  1.333 1.578 2.237 2.023 0.1164 1.468 3.182 2.827 2.194 1.561 \n## day[ 848 ] =  1.059 1.334 NA 1.196 1.158 2.7 2.763 1.855 1.466 0.904 \n## day[ 849 ] =  0.01108 0.1108 0.008316 0.8925 3.091 3.179 1.876 1.454 0.9407 1.028 \n## day[ 850 ] =  0.2902 0.2979 0.005561 1.723 2.858 1.916 1.389 0.9751 1.199 0.9815 \n## day[ 851 ] =  0.05485 0.1017 0.1012 1.61 2.267 1.379 1.044 1.618 2.259 2.043 \n## day[ 852 ] =  0.7413 1.598 1.35 2.446 1.512 0.9905 1.378 1.076 1.245 1.78 \n## day[ 853 ] =  1.08 1.352 1.97 1.334 1.137 1.278 1.292 1.651 1.363 2.401 \n## day[ 854 ] =  0.3414 0.4749 0.9216 1.137 1.449 1.358 2.031 1.068 2.524 2.144 \n## day[ 855 ] =  0.0777 0.663 1.173 1.123 1.603 1.526 1.348 2.722 2.795 6.416 \n## day[ 856 ] =  0.9895 1.181 0.8855 1.06 1.325 1.353 2.374 2.813 4.889 2.172 \n## day[ 857 ] =  0.01842 0.1261 0.3567 1.714 1.769 2.93 2.847 6.159 2.29 2.491 \n## day[ 858 ] =  0.6786 0.3003 0.3943 0.9437 2.47 2.043 5.501 1.165 3.234 3.794 \n## day[ 859 ] =  0.05968 0.6756 0.5277 2.222 2.246 4.686 2.16 2.156 3.838 2.29 \n## day[ 860 ] =  0.4259 1.359 1.611 1.039 3.964 2.797 3.233 3.341 2.739 5.387 \n## day[ 861 ] =  2.893 3.927 4.139 2.928 2.208 3.068 4.448 2.544 5.177 3.29 \n## day[ 862 ] =  1.453 2.854 2.563 1.693 4.452 4.592 3.41 4.958 3.203 1.152 \n## day[ 863 ] =  0.9683 2.257 2.236 1.339 3.982 1.918 3.939 3.882 1.299 1.522 \n## day[ 864 ] =  1.151 0.3705 1.879 1.863 2.35 4.96 3.556 1.901 1.615 2.633 \n## day[ 865 ] =  1.001 1.005 0.1564 1.547 3.42 3.341 1.42 1.315 1.525 0.9084 \n## day[ 866 ] =  0.02117 0.3331 0.9596 2.023 3.676 1.431 1.295 1.749 0.846 1.379 \n## day[ 867 ] =  0.07592 0.3373 0.2409 1.848 1.162 1.71 1.969 1.191 1.39 2.997 \n## day[ 868 ] =  0.7145 0.5701 0.5889 1.598 1.325 1.934 0.8565 1.249 3.2 NaN \n## day[ 869 ] =  0.851 0.9264 0.9518 1.514 1.458 1.087 1.44 3.422 NaN NaN \n## day[ 870 ] =  1.857 3.372 3.473 3.013 1.23 1.353 2.419 NaN NaN NaN \n## day[ 871 ] =  0.99 0.06361 0.6697 1.773 1.189 2.529 NaN NaN NaN 3.874 \n## day[ 872 ] =  1.248 1.687 1.884 1.768 2.682 NaN NaN NaN 3.6 0.9462 \n## day[ 873 ] =  0.6718 0.7585 0.3758 1.141 NaN NaN NaN 4.069 0.8959 0.9958 \n## day[ 874 ] =  NA NA NA NaN NaN NaN 3.743 1.738 1.245 3.997 \n## day[ 875 ] =  NA NA NA NaN NaN 4.272 1.158 1.709 3.148 NaN \n## day[ 876 ] =  NA NA NA NaN 3.392 1.145 1.267 4.072 NaN NaN \n## day[ 877 ] =  1.495 2.629 4.097 4.937 1.134 1.403 4.334 NaN NaN NaN \n## day[ 878 ] =  1.225 2.513 1.138 1.413 1.292 3.557 NaN NaN NaN NaN \n## day[ 879 ] =  0.3903 0.5406 0.7851 0.572 3.622 NaN NaN NaN NaN NaN \n## day[ 880 ] =  NA NA NA 2.515 NaN NaN NaN NaN NaN 7.39 \n## day[ 881 ] =  NA NA NA NaN NaN NaN NaN NaN 0.7642 4.038 \n## day[ 882 ] =  NA NA NA NaN NaN NaN NaN 1.046 5.411 7.027 \n## day[ 883 ] =  NA NA NA NaN NaN NaN 1.07 5.303 6.928 NaN \n## day[ 884 ] =  NA NA NA NaN NaN 1.284 6.106 7.807 NaN 6.931 \n## day[ 885 ] =  NA NA NA NaN 1.016 3.41 6.022 NaN 6.056 2.757 \n## day[ 886 ] =  1.105 1.397 1.142 1.152 5.329 7.521 NaN 6.162 2.966 4.286 \n## day[ 887 ] =  0.5517 2.723 2.021 1.509 6.569 NaN 4.597 2.513 4.866 2.384 \n## day[ 888 ] =  2.209 3.592 4.003 4.808 NaN 5.795 3.008 4.794 2.093 3.297 \n## day[ 889 ] =  NA NA NA NaN 0.3645 2.733 4.898 2.702 3.132 2.054 \n## day[ 890 ] =  0.5276 0.121 0.3583 0.4757 2.062 4.013 2.603 3.309 1.914 4.418 \n## day[ 891 ] =  0.007891 1.03 2.156 1.638 4.26 2.275 2.385 1.953 3.164 3.415 \n## day[ 892 ] =  0.6427 0.9193 1.869 3.863 2.492 3.585 2.561 2.624 3.042 2.332 \n## day[ 893 ] =  1.935 2.83 3.782 2.563 3.149 2.126 3.873 4.395 3.447 8.249 \n## day[ 894 ] =  1.11 2.587 1.633 1.771 2.59 2.511 2.835 2.775 8.442 3.957 \n## day[ 895 ] =  1.095 1.211 2.002 1.011 3.724 2.954 2.415 7.967 2.645 2.307 \n## day[ 896 ] =  3.34 5.611 9.059 6.9 4.297 3.061 8.041 2.341 2.017 2.252 \n## day[ 897 ] =  0.9456 1.68 1.016 1.503 2.109 8.368 2.625 2.546 2.365 5.45 \n## day[ 898 ] =  1.043 1.54 1.005 1.499 7.644 2.374 2.225 2.311 5.931 4.835 \n## day[ 899 ] =  1.609 2.17 2.382 0.972 2.546 2.316 1.855 5.051 4.405 2.516 \n## day[ 900 ] =  0.4493 1.379 0.04679 1.59 1.981 1.677 5.544 5.6 2.404 1.859 \n## day[ 901 ] =  1.748 2.565 1.5 1.414 2.085 5.947 5.604 2.683 2.062 2.664 \n## day[ 902 ] =  0.6266 1.257 2.482 1.825 5.441 5.049 2.234 1.409 3.598 NaN \n## day[ 903 ] =  0.6846 1.346 0.6788 0.7678 5.227 2.222 2.788 2.492 NaN NaN \n## day[ 904 ] =  1.453 0.3934 0.1755 0.8394 2.518 1.931 3.023 NaN NaN NaN \n## day[ 905 ] =  0.04419 0.9883 1.786 2.381 2.317 2.58 NaN NaN NaN 1.82 \n## day[ 906 ] =  0.8981 0.6586 0.9435 1.37 2.543 NaN NaN NaN 1.402 4.512 \n## day[ 907 ] =  0.548 1.137 1.532 1.513 NaN NaN NaN 1.72 3.658 5.179 \n## day[ 908 ] =  NA NA NA NaN NaN NaN 2.353 3.613 5.236 6.517 \n## day[ 909 ] =  NA NA NA NaN NaN 2.501 3.432 5.716 7.029 4.685 \n## day[ 910 ] =  NA NA NA NaN 3.35 4.831 6.009 9.126 4.853 1.572 \n## day[ 911 ] =  NA NA 7.82 3.183 3.12 5.376 6.77 5.271 2.056 NaN \n## day[ 912 ] =  1.173 2.045 0.6393 1.202 5.713 7.466 4.28 1.693 NaN NaN \n## day[ 913 ] =  0.5814 1.854 2.035 1.881 8.674 5.016 1.674 NaN NaN 2.81 \n## day[ 914 ] =  3.057 3.022 3.835 5.363 3.871 1.45 NaN NaN 2.958 4.335 \n## day[ 915 ] =  1.16 2.819 3.502 1.85 1.871 NaN NaN 2.707 3.509 3.259 \n## day[ 916 ] =  0.06268 0.04204 0.9508 2.187 NaN NaN 2.446 3.617 4.455 3.419 \n## day[ 917 ] =  NA NA NA NaN NaN 5.403 3.781 3.02 3.092 1.996 \n## day[ 918 ] =  NA NA NA NaN 5.194 4.924 4.218 3.399 2.471 2.114 \n## day[ 919 ] =  7.951 7.635 7.886 6.105 3.996 3.682 3.452 1.376 3.151 2.931 \n## day[ 920 ] =  0.6707 0.4204 1.189 1.63 4.028 3.401 2.518 2.122 2.954 2.466 \n## day[ 921 ] =  0.9706 2.005 2.209 1.626 5.12 2.238 2.872 2.954 2.302 2.387 \n## day[ 922 ] =  0.6132 0.02335 0.9356 2.353 2.044 3.275 2.514 2.584 2.522 2.709 \n## day[ 923 ] =  0.8103 0.2848 1.087 1.635 3.603 3.484 2.143 2.338 2.835 2.976 \n## day[ 924 ] =  NA NA NA 2.217 2.449 1.978 2.004 2.347 2.554 3.664 \n## day[ 925 ] =  1.665 3.24 4.077 1.551 2.387 2.594 2.254 2.47 3.531 5.83 \n## day[ 926 ] =  1.25 1.987 1.146 1.965 2.157 2.86 2.455 3.529 5.701 4.843 \n## day[ 927 ] =  1.952 2.462 0.6671 2.144 2.333 2.087 4.273 10.82 3.161 1.737 \n## day[ 928 ] =  0.184 0.4784 0.7976 3.443 2.509 3.739 8.282 2.932 1.779 3.851 \n## day[ 929 ] =  0.2392 0.08011 1.682 1.935 2.929 6.025 4.073 1.266 4.257 10.52 \n## day[ 930 ] =  0.4237 2.514 5.329 3.384 5.044 3.273 1.65 4.072 9.178 3.292 \n## day[ 931 ] =  0.02435 0.6034 0.2609 0.995 2.825 0.9937 4.129 9.378 3.902 0.9232 \n## day[ 932 ] =  1.205 1.784 1.174 1.577 1.131 4.342 9.098 3.424 2.512 10.99 \n## day[ 933 ] =  0.1361 0.6642 0.1362 1.418 4.161 8.877 3.274 1.924 10.31 9.602 \n## day[ 934 ] =  0.8733 1.009 1.327 2.153 10.61 3.598 1.47 9.523 9.632 4.156 \n## day[ 935 ] =  2.765 1.792 2.985 3.793 3.354 2.304 10.97 8.861 4.097 2.141 \n## day[ 936 ] =  0.8612 0.6501 0.06568 1.546 1.51 10.39 9.91 4.299 3.417 4.342 \n## day[ 937 ] =  0.3409 0.243 1.652 1.33 11.77 10.12 4.091 2.758 4.453 2.995 \n## day[ 938 ] =  0.5316 2.136 3.006 2.013 9.512 3.892 2.721 3.727 3.341 4.822 \n## day[ 939 ] =  0.2021 0.8886 2.145 3.704 4.288 2.18 2.969 1.729 5.606 2.173 \n## day[ 940 ] =  1.746 1.582 1.785 0.9322 2.527 3.968 3.064 5.086 1.934 1.741 \n## day[ 941 ] =  0.7323 0.06146 0.4162 1.076 4.334 3.199 5.598 3.277 2.371 2.193 \n## day[ 942 ] =  0.4739 1.471 0.01422 2.101 2.605 3.908 3.09 1.919 3.294 7.786 \n## day[ 943 ] =  0.9493 0.9776 2.116 1.978 4.643 3.986 2.007 2.587 7.403 4.607 \n## day[ 944 ] =  0.8129 0.5465 0.7921 1.809 2.435 2.051 3.528 7.49 4.529 5.726 \n## day[ 945 ] =  0.1989 1.466 2.231 1.233 2.013 3.385 8.288 4.757 5.919 10.93 \n## day[ 946 ] =  0.3449 1.411 1.215 0.9941 2.524 7.542 4.872 5.727 8.748 4.518 \n## day[ 947 ] =  1.289 2.268 2.474 2.813 6.943 4.298 4.249 9.731 5.065 1.628 \n## day[ 948 ] =  1.269 1.943 3.303 3.868 4.816 5.209 9.012 5.283 1.551 3.287 \n## day[ 949 ] =  NA NA 1.25 1.468 4.608 10.26 4.945 2.337 2.439 1.582 \n## day[ 950 ] =  0.7242 0.822 0.6229 2.616 9.874 5.738 2.393 2.361 1.41 3.145 \n## day[ 951 ] =  0.3167 0.7758 2.03 3.911 5.217 1.898 2.231 1.798 2.623 1.876 \n## day[ 952 ] =  1.642 4.81 5.642 2.664 1.651 2.368 1.66 2.295 2.095 5.731 \n## day[ 953 ] =  0.7984 0.03665 0.01873 0.9474 2.322 1.617 2.424 2.093 4.224 4.007 \n## day[ 954 ] =  0.09674 0.6379 0.1543 0.8121 1.495 3.08 1.865 6.387 3.979 5.112 \n## day[ 955 ] =  0.5023 0.2645 0.442 1.03 2.497 2.084 4.498 3.223 5.65 5.932 \n## day[ 956 ] =  0.2399 1.512 1.881 0.7629 2.228 4.319 3.247 6.743 6.398 8.918 \n## day[ 957 ] =  0.7279 0.8371 0.4742 1.033 3.812 3.639 5.092 6.331 10.8 6.992 \n## day[ 958 ] =  2.19 1.223 0.9152 1.059 3.385 5.921 6.398 10.83 5.213 4.948 \n## day[ 959 ] =  0.6086 1.252 4.925 2.942 5.627 5.271 11.46 4.872 5.826 1.538 \n## day[ 960 ] =  0.3628 0.941 0.2987 1.768 5.598 9.97 4.306 5.065 1.557 1.741 \n## day[ 961 ] =  1.665 0.9472 0.4405 1.809 9.532 4.752 4.36 1.62 1.471 3.948 \n## day[ 962 ] =  0.7052 1.112 1.504 1.557 2.499 3.576 1.692 1.981 3.962 5.176 \n## day[ 963 ] =  1.785 0.5276 1.167 2.024 2.72 1.85 1.194 4.762 5.319 5.707 \n## day[ 964 ] =  0.1809 1.277 2.086 1.684 1.318 2.999 4.16 5.308 5.591 3.68 \n## day[ 965 ] =  1.029 1.588 0.02694 1.7 1.221 3.657 4.597 5.836 3.962 1.522 \n## day[ 966 ] =  1.436 0.3962 0.1981 0.5206 3.073 4.285 4.831 3.644 1.533 4.291 \n## day[ 967 ] =  NA 8.121 6.367 3.35 5.224 5.226 3.239 2.131 4.785 6.472 \n## day[ 968 ] =  0.8654 0.7062 0.97 0.895 5.237 2.913 1.946 4.647 6.134 5.293 \n## day[ 969 ] =  0.1083 0.6545 0.3001 1.526 3.153 1.7 4.282 7.167 5.564 2.97 \n## day[ 970 ] =  1.222 0.4895 0.5565 0.8944 1.569 5.182 6.489 4.414 3.042 3.484 \n## day[ 971 ] =  1.097 0.9743 1.496 1.35 5.331 4.064 4.85 3.064 4.547 2.659 \n## day[ 972 ] =  1.07 0.2721 2.309 4.943 5.832 4.711 2.834 4.061 2.715 9.938 \n## day[ 973 ] =  1.775 1.636 0.9423 2.231 3.566 4.105 5.446 3.018 9.334 12.3 \n## day[ 974 ] =  0.4652 1.832 2.063 1.839 5.252 6.691 5.165 10.26 13.75 10.62 \n## day[ 975 ] =  0.3447 0.6224 0.851 2.941 5.331 3.685 9.314 13.02 10.52 6.913 \n## day[ 976 ] =  0.6594 2.139 2.663 1.908 2.536 8.442 12.31 9.828 8.233 2.654 \n## day[ 977 ] =  0.7243 2.842 3.45 1.68 7.386 11.4 8.503 7.423 3.534 7.808 \n## day[ 978 ] =  1.033 1.743 2.321 1.95 10.1 7.639 6.857 3.316 6.98 9.684 \n## day[ 979 ] =  0.3954 1.61 2.626 4.489 5.871 7.104 3.982 8.681 10.74 9.138 \n## day[ 980 ] =  0.5683 1.165 0.9869 1.347 4.883 4.315 9.062 10.86 11.45 3.834 \n## day[ 981 ] =  0.8894 1.508 3.053 1.767 3.911 6.22 8.997 10.66 3.866 3.535 \n## day[ 982 ] =  0.9239 0.7964 1.108 1.79 9.261 10.08 11.52 3.287 3.111 8.034 \n## day[ 983 ] =  1.092 1.337 2.993 2.646 7.716 6.212 2.999 3.921 3.539 3.574 \n## day[ 984 ] =  1.225 3.896 6.041 4.207 7.02 1.422 4.091 4.194 2.167 1.38 \n## day[ 985 ] =  1.111 2.325 3.009 3.249 2.123 2.47 4.222 4.746 1.797 0.949 \n## day[ 986 ] =  0.8594 1.208 0.6244 0.9862 1.718 2.866 3.019 1.45 0.9678 3.119 \n## day[ 987 ] =  1.702 2.144 1.251 1.328 5.536 3.721 1.267 1.798 1.656 4.229 \n## day[ 988 ] =  0.01891 0.01901 1.149 0.8725 4.655 1.449 1.137 2.363 4.914 1.531 \n## day[ 989 ] =  0.4379 0.1459 0.2203 1.946 1.304 0.8655 2.712 4.475 2.346 1.207 \n## day[ 990 ] =  NA NA NA 1.642 1.742 1.6 3.368 1.957 1.653 2.514 \n## day[ 991 ] =  0.4056 1.402 2.026 2.13 1.663 3.203 2.464 1.002 2.281 2.797 \n## day[ 992 ] =  0.8169 0.568 1.015 2.155 3.376 1.902 2.466 3.109 3.9 0.7905 \n## day[ 993 ] =  0.707 0.792 1.852 2.435 2.293 2.319 1.787 3.017 0.872 1.019 \n## day[ 994 ] =  0.7086 0.1882 1.33 0.9383 1.051 2.354 3.697 0.9791 1.786 1.91 \n## day[ 995 ] =  0.1849 0.07657 0.5674 0.3858 2.037 3.374 1.189 1.434 2.219 1.744 \n## day[ 996 ] =  0.3582 0.1356 0.1727 0.7654 4.293 1.043 0.9711 1.893 1.998 4.748 \n## day[ 997 ] =  0.8331 0.28 0.7641 1.033 0.882 0.8884 2.29 1.918 5.469 1.478 \n## day[ 998 ] =  0.989 1.53 1.89 1.532 1.4 2.174 1.501 4.977 1.146 1.436 \n## day[ 999 ] =  0.009057 0.2741 0.7312 1.026 2.295 2.22 4.776 1.214 1.305 1.137 \n## day[ 1000 ] =  0.7008 1.421 2.11 1.468 1.461 4.858 1.127 1.79 1.106 1.193 \n## day[ 1001 ] =  1.142 1.469 1.097 1.409 5.29 0.8669 1.726 1.278 0.9018 1.061 \n## day[ 1002 ] =  0.2643 0.07485 0.03355 1.776 1.248 1.622 1.27 1.262 1.018 1.167 \n## day[ 1003 ] =  0.775 1.118 1.983 1.561 0.9263 1.425 1.196 1.336 1.088 1.404 \n## day[ 1004 ] =  0.9611 1.165 0.6704 0.9893 1.204 1.362 1.167 1.302 1.252 1.268 \n## day[ 1005 ] =  0.5634 0.8517 0.9166 1.368 0.9925 1.313 0.7409 1.187 0.7912 1.167 \n## day[ 1006 ] =  0.5359 0.5996 0.642 1.228 1.254 1.294 1.492 1.16 0.7926 0.8669 \n## day[ 1007 ] =  0.9289 1.262 2.165 1.536 0.8109 1.541 1.091 0.986 1.277 1.038 \n## day[ 1008 ] =  0.2888 0.5126 0.959 1.519 1.224 0.5803 0.8376 1.007 1.07 1.097 \n## day[ 1009 ] =  0.1001 0.4734 0.1888 0.6435 1.083 0.5115 1.046 1.17 0.9681 1.036 \n## day[ 1010 ] =  0.9079 0.824 0.9577 0.8519 0.7188 1.659 1.16 1.158 1.369 2.175 \n## day[ 1011 ] =  0.4317 0.389 0.7438 1.099 1.157 1.343 1.35 1.223 1.737 NaN \n## day[ 1012 ] =  0.04181 0.04129 0.7722 1.448 1.437 1.634 1.459 1.899 NaN 0.8149 \n## day[ 1013 ] =  0.5434 0.05557 0.6029 0.611 1.736 1.251 1.746 NaN 0.6617 1.273 \n## day[ 1014 ] =  1.476 2.472 3.279 1.945 1.355 1.536 NaN 0.7255 1.119 1.64 \n## day[ 1015 ] =  1.447 0.6503 0.5193 1.852 1.699 NaN 0.6243 1.248 1.51 1.548 \n## day[ 1016 ] =  0.9631 1.504 1.634 1.719 NaN 0.7362 0.9446 1.371 1.522 6.411 \n## day[ 1017 ] =  NA NA NA NaN 1.51 1.351 1.269 1.481 5.542 1.234 \n## day[ 1018 ] =  1.148 1.46 1.62 1.354 1.138 1.404 1.517 5.5 1.492 1.805 \n## day[ 1019 ] =  0.8099 0.3699 0.6065 0.564 1.455 1.773 5.789 1.742 1.497 2.286 \n## day[ 1020 ] =  0.3051 1.322 0.9483 0.7244 1.542 6.079 1.421 1.672 2.227 1.758 \n## day[ 1021 ] =  0.561 1.143 2.021 1.367 5.891 1.692 1.415 2.284 1.799 0.9108 \n## day[ 1022 ] =  1.874 2.635 3.927 4.707 1.626 1.529 2.322 1.492 1.028 NaN \n## day[ 1023 ] =  0.7954 0.7194 0.3051 1.221 1.26 1.778 1.599 0.9904 NaN NaN \n## day[ 1024 ] =  0.6753 0.4455 0.6099 0.8949 2.148 1.632 1.392 NaN NaN NaN \n## day[ 1025 ] =  0.6373 1.168 0.9492 1.124 1.834 0.6919 NaN NaN NaN 1.517 \n## day[ 1026 ] =  1.788 3.055 4.512 2.1 1.36 NaN NaN NaN 1.351 0.9689 \n## day[ 1027 ] =  0.04987 0.2284 0.2357 0.6472 NaN NaN NaN 1.419 0.8028 1.192 \n## day[ 1028 ] =  NA NA NA NaN NaN NaN 1.427 1.195 1.106 1.008 \n## day[ 1029 ] =  NA NA NA NaN NaN 1.132 0.9948 1.225 1.282 1.871 \n## day[ 1030 ] =  NA NA NA NaN 1.285 1.246 1.876 1.057 1.832 1.827 \n## day[ 1031 ] =  0.298 0.8279 1.083 1.543 0.9347 1.232 1.144 1.77 1.859 2.627 \n## day[ 1032 ] =  0.4784 0.3457 1.166 0.8162 1.898 1.584 1.982 1.733 2.529 1.285 \n## day[ 1033 ] =  0.3536 1.04 1.229 1.383 1.437 1.739 1.575 2.208 0.8797 2.521 \n## day[ 1034 ] =  0.2315 0.849 1.26 1.045 1.832 1.494 2.304 1.925 3.131 2.075 \n## day[ 1035 ] =  0.887 1.693 2.347 2.136 1.925 2.442 0.8367 2.542 1.901 3.2 \n## day[ 1036 ] =  0.3901 0.1986 0.1938 1.645 2.619 1.427 2.926 1.732 3.003 1.863 \n## day[ 1037 ] =  0.7131 0.9502 0.7256 2.532 1.636 3.025 2.228 3.556 1.995 2.023 \n## day[ 1038 ] =  0.05975 0.07939 0.5221 1.078 2.298 1.963 3.289 1.672 1.836 2.432 \n## day[ 1039 ] =  0.4804 0.8641 0.2449 1.42 1.685 3.079 1.424 1.948 2.265 1.369 \n## day[ 1040 ] =  0.5021 0.2046 1.826 1.419 2.888 1.64 1.843 3.217 1.135 1.631 \n## day[ 1041 ] =  0.7675 0.5187 1.116 0.8585 1.88 1.974 3.186 1.262 1.084 1.692 \n## day[ 1042 ] =  0.3082 0.3318 0.6702 1.032 1.363 2.332 1.627 0.8629 1.966 1.103 \n## day[ 1043 ] =  0.2642 1.811 2.23 1.43 2.871 1.421 0.8527 1.77 1.069 19.86 \n## day[ 1044 ] =  0.481 0.04083 0.5403 0.9347 1.077 1.045 1.61 1.31 19.48 20.19 \n## day[ 1045 ] =  1.906 3.589 3.175 2.446 1.388 1.71 1.309 20.71 20.24 11.09 \n## day[ 1046 ] =  0.2826 0.3207 0.1074 0.7293 1.81 1.207 20 19.48 11.25 1.85 \n## day[ 1047 ] =  0.3418 0.1836 0.5221 0.5089 1.047 20.17 20.09 12.04 1.604 3.129 \n## day[ 1048 ] =  1.16 0.5767 0.5103 0.9515 21.09 20.77 11.79 1.891 3.158 2.662 \n## day[ 1049 ] =  3.852 5.672 6.7 14.23 19.94 11.78 1.87 3.967 1.394 3.43 \n## day[ 1050 ] =  2.26 2.784 2.764 8.322 10.31 3.034 3.45 2.051 5.9 12.09 \n## day[ 1051 ] =  4.662 8.013 9.853 6.012 2.555 3.133 4.231 4.765 9.865 8.173 \n## day[ 1052 ] =  1.166 1.914 2.245 2.179 3.401 3.678 4.633 10.29 7.588 1.812 \n## day[ 1053 ] =  1.23 1.92 2.222 2.02 3.038 4.91 10.92 8.656 1.656 2.02 \n## day[ 1054 ] =  0.846 2.23 2.491 2.994 5.874 10.47 8.786 2.373 1.6 4.048 \n## day[ 1055 ] =  0.2516 1.111 1.678 1.691 9.061 8.232 1.408 1.479 3.958 17.59 \n## day[ 1056 ] =  0.8328 0.2226 0.3346 1.262 6.966 2.033 1.638 3.466 16.59 9.433 \n## day[ 1057 ] =  0.4042 0.9936 1.288 1.837 1.755 1.604 2.565 17.41 8.923 3.956 \n## day[ 1058 ] =  0.5488 0.9191 0.7901 0.4035 1.232 4.699 17.77 10.02 4.852 1.009 \n## day[ 1059 ] =  0.8401 2.091 2.426 2.788 3.988 17.16 10.1 4.747 0.9672 1.091 \n## day[ 1060 ] =  0.1716 0.5637 1.277 2.882 17.26 9.963 4.334 1.418 1.158 2.564 \n## day[ 1061 ] =  0.4389 1.087 3.73 12.33 9.392 4.609 0.8776 1.605 2.401 4.162 \n## day[ 1062 ] =  1.479 2.184 3.202 4.605 4.289 0.9717 1.607 1.981 1.403 1.702 \n## day[ 1063 ] =  0.4985 0.8195 1.62 1.668 1.184 1.103 1.931 1.708 2.271 1.929 \n## day[ 1064 ] =  1.046 1.685 3.015 3.13 1.552 1.795 1.669 2.933 3.351 5.801 \n## day[ 1065 ] =  0.08358 0.1091 0.03641 0.603 1.586 1.905 3.462 3.976 6.521 4.641 \n## day[ 1066 ] =  0.09958 0.6038 0.2082 2.487 1.079 2.015 1.224 3.782 3.172 1.47 \n## day[ 1067 ] =  0.6575 1.139 0.04329 0.8493 2.987 3.391 4.828 3.269 1.438 3.478 \n## day[ 1068 ] =  0.0341 0.377 1.83 1.46 1.623 4.535 2.849 1.279 4.831 1.054 \n## day[ 1069 ] =  0.6864 1.369 1.148 0.7131 4.246 3.135 1.048 4.084 1.323 1.497 \n## day[ 1070 ] =  0.1707 1.055 1.112 0.7163 1.869 0.937 4.546 1.345 1.684 0.7424 \n## day[ 1071 ] =  0.6256 1.094 1.608 1.691 1.133 4.383 1.224 1.612 0.6255 0.6095 \n## day[ 1072 ] =  0.6148 0.7373 0.1252 1.177 4.576 0.8352 1.946 0.564 0.7259 1.271 \n## day[ 1073 ] =  0.4925 1.101 0.1336 2.003 1.046 1.712 0.9695 0.5784 1.786 0.8079 \n## day[ 1074 ] =  1.399 1.917 2.794 1.782 1.229 0.88 0.897 1.936 1.612 0.9079 \n## day[ 1075 ] =  0.937 1.888 0.834 1.329 0.8705 0.9512 1.958 1.458 1.816 0.7728 \n## day[ 1076 ] =  0.1082 0.6021 0.9039 0.3702 0.9057 2.468 1.345 1.692 1.035 1.548 \n## day[ 1077 ] =  0.06668 0.3805 0.4317 0.5746 1.725 1.196 0.8454 0.6901 1.03 2.194 \n## day[ 1078 ] =  0.1916 0.676 1.526 0.9364 0.7605 1.214 0.8731 1.484 1.918 3.411 \n## day[ 1079 ] =  0.2614 0.1815 0.04502 0.9118 1.191 0.8636 1.483 1.628 3.447 1.499 \n## day[ 1080 ] =  0.4709 0.3265 0.8457 0.783 0.57 1 2.193 3.067 0.776 1.102 \n## day[ 1081 ] =  0.7547 0.8299 0.2437 0.5469 0.7213 1.92 2.741 1.073 1.159 2.727 \n## day[ 1082 ] =  0.4872 0.6788 1.26 1.06 1.975 3.507 0.5748 0.9846 3.878 8.947 \n## day[ 1083 ] =  1.429 1.936 2.152 1.431 2.458 0.8508 0.7084 3.349 9.889 2.923 \n## day[ 1084 ] =  1.016 1.763 2.416 2.025 0.7636 2.16 2.629 12.6 1.213 0.9774 \n## day[ 1085 ] =  0.1496 0.06844 0.8223 2 1.294 3.224 10.49 1.797 0.7285 3.045 \n## day[ 1086 ] =  0.784 1.124 1.336 2.167 3.642 9.93 1.561 0.7237 2.79 0.8083 \n## average =  0.8384 1.252 1.561 1.853 2.827 2.932 2.977 3.019 2.993 3.026\n```\n\n```\n## training period 730:\n## training period 760:\n## training period 790:\n## training period 1095:\n```\n\n```\n## day[ 730 ] =  NA NA NA NaN 2.375 1.736 0.9294 1.431 1.886 1.339 \n## day[ 731 ] =  3.95 7.272 9.265 9.881 0.7798 1.171 1.463 1.812 1.275 1.239 \n## day[ 732 ] =  0.912 1.75 2.371 1.662 1.263 1.419 2.02 1.214 1.27 2.196 \n## day[ 733 ] =  0.1131 0.5578 0.4427 0.4869 1.453 1.081 0.8963 1.044 1.966 0.8209 \n## day[ 734 ] =  0.2793 0.006854 0.2934 0.8291 0.668 1.177 1.071 2.255 0.6352 1.909 \n## day[ 735 ] =  0.4962 0.8773 1.158 0.945 1.145 0.9616 2.447 0.6289 1.68 4.676 \n## day[ 736 ] =  0.4106 0.9356 1.056 0.9231 1.375 1.563 0.6895 2.202 3.682 4.392 \n## day[ 737 ] =  0.3112 0.04484 0.2609 0.6251 1.524 0.7939 1.859 3.274 4.595 1.669 \n## day[ 738 ] =  0.2197 0.745 0.9585 1.037 0.6122 2.285 3.677 3.466 1.56 4.602 \n## day[ 739 ] =  1.136 1.545 1.771 1.237 2.033 2.889 3.757 1.929 4.132 1.386 \n## day[ 740 ] =  2.178 2.304 3.035 2.362 3.22 2.934 2.374 4.349 1.363 0.7514 \n## day[ 741 ] =  1.46 1.7 1.428 1.538 2.814 2.29 4.282 1.339 0.7585 1.46 \n## day[ 742 ] =  0.3048 0.8434 1.563 1.886 2.353 4.389 1.197 0.5281 1.461 1.881 \n## day[ 743 ] =  1.467 2.107 2.689 1.589 4.245 1.18 0.5543 1.704 1.704 0.9437 \n## day[ 744 ] =  1.227 1.395 0.8351 1.487 1.207 0.7518 1.753 2.105 0.8894 0.9828 \n## day[ 745 ] =  0.1065 0.07911 0.2742 1.013 0.9297 2.029 1.851 1.33 0.7182 1.322 \n## day[ 746 ] =  0.211 0.3092 0.5903 0.7868 1.443 1.155 0.9979 0.8805 1.522 1.102 \n## day[ 747 ] =  0.3037 0.7001 0.8942 1.554 1.704 1.203 0.9755 1.364 0.893 1.203 \n## day[ 748 ] =  0.5778 0.05234 1.054 1.507 1.206 1.361 1.267 1.016 1.363 1.422 \n## day[ 749 ] =  0.2232 0.5217 0.8995 0.7807 0.991 1.414 1.022 1.397 1.46 2.42 \n## day[ 750 ] =  0.9969 1.089 0.06318 1.19 1.701 1.077 1.538 1.857 1.936 0.9593 \n## day[ 751 ] =  0.7985 0.816 0.9142 1.084 0.9575 1.474 1.235 2.488 1.107 0.9091 \n## day[ 752 ] =  0.5166 0.3652 0.3275 0.9929 1.328 1.498 2.106 0.8124 0.925 1.432 \n## day[ 753 ] =  0.5918 0.3726 0.5836 1.001 1.04 2.481 1.584 0.7735 1.3 2.062 \n## day[ 754 ] =  0.8431 1.432 1.414 1.001 2.483 1.357 0.8736 1.3 2.143 0.6465 \n## day[ 755 ] =  0.785 0.9901 0.8324 1.488 0.8955 0.8921 1.577 1.978 0.6313 1.36 \n## day[ 756 ] =  0.374 0.03696 0.1328 0.9815 1.089 1.143 2.382 0.46 1.463 1.19 \n## day[ 757 ] =  1.43 1.133 1.801 2.218 1.647 2.327 0.8391 0.9962 1.342 2.646 \n## day[ 758 ] =  0.3488 0.4514 0.9347 1.286 2.357 0.7126 1.871 0.8058 2.447 3.618 \n## day[ 759 ] =  1.201 1.369 0.9054 0.7169 0.9967 1.505 1.011 2.465 3.395 3.076 \n## day[ 760 ] =  0.1642 0.2967 0.1303 1.175 1.555 0.9992 2.852 3.345 2.716 1.101 \n## day[ 761 ] =  0.1538 0.3779 0.02118 0.3691 1.342 2.985 2.524 3.819 1.534 4.103 \n## day[ 762 ] =  0.0713 1.015 2.46 3.082 3.275 3.403 4.032 1.552 4.565 2.257 \n## day[ 763 ] =  0.551 0.788 1.513 2.376 3.121 3.164 1.378 3.657 1.686 1.749 \n## day[ 764 ] =  0.1345 1.14 1.544 1.431 4.801 1.242 3.65 2.099 1.685 2.116 \n## day[ 765 ] =  0.3648 0.4193 0.3592 0.9545 1.374 3.366 1.484 1.303 2.093 0.7217 \n## day[ 766 ] =  1.149 1.45 1.436 2.369 2.537 1.537 1.459 1.911 0.617 2.605 \n## day[ 767 ] =  0.4721 1.012 1.902 1.807 1.737 1.164 1.587 0.6752 2.795 1.24 \n## day[ 768 ] =  0.5115 0.428 1.833 2.649 1.448 2.52 0.8425 2.815 1.152 1.337 \n## day[ 769 ] =  0.6688 0.9274 1.827 2.05 2.251 0.3692 2.858 1.386 0.9947 1.307 \n## day[ 770 ] =  0.8905 2.907 3.561 2.657 0.6575 2.615 1.369 1.786 1.456 1.225 \n## day[ 771 ] =  0.5563 0.5311 0.042 0.6027 2.909 0.7687 1.174 1.493 1.144 2.114 \n## day[ 772 ] =  1.244 1.758 1.639 2.037 1.244 1.437 1.19 1.015 1.493 2.987 \n## day[ 773 ] =  0.3963 0.03265 1.938 1.575 0.7589 1.242 1.435 1.844 2.338 1.363 \n## day[ 774 ] =  2.049 3.278 3.585 2.013 1.56 0.889 0.7436 1.694 1.055 1.805 \n## day[ 775 ] =  1.371 3.106 3.886 2.26 1.385 1.98 2.196 1.216 1.315 1.393 \n## day[ 776 ] =  0.4086 0.6141 1.267 2.059 1.742 2.904 1.419 1.764 1.285 1.082 \n## day[ 777 ] =  0.1065 1.308 1.086 1.046 2.811 1.444 1.87 1.135 0.8862 1.616 \n## day[ 778 ] =  1.047 0.9668 0.1135 1.172 1.436 2.251 1.507 1.273 1.718 4.379 \n## day[ 779 ] =  0.09476 0.004652 0.1029 1.477 1.594 1.098 0.9574 2.013 6.07 2.434 \n## day[ 780 ] =  0.3683 1.525 2.924 2.157 1.214 1.073 1.869 6.054 2.97 1.451 \n## day[ 781 ] =  0.1541 0.4717 1.913 1.137 1.177 1.85 5.775 3.095 1.747 3.961 \n## day[ 782 ] =  0.6263 1.93 2.481 2.222 1.989 6.283 2.918 1.613 3.992 2.006 \n## day[ 783 ] =  2.485 3.075 1.705 1.535 5.636 2.795 1.618 4.023 2.292 1.634 \n## day[ 784 ] =  1.575 3.751 4.459 3.125 3.204 1.408 4.254 2.547 2.16 1.627 \n## day[ 785 ] =  1.118 2.426 3.256 3.366 1.549 3.8 2.264 1.696 1.062 1.686 \n## day[ 786 ] =  0.9412 1.611 0.1005 2.064 4.172 1.856 1.312 1.313 1.375 1.572 \n## day[ 787 ] =  0.6344 1.354 1.667 2.078 2.002 1.949 1.35 1.628 1.365 2.899 \n## day[ 788 ] =  0.02277 0.9201 1.462 1.305 1.746 1.476 1.667 1.248 2.838 3.089 \n## day[ 789 ] =  0.5097 0.7846 0.8655 1.33 1.649 1.066 1.71 2.349 2.37 1.713 \n## day[ 790 ] =  0.1776 0.4863 0.9899 1.61 1.355 1.126 2.807 2.077 1.42 0.8311 \n## day[ 791 ] =  0.4452 1.168 1.815 1.614 1.369 2.017 2.272 1.544 0.5616 6.338 \n## day[ 792 ] =  1.717 3.557 4.051 2.373 1.979 2.006 1.338 0.6008 6.111 3.043 \n## day[ 793 ] =  1.26 2.032 2.399 2.697 2.418 1.378 0.7502 5.373 2.779 1.637 \n## day[ 794 ] =  0.7328 1.571 1.453 1.791 1.641 0.6026 5.985 2.911 1.773 0.9857 \n## day[ 795 ] =  0.04472 0.1818 0.134 1.276 0.7474 6.299 3.048 2.036 1.015 1.67 \n## day[ 796 ] =  0.2677 0.7108 1.182 0.7979 7.098 3.278 1.883 0.9049 2.006 1.567 \n## day[ 797 ] =  3.499 5.463 5.504 4.668 3.187 2.554 0.8803 1.676 1.624 1.643 \n## day[ 798 ] =  1.197 1.171 4.403 2.106 2.376 0.9483 1.884 1.826 1.736 1.156 \n## day[ 799 ] =  0.1376 0.07376 0.8627 0.9281 0.9657 1.9 1.545 1.356 0.7719 2.202 \n## day[ 800 ] =  0.697 2.028 1.642 2.461 1.827 1.291 1.305 0.9589 2.039 0.683 \n## day[ 801 ] =  0.6138 0.4376 0.8461 1.204 1.461 1.169 0.8041 2.486 0.6827 3.129 \n## day[ 802 ] =  0.2426 0.09188 0.2418 0.8036 1.345 0.9002 2.11 0.9335 2.844 0.6918 \n## day[ 803 ] =  1.417 2.183 2.028 2.45 0.8493 2.327 1.129 2.624 0.9808 1.155 \n## day[ 804 ] =  0.6403 0.01007 0.01707 0.5584 2.17 0.6544 3.623 0.6812 1.529 1.148 \n## day[ 805 ] =  0.7383 0.2775 0.489 1.021 1.134 2.561 1.052 1.091 1.403 2.51 \n## day[ 806 ] =  0.6464 0.6779 1.392 1.241 1.956 1.03 0.9062 1.503 2.429 0.3309 \n## day[ 807 ] =  0.07481 0.42 0.9269 2.833 1.068 0.9686 0.9365 1.443 1.235 2.849 \n## day[ 808 ] =  0.05158 0.3343 0.5565 0.6291 0.8708 1.419 2.231 0.3951 2.036 2.622 \n## day[ 809 ] =  1.408 1.437 0.9172 1.308 0.8396 1.901 0.9716 2.514 2.539 0.5534 \n## day[ 810 ] =  0.453 2.546 0.3158 2.24 1.857 0.2735 2.801 2.362 0.7632 1.443 \n## day[ 811 ] =  0.6871 0.03369 0.2639 1.313 1.088 2.536 2.456 0.386 1.184 1.785 \n## day[ 812 ] =  0.7142 0.4515 0.7513 0.639 3.629 2.269 0.673 1.5 1.936 1.512 \n## day[ 813 ] =  1.104 1.829 2.351 2.725 2.43 0.3743 1.203 1.676 0.9445 4.792 \n## day[ 814 ] =  0.9419 2.097 2.708 1.64 0.5965 1.464 1.903 0.8923 4.847 0.7624 \n## day[ 815 ] =  0.501 0.8714 1.316 0.9413 1.442 1.463 1.256 5.099 0.5667 2.422 \n## day[ 816 ] =  0.4765 0.3675 0.9703 0.966 1.277 0.741 5.495 0.7694 2.538 0.7956 \n## day[ 817 ] =  0.4996 2.191 1.658 1.847 0.7078 5.1 0.678 2.766 0.8657 0.7125 \n## day[ 818 ] =  1.007 1.601 1.925 0.9292 5.137 0.5665 2.316 0.7356 0.5989 0.8363 \n## day[ 819 ] =  1.886 3.602 5.597 5.199 0.7343 2.516 0.8671 0.994 0.6498 0.9326 \n## day[ 820 ] =  0.9344 0.6531 0.2 0.9523 2.918 0.6907 0.6711 0.8781 1.054 2.354 \n## day[ 821 ] =  1.922 2.232 2.716 2.81 1.308 0.8111 0.5224 1.083 2.528 4.237 \n## day[ 822 ] =  0.9075 1.216 1.371 1.131 0.8933 0.7154 0.9302 2.859 2.771 3.271 \n## day[ 823 ] =  0.2139 0.8086 1.316 0.9952 0.7809 1.142 2.301 4.72 2.849 0.7658 \n## day[ 824 ] =  0.216 0.1082 0.00351 0.4207 1.002 2.667 3.774 3.051 1.032 2.4 \n## day[ 825 ] =  0.6676 0.282 0.8524 1.149 2.887 2.202 2.953 0.7609 2.264 1.333 \n## day[ 826 ] =  0.02212 0.1408 0.5226 1.089 2.247 2.792 1.192 2.88 1.53 NaN \n## day[ 827 ] =  1.284 1.367 1.769 5.517 3.174 1.158 2.023 1.448 NaN 2.22 \n## day[ 828 ] =  1.104 1.168 0.3914 1.479 0.9047 2.163 1.52 NaN 1.77 0.6379 \n## day[ 829 ] =  1.112 2.052 2.482 2.065 2.257 1.48 NaN 2.322 1.305 2.324 \n## day[ 830 ] =  0.1822 0.8362 0.2276 0.7858 1.427 NaN 2.183 1.468 2.19 1.205 \n## day[ 831 ] =  0.004093 0.1218 0.1911 1.277 NaN 1.97 0.9799 2.501 0.9546 3.589 \n## day[ 832 ] =  NA NA NA NaN 1.739 0.9897 2.753 1.41 3.616 1.115 \n## day[ 833 ] =  NA NA NA 1.273 0.6266 2.234 0.8185 3.823 1.258 1.002 \n## day[ 834 ] =  0.8482 1.15 0.9236 1.266 2.507 0.8551 3.864 1.095 0.8664 1.224 \n## day[ 835 ] =  1.094 1.845 2.689 2.795 1.12 3.794 1.149 1.191 1.618 0.7635 \n## day[ 836 ] =  0.1316 0.01079 0.2824 0.9794 4.115 1.134 1.271 1.988 0.9495 4.64 \n## day[ 837 ] =  0.8218 1.489 2.03 2.599 1.298 1.174 1.534 0.8173 4.662 1.653 \n## day[ 838 ] =  0.7032 1.355 0.09921 0.7175 1.16 1.659 1.176 3.857 1.354 4.55 \n## day[ 839 ] =  0.6516 0.9136 1.887 1.421 1.495 0.8588 4.522 1.751 4.607 2.47 \n## day[ 840 ] =  0.5765 0.6798 0.2049 1.236 1.051 4.463 1.566 4.23 2.568 2.103 \n## day[ 841 ] =  1.575 2.44 3.812 2.319 4.508 1.557 4.074 2.335 1.597 2.194 \n## day[ 842 ] =  1.234 1.665 2.023 3.227 1.761 3.892 2.371 2.21 3.207 0.4368 \n## day[ 843 ] =  0.6114 1.612 1.798 1.704 3.809 2.194 2.486 3.47 0.2506 1.487 \n## day[ 844 ] =  1.584 0.9276 1.127 2.634 1.809 1.518 2.523 0.7794 1.496 3.498 \n## day[ 845 ] =  1.207 1.392 0.7239 0.9761 2.091 0.9199 0.4886 1.458 3.173 3.083 \n## day[ 846 ] =  1.669 3.637 4.021 2.618 2.542 0.3795 1.213 2.845 2.883 1.977 \n## day[ 847 ] =  1.566 1.681 2.346 2.019 0.1899 1.543 3.025 3.1 2.026 1.486 \n## day[ 848 ] =  0.8793 0.9632 NA 0.9213 1.421 2.959 3.107 1.917 1.465 0.8746 \n## day[ 849 ] =  0.1206 0.2744 0.4276 1.122 3.08 3.329 2.136 1.004 1.082 0.7906 \n## day[ 850 ] =  0.2992 0.24 0.05117 1.259 3.014 1.918 1.254 0.7777 1.324 1.08 \n## day[ 851 ] =  0.2199 0.6856 0.838 2.733 1.741 1.387 1.162 0.9663 1.231 1.356 \n## day[ 852 ] =  0.04425 0.5024 0.1228 2.195 1.617 1.29 1.065 1.031 1.965 1.56 \n## day[ 853 ] =  1.398 1.544 1.679 1.057 1.058 0.9078 1.012 1.261 1.774 2.058 \n## day[ 854 ] =  0.2973 0.6257 0.5255 1.919 1.04 0.7991 1.543 1.628 2.805 2.267 \n## day[ 855 ] =  0.2691 0.7668 0.8176 0.8774 1.291 1.464 1.653 2.703 2.295 3.464 \n## day[ 856 ] =  0.5776 1.072 0.9986 1.089 1.394 2.24 2.67 2.768 4.463 1.891 \n## day[ 857 ] =  0.3995 0.1724 0.1333 0.9075 2.199 3.373 3.066 4.937 2.243 3.717 \n## day[ 858 ] =  0.3765 1.108 0.4589 1.599 3.251 2.272 4.033 2.029 3.625 4.353 \n## day[ 859 ] =  0.3049 0.1435 0.3993 2.369 1.769 4.466 2.575 2.567 3.844 2.01 \n## day[ 860 ] =  0.9337 1.185 1.2 1.34 4.607 2.12 1.979 4.25 2.468 4.979 \n## day[ 861 ] =  2.738 3.99 4.329 2.946 2.172 3.106 4.388 2.85 5.165 3.918 \n## day[ 862 ] =  1.639 2.929 3.383 2.059 3.548 4.66 2.742 5.701 3.171 1.112 \n## day[ 863 ] =  0.6774 3.677 5.688 2.517 3.979 2.15 4.792 3.469 1.286 1.294 \n## day[ 864 ] =  0.4617 0.48 1.154 1.246 1.893 3.772 3.635 1.163 1.3 2.078 \n## day[ 865 ] =  0.5564 0.2922 0.07709 1.024 4.038 3.571 0.9897 1.235 1.761 1.139 \n## day[ 866 ] =  0.7294 1.293 2.438 2.268 3.11 1.206 1.271 1.715 0.9885 0.7598 \n## day[ 867 ] =  0.6517 0.5888 0.5493 1.668 1.067 1.501 1.45 0.9885 0.7945 2.525 \n## day[ 868 ] =  0.009014 0.01873 0.138 1.011 1.35 1.317 1.379 0.9806 2.994 NaN \n## day[ 869 ] =  0.2874 0.6241 0.5584 1.493 2.107 1.226 0.4466 3.164 NaN NaN \n## day[ 870 ] =  1.531 2.474 2.721 2.974 0.8238 0.7265 1.845 NaN NaN NaN \n## day[ 871 ] =  1.4 1.179 1.81 2.166 1.343 3.31 NaN NaN NaN 5.489 \n## day[ 872 ] =  0.5051 0.1095 0.6559 1.461 3.632 NaN NaN NaN 4.324 0.9153 \n## day[ 873 ] =  0.2432 0.2272 0.1303 0.9205 NaN NaN NaN 4.648 1.343 1.037 \n## day[ 874 ] =  NA NA NA NaN NaN NaN 4.672 1.316 1.015 2.332 \n## day[ 875 ] =  NA NA NA NaN NaN 5.726 0.8132 0.6281 3.316 NaN \n## day[ 876 ] =  NA NA NA NaN 4.145 1.301 1.322 2.345 NaN NaN \n## day[ 877 ] =  1.597 2.944 4.224 4.825 1.045 1.185 2.856 NaN NaN NaN \n## day[ 878 ] =  0.8777 1.705 0.6801 1.251 1.494 3.458 NaN NaN NaN NaN \n## day[ 879 ] =  0.3832 0.2008 0.2392 0.2744 2.725 NaN NaN NaN NaN NaN \n## day[ 880 ] =  NA NA NA 2.723 NaN NaN NaN NaN NaN 5.734 \n## day[ 881 ] =  NA NA NA NaN NaN NaN NaN NaN 1.047 2.139 \n## day[ 882 ] =  NA NA NA NaN NaN NaN NaN 0.9618 2.609 3.477 \n## day[ 883 ] =  NA NA NA NaN NaN NaN 0.9468 2.154 2.781 NaN \n## day[ 884 ] =  NA NA NA NaN NaN 0.8901 2.691 3.815 NaN 6.598 \n## day[ 885 ] =  NA NA NA NaN 1.304 3.009 3.91 NaN 4.864 3.606 \n## day[ 886 ] =  1.136 0.4944 0.4084 0.8108 2.539 3.156 NaN 5.827 3.186 7.05 \n## day[ 887 ] =  0.5777 2.34 1.653 0.9671 3.767 NaN 6.959 3.356 6.765 1.544 \n## day[ 888 ] =  2.048 3.489 3.436 3.993 NaN 4.75 4.465 7.363 1.213 3.4 \n## day[ 889 ] =  NA NA NA NaN 0.942 4.12 7.98 2.516 3.37 2.661 \n## day[ 890 ] =  0.2729 0.9177 1.794 1.209 3.954 7.298 1.817 3.403 2.385 1.933 \n## day[ 891 ] =  0.4636 0.9215 2.07 1.527 6.156 1.868 3.119 2.611 1.81 2.701 \n## day[ 892 ] =  0.2142 0.8771 0.1375 2.675 1.918 3.209 2.324 2.012 3.418 1.527 \n## day[ 893 ] =  1.647 3.619 4.482 2.985 3.565 2.363 1.815 2.379 1.923 5.524 \n## day[ 894 ] =  0.6835 1.575 0.5679 1.895 2.561 1.886 2.581 1.784 5.449 1.481 \n## day[ 895 ] =  0.7503 0.004225 0.9417 0.6533 2.401 3.475 1.738 5.521 1.394 3.107 \n## day[ 896 ] =  1.447 4.086 6.935 3.751 3.453 1.202 6.037 1.586 3.289 4.933 \n## day[ 897 ] =  1.395 1.649 0.7707 1.55 1.542 6.296 2.351 3.204 4.807 1.777 \n## day[ 898 ] =  0.2927 0.6483 0.2388 1.971 5.863 2.01 3.04 4.292 1.459 3.679 \n## day[ 899 ] =  1.289 0.7276 1.795 1.131 1.902 3.737 4.674 1.563 3.245 2.215 \n## day[ 900 ] =  0.08121 0.1114 0.855 2.015 3.926 4.605 1.807 2.866 2.298 1.235 \n## day[ 901 ] =  1.292 2.112 0.7555 0.8881 4.703 1.686 3.463 2.573 1.585 3.982 \n## day[ 902 ] =  0.3097 0.1025 0.7904 1.069 1.801 3.832 2.58 1.872 3.755 NaN \n## day[ 903 ] =  0.7814 0.9525 1.008 1.161 2.267 2.696 1.215 4.181 NaN NaN \n## day[ 904 ] =  0.9081 0.2309 0.8233 0.9675 2.665 1.329 3.409 NaN NaN NaN \n## day[ 905 ] =  0.4064 1.626 1.822 1.958 1.691 4.164 NaN NaN NaN 1.203 \n## day[ 906 ] =  0.2554 0.02754 0.3045 1.279 3.785 NaN NaN NaN 1.616 2.269 \n## day[ 907 ] =  0.6005 0.2285 0.1341 1.247 NaN NaN NaN 1.049 2.437 4.152 \n## day[ 908 ] =  NA NA NA NaN NaN NaN 2.728 2.351 3.915 9.929 \n## day[ 909 ] =  NA NA NA NaN NaN 3.009 3.156 4.317 9.909 4.301 \n## day[ 910 ] =  NA NA NA NaN 3.308 2.15 5.465 9.836 4.607 1.437 \n## day[ 911 ] =  NA NA 4.904 3.277 1.926 4.106 8.167 4.903 1.181 NaN \n## day[ 912 ] =  0.7965 1.273 0.4233 1.892 4.887 9.427 4.942 1.746 NaN NaN \n## day[ 913 ] =  0.8312 0.7239 0.7403 1.581 8.778 4.42 1.101 NaN NaN 3.753 \n## day[ 914 ] =  0.1237 1.365 1.546 5.049 5.491 1.665 NaN NaN 3.057 3.871 \n## day[ 915 ] =  0.1436 1.442 2.086 2.699 1.465 NaN NaN 2.782 3.859 3.668 \n## day[ 916 ] =  0.1448 0.2534 0.5838 1.87 NaN NaN 4.083 4.611 3.668 3.156 \n## day[ 917 ] =  NA NA NA NaN NaN 4.774 4.033 3.596 2.408 2.545 \n## day[ 918 ] =  NA NA NA NaN 5.987 4.135 3.676 2.977 1.883 2.509 \n## day[ 919 ] =  9.959 8.7 7.884 5.899 4.305 3.367 3.843 3.31 2.796 2.71 \n## day[ 920 ] =  0.1177 0.5159 2.222 5.101 3.316 2.834 2.199 1.751 2.592 2.801 \n## day[ 921 ] =  0.9821 1.982 2.16 1.572 2.727 3.281 2.447 3.478 2.621 3.098 \n## day[ 922 ] =  0.2447 1.499 2.404 2.098 3.062 2.82 2.522 2.602 3.087 2.585 \n## day[ 923 ] =  1.305 1.92 0.7165 1.126 1.628 2.663 2.912 2.809 1.935 3.944 \n## day[ 924 ] =  NA NA NA 0.8531 2.366 2.867 3.059 2.684 4.537 3.123 \n## day[ 925 ] =  0.4403 1.302 3.616 1.621 2.577 2.83 1.973 4.163 3.769 8.815 \n## day[ 926 ] =  0.2794 0.1626 0.3023 1.726 3.263 2.072 3.801 3.696 8.007 1.849 \n## day[ 927 ] =  1.329 2.161 0.2927 2.31 2.138 4.45 4.15 7.792 2.608 2.038 \n## day[ 928 ] =  0.146 1.349 0.8016 2.681 4.428 4.064 7.706 2.575 2.797 4.577 \n## day[ 929 ] =  1.53 2.569 1.23 1.585 3.401 8.421 2.526 1.725 4.522 11.89 \n## day[ 930 ] =  0.2116 2.066 5.972 3.602 6.153 2.062 2.371 4.251 10.25 3.598 \n## day[ 931 ] =  1.66 0.8848 0.6989 0.7825 2.017 1.806 4.093 11.07 3.91 2.322 \n## day[ 932 ] =  0.7192 0.08919 0.3162 1.57 2.112 4.831 10.15 3.914 2.934 12.04 \n## day[ 933 ] =  0.5929 0.5012 1.34 2.116 4.658 10.07 3.816 1.695 10.71 9.649 \n## day[ 934 ] =  0.02987 0.7288 0.8727 1.683 10.61 3.488 1.933 12.12 10.62 4.902 \n## day[ 935 ] =  3.551 2.736 4.255 4.735 3.497 1.843 9.198 10.07 4.792 2.444 \n## day[ 936 ] =  0.7732 1.666 0.0002773 1.15 2.085 10.25 9.996 4.384 2.654 3.93 \n## day[ 937 ] =  0.7256 0.4824 1.119 0.761 10.91 10.7 4.787 2.633 3.278 2.272 \n## day[ 938 ] =  1.134 2.981 4.73 2.467 11.45 4.949 2.453 3.525 2.692 3.786 \n## day[ 939 ] =  1.347 3.151 5.163 5.359 4.848 2.63 3.279 2.698 4.683 4.517 \n## day[ 940 ] =  1.085 2.035 1.654 0.9974 3.026 3.901 3.179 4.155 5.121 2.495 \n## day[ 941 ] =  1.355 1.034 0.3512 1.389 3.79 3.297 3.89 6.093 2.74 3.507 \n## day[ 942 ] =  0.156 0.06497 1.53 2.699 2.608 3.892 4.706 2.146 4.03 10.09 \n## day[ 943 ] =  1.43 2.374 2.889 2.711 5.397 5.716 2.26 3.999 8.517 5.858 \n## day[ 944 ] =  0.374 0.6836 0.9391 1.881 5.346 2.965 3.86 9.13 5.298 5.166 \n## day[ 945 ] =  0.2003 0.4165 0.6779 0.7981 2.31 3.699 8.654 7.184 5.877 8.527 \n## day[ 946 ] =  1.071 1.911 4.272 2.422 3.951 9.557 6.349 4.971 8.156 3.95 \n## day[ 947 ] =  1.181 2.26 2.006 3.223 9.058 6.29 4.651 9.268 5.226 2.321 \n## day[ 948 ] =  1.332 2.592 4.645 4.113 5.386 4.966 9.194 5.459 2.198 2.446 \n## day[ 949 ] =  NA NA 4.898 1.978 5.678 8.849 5.538 2.052 2.82 1.589 \n## day[ 950 ] =  1.061 2.928 3.108 4.012 8.676 4.762 2.369 2.432 1.41 3.089 \n## day[ 951 ] =  1.159 1.902 2.784 3.327 3.854 2.283 2.46 1.66 3.437 1.473 \n## day[ 952 ] =  0.4758 2.65 4.448 2.299 2.494 3.467 2.38 3.907 1.7 3.781 \n## day[ 953 ] =  0.2454 1.36 2.925 1.368 3.172 1.687 3.149 2.05 3.705 3.045 \n## day[ 954 ] =  0.509 2.151 1.186 1.701 1.65 3.656 2.103 3.265 2.542 2.57 \n## day[ 955 ] =  0.2628 1.042 0.2794 0.8756 3.03 1.808 3.129 2.313 2.66 3.976 \n## day[ 956 ] =  0.2148 0.95 1.264 0.7332 1.549 4.48 2.335 2.274 3.503 5.346 \n## day[ 957 ] =  1.066 1.437 0.1746 1.214 3.152 1.607 2.313 3.382 5.421 2.607 \n## day[ 958 ] =  0.5561 1.051 0.7619 1.403 2.347 2.509 2.919 6.015 1.875 1.907 \n## day[ 959 ] =  0.5438 0.1106 2.364 2.17 2.971 3.382 6.195 2.255 2.347 1.867 \n## day[ 960 ] =  0.1515 0.2449 0.4943 1.175 2.986 6.381 2.353 2.31 1.831 0.8 \n## day[ 961 ] =  1.836 2.611 3.376 1.945 6.497 2.405 2.099 2.03 0.6159 2.479 \n## day[ 962 ] =  0.05794 0.5459 1.443 0.991 2.734 2.46 2.167 0.7634 2.471 5.406 \n## day[ 963 ] =  0.9669 1.026 0.7721 2.509 1.707 2.618 0.93 2.152 3.343 3.718 \n## day[ 964 ] =  0.6155 0.6017 1.868 1.982 2.073 0.8476 1.891 4.075 4.908 4.232 \n## day[ 965 ] =  1.353 1 0.03021 2.153 1.943 2.277 4 4.32 3.926 2.439 \n## day[ 966 ] =  0.5683 0.766 0.6346 0.8515 2.803 4.3 4.462 3.59 1.872 3.966 \n## day[ 967 ] =  NA 7.457 6.113 2.651 4.022 4.579 3.009 2.102 3.664 4.482 \n## day[ 968 ] =  0.9594 0.2303 0.1867 0.8316 4.737 4.832 2.121 2.67 5.308 4.956 \n## day[ 969 ] =  0.2521 0.6506 0.6037 1.378 3.477 1.5 2.722 4.716 5.449 4.116 \n## day[ 970 ] =  0.5198 0.4596 0.2645 0.64 2.144 3.342 4.087 5.117 3.474 4.201 \n## day[ 971 ] =  0.33 1.014 1.18 1.369 3.383 4.838 4.443 2.859 3.681 2.763 \n## day[ 972 ] =  1.094 0.06179 1.834 4.406 4.633 5.053 3.483 5.564 4.554 11.02 \n## day[ 973 ] =  1.208 1.008 1.535 3.363 3.533 4.087 5.339 4.044 11.03 13 \n## day[ 974 ] =  0.8322 1.438 1.999 1.418 5.374 5.432 5.832 11.51 14.62 11.59 \n## day[ 975 ] =  0.3543 0.2091 0.7105 1.312 6.279 6.034 11.22 14.15 10.54 9.582 \n## day[ 976 ] =  0.5314 0.6567 1.156 2.202 4.93 11.21 13.83 10.5 9.216 2.157 \n## day[ 977 ] =  1.065 2.658 3.786 1.91 8.279 12.84 9.541 9.418 1.596 3.941 \n## day[ 978 ] =  1.608 1.78 2.879 2.662 13.46 10.44 7.686 2.215 8.145 9.243 \n## day[ 979 ] =  1.761 2.542 3.599 4.63 6.157 6.85 3.791 5.683 7.552 11.11 \n## day[ 980 ] =  1.367 1.592 2.589 2.972 7.804 3.371 6.296 7.226 10.32 3.125 \n## day[ 981 ] =  1.088 2.368 3.126 1.438 2.723 5.945 6.161 9.303 2.746 2.893 \n## day[ 982 ] =  1.539 2.503 2.916 2.172 6.842 8.138 13.43 3.837 4.014 8.094 \n## day[ 983 ] =  1.381 2.086 3.786 3.147 7.118 10.22 2.574 2.844 5.155 5.428 \n## day[ 984 ] =  0.8203 3.206 5.062 3.812 6.448 3.537 3.06 3.795 5.847 1.463 \n## day[ 985 ] =  1.03 2.707 2.181 2.975 3.268 3.089 5.926 3.969 1.783 1.691 \n## day[ 986 ] =  0.4053 0.05044 1.041 0.899 3.374 3.78 5.525 2.322 1.476 1.237 \n## day[ 987 ] =  2.216 3.93 3.549 2.156 4.387 2.695 1.411 1.488 0.9274 2.81 \n## day[ 988 ] =  0.007531 0.9424 1.999 1.413 3.201 1.22 1.1 1.074 2.758 2.212 \n## day[ 989 ] =  2.179 3.057 4.138 3.322 1.964 1.231 1.348 3.794 2.659 1.363 \n## day[ 990 ] =  NA NA NA 1.645 1.436 1.851 3.613 3.019 1.059 2.856 \n## day[ 991 ] =  0.07684 0.921 1.909 1.487 1.135 2.784 2.114 1.499 2.596 3.06 \n## day[ 992 ] =  1.927 1.088 2.225 1.952 2.535 2.795 1.128 2.296 3.626 0.9304 \n## day[ 993 ] =  0.5644 0.6859 1.062 1.864 1.889 1.132 3.196 4.239 0.9707 1.987 \n## day[ 994 ] =  0.09293 0.5709 0.9867 1.002 1.143 2.719 3.86 1.141 2.15 2.988 \n## day[ 995 ] =  0.1055 0.2655 0.325 0.5025 2.416 3.358 1.011 1.362 3.011 2.203 \n## day[ 996 ] =  0.8872 1.188 1.53 1.507 3.593 1.254 2.435 2.464 1.855 5.829 \n## day[ 997 ] =  0.2729 0.3491 1.673 1.119 0.9815 2.288 3.183 2.765 5.877 1.241 \n## day[ 998 ] =  0.4975 1.053 2.349 1.928 1.493 2.221 2.301 5.488 1.683 2.021 \n## day[ 999 ] =  0.3359 0.8071 0.009154 1.351 2.933 2.336 5.363 1.335 2.095 1.267 \n## day[ 1000 ] =  0.2963 1.624 2.161 1.466 2.412 4.85 1.351 2.079 1.052 1.171 \n## day[ 1001 ] =  0.3228 0.004445 0.6402 1.012 5.76 1.244 2.367 1.571 1.212 1.789 \n## day[ 1002 ] =  0.1837 0.5287 0.03657 2.009 1.253 1.686 1.553 1.358 1.73 1.05 \n## day[ 1003 ] =  0.3621 1.079 2.52 1.857 1.343 1.482 1.174 1.762 1.117 2.447 \n## day[ 1004 ] =  0.3659 0.9471 0.5448 0.6857 1.256 1.774 1.448 0.5275 2.399 1.727 \n## day[ 1005 ] =  0.3575 0.4243 1.373 1.872 1.387 1.78 0.7224 2.182 1.739 1.365 \n## day[ 1006 ] =  0.05019 0.05151 0.5493 0.7399 2.258 0.7721 2.118 1.27 1.156 0.8753 \n## day[ 1007 ] =  0.9077 0.6892 0.7534 0.6091 0.8696 2.092 2.002 1.219 0.6177 1.253 \n## day[ 1008 ] =  0.4808 0.9114 1.476 2.245 3.011 2.558 1.015 0.8958 0.9175 1.66 \n## day[ 1009 ] =  0.2517 0.2213 0.5702 0.8422 2.023 1.125 1.129 0.9599 1.638 1.492 \n## day[ 1010 ] =  0.7029 0.4115 0.467 0.7507 1.067 0.9912 1.024 1.22 1.269 1.841 \n## day[ 1011 ] =  0.02469 0.2862 0.6601 1.022 1.069 0.6508 1.372 1.228 1.318 NaN \n## day[ 1012 ] =  0.7835 0.7472 0.9388 1.584 1.057 1.786 1.272 1.866 NaN 0.6737 \n## day[ 1013 ] =  0.1469 0.4261 0.3302 0.9338 1.413 1.19 1.592 NaN 0.3707 0.7178 \n## day[ 1014 ] =  1.971 2.422 3.347 1.723 1.094 1.528 NaN 0.8259 1.398 1.368 \n## day[ 1015 ] =  1.464 1.717 1.534 2.178 1.122 NaN 0.8147 1.043 1.196 1.574 \n## day[ 1016 ] =  0.4828 0.9896 1.045 1.267 NaN 0.586 1.224 1.328 1.342 5.536 \n## day[ 1017 ] =  NA NA NA NaN 1.79 1.246 1.374 1.349 5.701 1.193 \n## day[ 1018 ] =  0.967 1.049 1.565 1.628 0.9087 1.535 1.723 5.744 1.47 1.693 \n## day[ 1019 ] =  0.6213 0.5032 1.011 0.7066 1.264 1.351 6.125 1.458 1.635 2.328 \n## day[ 1020 ] =  0.2128 0.02323 0.04632 0.7923 1.197 5.824 1.406 1.571 2.158 1.678 \n## day[ 1021 ] =  0.2879 1.18 1.565 1.229 5.597 1.307 1.771 2.284 1.686 1.298 \n## day[ 1022 ] =  1.077 1.946 3.43 4.276 1.384 1.472 2.399 1.723 1.194 NaN \n## day[ 1023 ] =  0.7968 0.9988 0.3578 1.313 2.149 2.347 1.611 1.309 NaN NaN \n## day[ 1024 ] =  0.6905 1.222 1.54 1.698 2.538 1.342 0.8926 NaN NaN NaN \n## day[ 1025 ] =  0.2793 0.8639 0.6621 1.618 1.313 1.187 NaN NaN NaN 1.429 \n## day[ 1026 ] =  1.83 2.998 3.719 2.102 1.331 NaN NaN NaN 1.471 1.178 \n## day[ 1027 ] =  0.04973 0.5641 0.1993 0.4879 NaN NaN NaN 1.197 0.5932 1.847 \n## day[ 1028 ] =  NA NA NA NaN NaN NaN 1.615 0.9513 1.476 1.895 \n## day[ 1029 ] =  NA NA NA NaN NaN 1.49 0.6685 1.645 1.737 2.392 \n## day[ 1030 ] =  NA NA NA NaN 1.118 1.052 2.084 1.996 2.463 1.403 \n## day[ 1031 ] =  1.363 1.828 1.633 1.661 0.7464 2.149 1.876 2.311 1.263 2.512 \n## day[ 1032 ] =  0.4049 0.1386 0.9256 0.772 1.94 2.085 2.044 1.062 2.324 0.8491 \n## day[ 1033 ] =  1.173 1.866 1.866 1.899 1.627 1.849 1.594 2.228 0.8922 0.9553 \n## day[ 1034 ] =  0.4257 1.964 2.692 2.324 2.184 1.565 2.153 0.7617 1.16 1.171 \n## day[ 1035 ] =  0.9051 2.358 3.317 2.125 1.5 2.209 0.7656 1.232 0.9506 2.252 \n## day[ 1036 ] =  0.004293 0.2058 0.2089 1.826 2.729 1.112 1.175 1.179 2.198 1.299 \n## day[ 1037 ] =  0.6794 1.515 1.079 2.486 0.9304 0.8775 1.427 2.314 1.031 1.507 \n## day[ 1038 ] =  0.02813 0.03226 0.6544 0.4163 0.9885 0.9549 1.801 1.218 1.092 3.35 \n## day[ 1039 ] =  0.6643 1.181 1.399 1.764 1.109 2.713 1.246 1.282 3.615 1.877 \n## day[ 1040 ] =  0.4548 0.5862 1.322 1.304 2.47 0.8558 0.9964 3.723 1.559 0.6408 \n## day[ 1041 ] =  0.4936 0.2146 0.05015 0.7373 1.085 1.025 3.641 1.68 1.059 2.249 \n## day[ 1042 ] =  0.1403 0.1536 0.05453 0.5095 1.019 3.504 1.55 1.061 2.377 1.429 \n## day[ 1043 ] =  0.1181 1.042 0.9529 1.359 3.291 1.353 0.9491 2.442 1.289 21.42 \n## day[ 1044 ] =  0.8617 0.341 0.2819 1.278 1.615 0.8011 2.409 1.366 21.98 22.09 \n## day[ 1045 ] =  1.897 3.504 3.46 2.209 0.8717 2.109 1.058 20.56 22.31 13.66 \n## day[ 1046 ] =  0.1048 0.1057 0.2055 0.531 2.301 1.441 21.08 22.28 12.86 1.416 \n## day[ 1047 ] =  0.0549 0.4997 0.4988 1.165 1.298 21.73 22.79 12.7 1.633 3.363 \n## day[ 1048 ] =  0.2064 0.08386 0.2114 0.9112 21.14 23.23 12.49 2.12 3.464 0.9297 \n## day[ 1049 ] =  2.938 4.172 5.933 13.19 23.79 13.71 1.71 3.452 2.044 2.7 \n## day[ 1050 ] =  2.563 4.037 4.861 12.64 12.54 1.978 3.541 1.438 2.673 9.186 \n## day[ 1051 ] =  3.873 6.309 8.431 6.238 1.921 3.4 1.83 3.154 8.909 8.184 \n## day[ 1052 ] =  0.5621 1.253 2.061 1.759 3.162 1.382 1.119 7.542 7.814 1.293 \n## day[ 1053 ] =  1.498 2.445 2.679 1.63 1.545 1.404 7.803 8.055 2.031 1.356 \n## day[ 1054 ] =  0.4728 0.7318 0.9466 0.7786 1.581 9.082 9.888 1.78 0.9406 1.844 \n## day[ 1055 ] =  0.8625 0.2189 0.253 0.8992 8.426 8.649 1.363 0.7342 2.128 17.45 \n## day[ 1056 ] =  1.016 0.9011 0.3316 1.113 5.516 2.698 1.201 1.819 17.19 8.427 \n## day[ 1057 ] =  0.05687 0.6331 1.067 1.266 3.827 1.936 1.664 16.8 7.894 4.532 \n## day[ 1058 ] =  0.3584 0.5657 0.6369 0.6925 0.7753 1.388 17.14 8.614 3.236 1.705 \n## day[ 1059 ] =  0.7917 2.008 2.124 1.512 2.419 17.14 8.486 4.097 0.7575 1.167 \n## day[ 1060 ] =  0.4789 0.01536 0.8723 1.372 15.94 7.032 4.564 1.106 1.874 2.334 \n## day[ 1061 ] =  0.3335 0.9658 3.919 13.96 8.396 4.199 1.07 1.115 2.157 1.014 \n## day[ 1062 ] =  2.626 4.423 5.504 6.514 3.553 0.841 1.676 2.139 0.8837 1.979 \n## day[ 1063 ] =  0.8697 1.86 1.519 2.377 1.116 1.426 2.821 1.418 1.658 0.8836 \n## day[ 1064 ] =  0.2347 1.253 2.906 4.972 2.576 3.07 1.199 2.014 1.202 3.004 \n## day[ 1065 ] =  0.1255 0.465 0.2148 1.155 2.264 0.6154 2.019 0.999 1.751 1.571 \n## day[ 1066 ] =  0.2668 0.4605 0.2002 1.746 1.166 1.606 1.48 3.552 2.236 0.8626 \n## day[ 1067 ] =  0.2746 0.1017 0.6046 0.9956 1.053 1.14 2.419 2.129 0.8488 4.014 \n## day[ 1068 ] =  0.02029 0.3842 0.5787 0.6539 1.354 3.036 1.503 1.276 4.079 0.9891 \n## day[ 1069 ] =  0.2481 0.2906 0.3992 0.7333 2.839 2.238 0.7069 4.084 1.053 1.786 \n## day[ 1070 ] =  1.211 0.1225 0.1586 1.565 2.98 1.023 4.186 0.9638 1.884 1.433 \n## day[ 1071 ] =  0.1093 0.414 0.2506 0.4943 0.5955 4.023 1.032 1.632 1.786 1.264 \n## day[ 1072 ] =  0.6969 1.331 1.828 1.019 4.334 0.9861 1.828 1.465 1.301 2.373 \n## day[ 1073 ] =  0.7737 1.55 0.9749 1.624 1.051 1.651 1.382 1.412 1.672 1.357 \n## day[ 1074 ] =  0.8886 0.7685 1.216 1.064 1.723 1.196 1.184 1.889 1.359 0.4735 \n## day[ 1075 ] =  0.6368 2.397 2.017 1.514 1.364 1.458 1.961 1.303 0.5964 0.5331 \n## day[ 1076 ] =  0.4903 0.5817 0.4623 0.8351 1.109 2.131 1.157 0.5355 0.7321 0.7231 \n## day[ 1077 ] =  0.2208 0.3685 0.4769 0.5048 2.513 0.9875 0.7604 0.583 0.9366 2.246 \n## day[ 1078 ] =  0.1807 0.3862 1.517 1.228 1.119 0.6894 1.04 1.085 2.034 3.659 \n## day[ 1079 ] =  0.4387 0.4419 0.1679 0.8733 0.421 0.7902 1.625 2.22 3.667 0.7977 \n## day[ 1080 ] =  0.405 0.5637 0.5965 1.184 0.5701 0.9456 2.047 3.44 0.4751 1.176 \n## day[ 1081 ] =  1.413 0.5434 0.02365 0.6316 0.8657 2.069 4.353 1.153 0.7944 3.465 \n## day[ 1082 ] =  0.1239 0.2472 0.2314 0.7566 1.821 2.844 0.5765 0.6582 3.516 5.605 \n## day[ 1083 ] =  1.74 2.221 2.447 1.442 3.415 1.011 1.322 2.965 8.505 3.522 \n## day[ 1084 ] =  0.818 2.053 2.326 1.739 1.196 1.936 3.13 8.614 0.9147 1.033 \n## day[ 1085 ] =  0.3306 0.001199 0.2361 1.724 0.4047 4.029 5.549 3.23 0.6804 2.852 \n## day[ 1086 ] =  0.1241 0.2759 0.7125 0.9942 4.17 8.504 2.678 2.049 3.373 1.489 \n## average =  0.7947 1.27 1.614 1.883 2.785 2.85 2.856 2.857 2.834 2.88\n```\n\n\n\n\n```r\n# pulls the 4th element out of each result\nhour.1 = sapply(train.periods, function(x) apply(mapes[[as.character(x)]], 2, \n    mean, na.rm = TRUE)[1])\nhour.3 = sapply(train.periods, function(x) apply(mapes[[as.character(x)]], 2, \n    mean, na.rm = TRUE)[3])\nday.1 = sapply(train.periods, function(x) apply(mapes[[as.character(x)]], 2, \n    mean, na.rm = TRUE)[4])\nday.3 = sapply(train.periods, function(x) apply(mapes[[as.character(x)]], 2, \n    mean, na.rm = TRUE)[6])\n\ndata.range = range(hour.1, hour.3, day.1, day.3)\nplot(train.periods, hour.1, col = \"red\", pch = 19, type = \"p\", xlab = \"training days\", \n    ylab = \"MAPE\", ylim = data.range)\npoints(loess.smooth(train.periods, hour.1, span = 0.5), type = \"l\", col = \"red\")\n\npoints(train.periods, hour.3, col = \"grey\", pch = 19, type = \"p\")\npoints(loess.smooth(train.periods, hour.3, span = 0.5), type = \"l\", col = \"grey\")\n\npoints(train.periods, day.1, col = \"blue\", pch = 19, type = \"p\")\npoints(loess.smooth(train.periods, day.1, span = 0.5), type = \"l\", col = \"blue\")\n\npoints(train.periods, day.3, col = \"green\", pch = 19, type = \"p\")\npoints(loess.smooth(train.periods, day.3, span = 0.5), type = \"l\", col = \"green\")\n\nlegend(630, max(data.range), c(\"hour 1\", \"hour 3\", \"day 1\", \"day 3\"), col = c(\"red\", \n    \"grey\", \"blue\", \"green\"), pch = c(19, 19, 19))\n```\n\n<img src=\"analysis/images/plot-day-1.png\" title=\"plot of chunk plot-day-1\" alt=\"plot of chunk plot-day-1\" style=\"display: block; margin: auto;\" />\n\n\nBased on this plot it appears that the MAPE doesn't improve much, if any beyond about 400 days.\nAlbeit small, the improvement does appear to continue for period above 2 years.  For now we\nshould train with all past data.\n\n## Appendix - Generating this Document\n\nIf you are in RStudio and want an HTML version of this document, just click Knit HTML above this pane.  If you want to generate the markdown for the github wiki, keep reading.\n\nFirst, configure the figure path so that the images end up in the images folder with\na relative url in \"analysis/images/\"\n```r\nrequire(knitr)\ngetwd()\nsetwd(\"/your/path/to/advanced-apps.wiki/analysis\")  # change this line to your path\nopts_knit$set(base.dir = '..')\nopts_chunk$set(fig.path = paste0(basename(getwd()), '/images/'))\n```\n\nThen you can generate the markdown for this page using the `knitr` package\n```r\nknit(\"mapeLoop.Rmd\", output=\"Optimizing-Number-Training-Days.md\")\n\n# if you want to get a pretty email when it's done\nsystem(\"uuencode images/plot-day-1.png mape-plot.png | mailx -s 'MAPE plot' tra@mac.com\")\n```\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":34,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/Optimizing-Number-Training-Days.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5c092a8959ec06a380ee85935fb8533b5c53b454","deserializer":"TextBuffer"},{"text":"```{r, echo=FALSE}\nopts_chunk$set(warning = FALSE)\nopts_chunk$set(collapse = TRUE)\nsource('fcu.R')\nsource('mape.R')\nrequire(gbm)\n```\n\n## Training with Mean vs Hour-Ending\n\nFor previous analyses we have been training with averages over the hour.\nBut our current system uses the points at the end of an hour for training.\nLet's take a look at how they both perform when predicting what the load will be\nat the end of each hour.\n\nTo do this analysis, the data loader had to be changed so that we can load either\nas an average over the hour or at the end-of-hour.\n\n```{r loads-moh, results=\"hide\", cache=TRUE}\nloads.moh = fcu.load(coalesce=mean)\n```\n\nNow reloading the same data with end-of-hour points:\n```{r load-eoh, results=\"hide\", cache=TRUE}\nloads.eoh = fcu.load(coalesce=last)\n```\n\nFirst, let's see how we do building a model with mean data and testing with end-of-hour data.\n```{r test-moh}\nmodel_mape(gbm, load~.-day, loads.moh, tdata=loads.eoh, distribution=\"gaussian\", n.trees=1000, interaction.depth=4, shrinkage=0.25, verbose=TRUE)\nmodel_mape(gbm, load~.-day-load.prev, loads.moh, tdata=loads.eoh, distribution=\"gaussian\", n.trees=1000, interaction.depth=4, shrinkage=0.25, verbose=TRUE)\n```\n\nCompare that to modeling and testing both with end-of-hour data.\n```{r test-eoh}\nmodel_mape(gbm, load~.-day, loads.eoh, tdata=loads.eoh, distribution=\"gaussian\", n.trees=1000, interaction.depth=4, shrinkage=0.25, verbose=TRUE)\nmodel_mape(gbm, load~.-day-load.prev, loads.eoh, tdata=loads.eoh, distribution=\"gaussian\", n.trees=1000, interaction.depth=4, shrinkage=0.25, verbose=TRUE)\n```\n\n## Conclusion\n\nTraining with end-of-hour is significanly better than training with mean values.\nNear-term estimates errors decreased from 1.3% to 1.0% and long-term estimate errors decreased\nfrom 2.9% to 2.3%.\n\n## Appendix - Generating this Document\n\nIf you are in RStudio and want an HTML version of this document, just click Knit HTML above this pane.  If you want to generate the markdown for the github wiki, keep reading.\n\nFirst, configure the figure path so that the images end up in the images folder with\na relative url in \"analysis/images/\"\n```r\nrequire(knitr)\ngetwd()\nsetwd(\"/your/path/to/advanced-apps.wiki/analysis\")  # change this line to your path\nopts_knit$set(base.dir = '..')\nopts_chunk$set(fig.path = paste0(basename(getwd()), '/images/'))\n```\n\nThen you can generate the markdown for this page using the `knitr` package\n```r\nknit(\"MeanVsEndOfHour.Rmd\", output=\"MeanVsEndOfHour.md\")\n```\n\n","markers":{"markers":{"1":{"id":1,"range":[[29,125],[29,125]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":58,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/MeanVsEndOfHour.Rmd","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b217ee53ae9d71d6f08ffb812b118c1d2006ee74","deserializer":"TextBuffer"},{"text":"\n\n\n## Training with Mean vs Hour-Ending\n\nFor previous analyses we have been training with averages over the hour.\nBut our current system uses the points at the end of an hour for training.\nLet's take a look at how they both perform when predicting what the load will be\nat the end of each hour.\n\nTo do this analysis, the data loader had to be changed so that we can load either\nas an average over the hour or at the end-of-hour.\n\n\n```r\nloads.moh = fcu.load(coalesce = mean)\n```\n\n\nNow reloading the same data with end-of-hour points:\n\n```r\nloads.eoh = fcu.load(coalesce = last)\n```\n\n\nFirst, let's see how we do building a model with mean data and testing with end-of-hour data.\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.moh, tdata = loads.eoh, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.29\n## mape[2] = 1.32\n## mape[3] = 1.24\n## mape[4] = 1.34\n## mape[5] = 1.3\n## mape[6] = 1.27\n```\n\n```\n## [1] 1.29\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.moh, tdata = loads.eoh, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.93\n## mape[2] = 3.03\n## mape[3] = 2.79\n## mape[4] = 3.09\n## mape[5] = 2.86\n## mape[6] = 2.98\n```\n\n```\n## [1] 2.95\n```\n\n\nCompare that to modeling and testing both with end-of-hour data.\n\n```r\nmodel_mape(gbm, load ~ . - day, loads.eoh, tdata = loads.eoh, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 1.05\n## mape[2] = 1.08\n## mape[3] = 1.01\n## mape[4] = 1.01\n## mape[5] = 1.03\n## mape[6] = 1\n```\n\n```\n## [1] 1.03\n```\n\n```r\nmodel_mape(gbm, load ~ . - day - load.prev, loads.eoh, tdata = loads.eoh, distribution = \"gaussian\", \n    n.trees = 1000, interaction.depth = 4, shrinkage = 0.25, verbose = TRUE)\n```\n\n```\n## mape[1] = 2.3\n## mape[2] = 2.37\n## mape[3] = 2.32\n## mape[4] = 2.32\n## mape[5] = 2.34\n## mape[6] = 2.3\n```\n\n```\n## [1] 2.33\n```\n\n\n## Conclusion\n\nTraining with end-of-hour is significanly better than training with mean values.\nNear-term estimates errors decreased from 1.3% to 1.0% and long-term estimate errors decreased\nfrom 2.9% to 2.3%.\n\n## Appendix - Generating this Document\n\nIf you are in RStudio and want an HTML version of this document, just click Knit HTML above this pane.  If you want to generate the markdown for the github wiki, keep reading.\n\nFirst, configure the figure path so that the images end up in the images folder with\na relative url in \"analysis/images/\"\n```r\nrequire(knitr)\ngetwd()\nsetwd(\"/your/path/to/advanced-apps.wiki/analysis\")  # change this line to your path\nopts_knit$set(base.dir = '..')\nopts_chunk$set(fig.path = paste0(basename(getwd()), '/images/'))\n```\n\nThen you can generate the markdown for this page using the `knitr` package\n```r\nknit(\"MeanVsEndOfHour.Rmd\", output=\"MeanVsEndOfHour.md\")\n```\n\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":62,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/MeanVsEndOfHour.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"52c88d44d35ec28f783ab2c1a629abd516fd9db5","deserializer":"TextBuffer"},{"text":"\n\n\n## Introduction\n\nThe purpose of this document is the analysis of different ways to estimate\nload using a set of data from PJM.\n\nIf you want to run these examples yourself then [download RStudio](http://www.rstudio.com/),\ndownload the [raw version of Rmd file](./analysis/pjm.Rmd) you are currently reading,\nthen click on the lines of R code as you read and hit Command-Return when your cursor is on the\nline you want to execute.\n\nIf you encounter problems on any of the `require` lines then it means you need to install the\npacakge that is being required.  Do that be selecting \"Install Packages...\" from the `Tools`\nmenu and installing the package of the same name.\n\nAlso, if you ever want help on a particular command, like `plot`, you can type `help(plot)` or \nthe shorthand version of that `?plot`.\n\n## The Data\n\nBelow is a description of how the data was obtained for this analysis.  If you want\nto skip the details, you can just [download the final data file here](./analysis/data/pjm/pep-2013.txt).\nAnd, if you are following along in RStudio, you can load this file as follows:\n\n\n```r\ngetwd()  # prints the current directory\n```\n\n```\n## [1] \"/Users/tra/src/advanced-apps.wiki/analysis\"\n```\n\n```r\nsetwd(\"./data/pjm\")  # change this to wherever you downloaded the file\npep = read.csv(\"pep-2013.txt\")\n```\n\n\nThe load data used for this analysis came from [the PJM website](http://pjm.com/markets-and-operations/ops-analysis/historical-load-data.aspx).  Specifically, the data\ncame from the the [2013 hourly load spreadsheet](http://pjm.com/pub/operations/hist-meter-load/2013-hourly-loads.xls).  That file contains all of the PJM regions and this analysis just\nused only the data in the PEP tab of that spreadsheet.  If you're interested, you can get the\n[raw CSV here](./analysis/data/pjm/2013-hourly-loads.csv).\n\nThe weather data came from [NOAA's website](http://www7.ncdc.noaa.gov/CDO/dataproduct) and is\nthe historical data for weather station 13743 in Washington, DC. To get this data, select\n`Surface Data, Hourly Global`, submit.  On the next page, use the Simplified options, then\nselect United States, District of Columbia with `Selected Stations in state`.  Finally,\nyou can choose the weather station for Washington/National (USAF: 13743) then specify the \ndate range of interest (all of 2013 for this analysis). Ultimately you don't get the data\nfile directly, but they email a link to you so you can download it.  If you don't want\nto go to the trouble, [here's the file for 2013](./analysis/data/pjm/2013-weather-dc-national.txt).\nAnd [this document](http://hurricane.ncdc.noaa.gov/cdo/3505doc.txt) describes what the\nvarious fields mean.\n\nThe load and weather data were combined into a single file after a bit of massaging which\nis the file described in the first paragraph of this section.  The \"massaging\" was mostly\nmaking decisions about which weather data points to choose because sometimes the weather file\ncontains multiple records in an hour.  Times were rounded to the nearest hour and the weather\nrecords that had all the fields filled in were chosen.\n\n### Visualization\n\nR has some nice tools for visualizing datasets which is a useful way to sanity check the\ndata.  Let's visualize the data in tabular and plot forms.\n\n\n```r\nView(pep)\nplot(pep)\n```\n\n<img src=\"analysis/images/PEP-data.png\" title=\"plot of chunk PEP-data\" alt=\"plot of chunk PEP-data\" style=\"display: block; margin: auto;\" />\n\n\nIf you have lots of data, the above `plot` command can be slow, so you can randomly\nsample the data to make a sparser version of the same plot that displays faster.\n\n\n```r\nplot(pep[sample(1:nrow(pep), 1000), ])\n```\n\n\nIf you want to look at an individual plot from this data, specify the axes in a formula.\n\n```r\nplot(load ~ temperature, pep)\n```\n\n<img src=\"analysis/images/load-vs-temperature.png\" title=\"plot of chunk load-vs-temperature\" alt=\"plot of chunk load-vs-temperature\" style=\"display: block; margin: auto;\" />\n\nThis particular plot shows a definitive non-linear relationship between load and temperature. \n\n### Transformation\n\nThere are a couple of other plots that have something strange going on.  Let's create 2 plots\nin one by setting the mfrow parameter.\n\n```r\npar(mfrow = c(1, 2))\nplot(load ~ wind_dir, pep)\nplot(load ~ cloud_ceiling, pep)\n```\n\n<img src=\"analysis/images/wind-cloud.png\" title=\"plot of chunk wind-cloud\" alt=\"plot of chunk wind-cloud\" style=\"display: block; margin: auto;\" />\n\nThere appears to be a fair number of outlier points in these plots.\nLooking at the [field descriptions](http://hurricane.ncdc.noaa.gov/cdo/3505doc.txt) for\nthe weather data, a `wind_direction` of 990 indicates that it is variable. \nLikewise a `cloud_ceiling` of 722 means that it is unlimited.\nSince these outliers could affect models, especially linear or polynomial fits,\nlet's remove the points that have these outliers and create a new\ndataset named `pep1` from the original.\n\n```r\npep1 = subset(pep, wind_dir < 990 & cloud_ceiling < 722)\nplot(pep1[sample(1:nrow(pep1), 1000), ])\n```\n\n\nAlso, it seems a little strange to try to fit wind direction and wind speed separately.\nWhat does it mean to fit to a wind direction of 90 degrees if the wind speed is zero?\nSo let's try to combine those components to create `wind_north` and `wind_east` values instead.\n\n```r\npep2 = pep1\n# add the new variables\npep2$wind_north = cos(pep2$wind_dir * pi/180) * pep2$wind_speed\npep2$wind_east = sin(pep2$wind_dir * pi/180) * pep2$wind_speed\n# remove the old variables\npep2$wind_dir = pep2$wind_speed = NULL\nView(pep2)\nplot(pep2[sample(1:nrow(pep2), 1000), ])\n```\n\n<img src=\"analysis/images/PEP2-data.png\" title=\"plot of chunk PEP2-data\" alt=\"plot of chunk PEP2-data\" style=\"display: block; margin: auto;\" />\n\n\n## Models\n\nNow it's time to try modeling the load.  At the beginning of each section is \nthe needed require calls and the appropriate help call that describes the method\nif you are following along in RStudio.\n\nWe'll start with the simple linear regression models and work our way up to the\nmore advanced tree-based regression models and finish with neural networks.\n\n### Linear Models\n\n```r\nhelp(lm)\n```\n\nMost of the packages in R provide a nice formula syntax for fitting a model to the data.\nFor example, if we want a simple model of the load as a linear function of temperature,\n\n```r\nfit = lm(load ~ temperature, pep2)\nsummary(fit)\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ temperature, data = pep2)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1406.0  -488.4   -71.8   472.2  2429.0 \n## \n## Coefficients:\n##             Estimate Std. Error t value            Pr(>|t|)    \n## (Intercept) 3030.677     35.258    86.0 <0.0000000000000002 ***\n## temperature    8.623      0.573    15.1 <0.0000000000000002 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 695 on 5141 degrees of freedom\n## Multiple R-squared:  0.0422,\tAdjusted R-squared:  0.042 \n## F-statistic:  227 on 1 and 5141 DF,  p-value: <0.0000000000000002\n```\n\nMost of the models we will look at have a `summary` and `plot` method that give\nmore information about the model fit.  You can see from this summary that we have\nnot done a good job of fitting the data.  The `R-squared` values of 0.04 indicates\nthat we have only explained 4% of the data variance.\n\n```r\npar(mfrow = c(2, 2))  # prepare for 4 plots at once\nplot(fit)\n```\n\n<img src=\"analysis/images/lm-temp.png\" title=\"plot of chunk lm-temp\" alt=\"plot of chunk lm-temp\" style=\"display: block; margin: auto;\" />\n\nAnd the residuals confirm that we need a better model.\n\nIt's a simple matter to add observations.\n\n```r\nsummary(lm(load ~ yday + hour + temperature, pep2))\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ yday + hour + temperature, data = pep2)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1430.2  -437.0   -75.4   392.2  2223.1 \n## \n## Coefficients:\n##              Estimate Std. Error t value            Pr(>|t|)    \n## (Intercept) 2673.7052    34.2895   77.97 <0.0000000000000002 ***\n## yday          -0.6983     0.0827   -8.44 <0.0000000000000002 ***\n## hour          45.8633     1.2464   36.80 <0.0000000000000002 ***\n## temperature    7.5541     0.5227   14.45 <0.0000000000000002 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 614 on 5139 degrees of freedom\n## Multiple R-squared:  0.252,\tAdjusted R-squared:  0.252 \n## F-statistic:  578 on 3 and 5139 DF,  p-value: <0.0000000000000002\n```\n\nAnd you can add interactions between those terms with the `*` operator.\n\n```r\nsummary(lm(load ~ yday * hour * temperature, pep2))\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ yday * hour * temperature, data = pep2)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1410.6  -433.8   -71.5   387.4  2197.7 \n## \n## Coefficients:\n##                           Estimate   Std. Error t value\n## (Intercept)           3500.6396262  129.3789714   27.06\n## yday                    -2.6379887    0.6570099   -4.02\n## hour                     9.1194149    9.3142236    0.98\n## temperature             -8.7052262    2.7002934   -3.22\n## yday:hour               -0.0160471    0.0473612   -0.34\n## yday:temperature         0.0441292    0.0135255    3.26\n## hour:temperature         0.6346957    0.1880741    3.37\n## yday:hour:temperature    0.0000953    0.0009438    0.10\n##                                   Pr(>|t|)    \n## (Intercept)           < 0.0000000000000002 ***\n## yday                               0.00006 ***\n## hour                               0.32758    \n## temperature                        0.00127 ** \n## yday:hour                          0.73476    \n## yday:temperature                   0.00111 ** \n## hour:temperature                   0.00074 ***\n## yday:hour:temperature              0.91957    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 607 on 5135 degrees of freedom\n## Multiple R-squared:  0.271,\tAdjusted R-squared:  0.27 \n## F-statistic:  272 on 7 and 5135 DF,  p-value: <0.0000000000000002\n```\n\nBut we're still only at 27% of the variance explained.\n\nIt's easy to model the fit against *all* observations in the data with the dot notation.\n\n```r\nsummary(lm(load ~ ., pep2))\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ ., data = pep2)\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n##  -1430   -440    -82    388   2405 \n## \n## Coefficients:\n##               Estimate Std. Error t value             Pr(>|t|)    \n## (Intercept)   -160.550   1415.239   -0.11                0.910    \n## yday            -0.761      0.084   -9.06 < 0.0000000000000002 ***\n## hour            48.664      1.313   37.06 < 0.0000000000000002 ***\n## precip         -47.817    220.247   -0.22                0.828    \n## cloud_ceiling    0.484      0.112    4.32    0.000016182655689 ***\n## visibility      -5.433      5.106   -1.06                0.287    \n## temperature     -3.571      1.538   -2.32                0.020 *  \n## dewpoint        11.113      1.441    7.71    0.000000000000015 ***\n## pressure         2.874      1.385    2.08                0.038 *  \n## wind_north      -1.301      1.143   -1.14                0.255    \n## wind_east      -19.312      1.902  -10.15 < 0.0000000000000002 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 606 on 5132 degrees of freedom\n## Multiple R-squared:  0.273,\tAdjusted R-squared:  0.271 \n## F-statistic:  193 on 10 and 5132 DF,  p-value: <0.0000000000000002\n```\n\nOne thing to notice is all the `***` terms in the summary.  The terms that have 3 asterisks\nare considered to be significant predictors in the model.  The terms without asterisks are weak\npredictors.  Interestingly, dewpoint is a stronger term than temperature but this is because\nthey are highly correlated with each other.  If we remove dewpoint then temperature will become\na strong predictor.\n\n```r\nsummary(lm(load ~ . - dewpoint, pep2))\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ . - dewpoint, data = pep2)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1399.5  -438.5   -70.7   391.3  2288.7 \n## \n## Coefficients:\n##                Estimate Std. Error t value             Pr(>|t|)    \n## (Intercept)   1942.6517  1396.5832    1.39              0.16428    \n## yday            -0.6737     0.0837   -8.05    0.000000000000001 ***\n## hour            45.2584     1.2435   36.40 < 0.0000000000000002 ***\n## precip         -46.2306   221.4974   -0.21              0.83468    \n## cloud_ceiling    0.1807     0.1056    1.71              0.08714 .  \n## visibility     -17.3004     4.8957   -3.53              0.00041 ***\n## temperature      7.3444     0.6056   12.13 < 0.0000000000000002 ***\n## pressure         0.8540     1.3672    0.62              0.53226    \n## wind_north      -2.8375     1.1317   -2.51              0.01220 *  \n## wind_east      -15.2906     1.8395   -8.31 < 0.0000000000000002 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 610 on 5133 degrees of freedom\n## Multiple R-squared:  0.264,\tAdjusted R-squared:  0.263 \n## F-statistic:  205 on 9 and 5133 DF,  p-value: <0.0000000000000002\n```\n\n\nWe can also add cross-interactions between all of the terms.\nThe next two formulas are equivalent:\n\n```r\nsummary(lm(load ~ . * ., pep2))\n```\n\n\n```r\nsummary(lm(load ~ .^2, pep2))\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ .^2, data = pep2)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1345.9  -279.8   -11.5   268.4  1459.7 \n## \n## Coefficients:\n##                                Estimate    Std. Error t value\n## (Intercept)                47983.999077   5966.787912    8.04\n## yday                          46.595226      9.197232    5.07\n## hour                        -459.909159    149.349389   -3.08\n## precip                    -92219.664031  35556.552877   -2.59\n## cloud_ceiling                 46.666537     13.198507    3.54\n## visibility                 -2463.799763    571.400470   -4.31\n## temperature                  -67.759244    168.778933   -0.40\n## dewpoint                    -636.490977    154.011338   -4.13\n## pressure                     -40.023552      5.833835   -6.86\n## wind_north                   437.577798    137.270509    3.19\n## wind_east                    579.901975    173.393882    3.34\n## yday:hour                     -0.016772      0.008522   -1.97\n## yday:precip                   -4.943483      2.425464   -2.04\n## yday:cloud_ceiling             0.000714      0.000802    0.89\n## yday:visibility               -0.123290      0.032807   -3.76\n## yday:temperature               0.021232      0.010632    2.00\n## yday:dewpoint                 -0.071185      0.009842   -7.23\n## yday:pressure                 -0.043141      0.008933   -4.83\n## yday:wind_north                0.009777      0.007724    1.27\n## yday:wind_east                 0.039609      0.014087    2.81\n## hour:precip                   52.454293     20.610433    2.55\n## hour:cloud_ceiling             0.021926      0.011967    1.83\n## hour:visibility                1.561469      0.534950    2.92\n## hour:temperature              -0.767848      0.147086   -5.22\n## hour:dewpoint                  1.204874      0.136269    8.84\n## hour:pressure                  0.473293      0.146164    3.24\n## hour:wind_north                0.226771      0.117520    1.93\n## hour:wind_east                -0.704109      0.184573   -3.81\n## precip:cloud_ceiling           2.023682      3.564256    0.57\n## precip:visibility             33.875660     69.286039    0.49\n## precip:temperature           -24.240288     55.628438   -0.44\n## precip:dewpoint              -15.093444     63.413029   -0.24\n## precip:pressure               93.488982     35.019259    2.67\n## precip:wind_north            -26.053944     25.747377   -1.01\n## precip:wind_east               2.953641     38.739453    0.08\n## cloud_ceiling:visibility      -0.353008      0.087635   -4.03\n## cloud_ceiling:temperature      0.077633      0.011658    6.66\n## cloud_ceiling:dewpoint        -0.041815      0.011192   -3.74\n## cloud_ceiling:pressure        -0.045089      0.012824   -3.52\n## cloud_ceiling:wind_north       0.075458      0.010805    6.98\n## cloud_ceiling:wind_east        0.066685      0.018536    3.60\n## visibility:temperature        -2.568789      1.475179   -1.74\n## visibility:dewpoint            3.089262      1.445824    2.14\n## visibility:pressure            2.410952      0.559333    4.31\n## visibility:wind_north          0.279759      0.511242    0.55\n## visibility:wind_east          -2.012343      0.837058   -2.40\n## temperature:dewpoint           1.797504      0.029178   61.61\n## temperature:pressure           0.003692      0.165295    0.02\n## temperature:wind_north         0.032906      0.137548    0.24\n## temperature:wind_east         -0.117227      0.221061   -0.53\n## dewpoint:pressure              0.507212      0.150922    3.36\n## dewpoint:wind_north            0.114352      0.128015    0.89\n## dewpoint:wind_east            -0.520417      0.194098   -2.68\n## pressure:wind_north           -0.448359      0.134193   -3.34\n## pressure:wind_east            -0.534925      0.170274   -3.14\n## wind_north:wind_east           0.048858      0.173181    0.28\n##                                       Pr(>|t|)    \n## (Intercept)                 0.0000000000000011 ***\n## yday                        0.0000004201340129 ***\n## hour                                   0.00209 ** \n## precip                                 0.00952 ** \n## cloud_ceiling                          0.00041 ***\n## visibility                  0.0000164947507273 ***\n## temperature                            0.68809    \n## dewpoint                    0.0000364204186310 ***\n## pressure                    0.0000000000076763 ***\n## wind_north                             0.00144 ** \n## wind_east                              0.00083 ***\n## yday:hour                              0.04912 *  \n## yday:precip                            0.04159 *  \n## yday:cloud_ceiling                     0.37349    \n## yday:visibility                        0.00017 ***\n## yday:temperature                       0.04588 *  \n## yday:dewpoint               0.0000000000005422 ***\n## yday:pressure               0.0000014107161243 ***\n## yday:wind_north                        0.20564    \n## yday:wind_east                         0.00495 ** \n## hour:precip                            0.01096 *  \n## hour:cloud_ceiling                     0.06697 .  \n## hour:visibility                        0.00353 ** \n## hour:temperature            0.0000001856251047 ***\n## hour:dewpoint             < 0.0000000000000002 ***\n## hour:pressure                          0.00121 ** \n## hour:wind_north                        0.05371 .  \n## hour:wind_east                         0.00014 ***\n## precip:cloud_ceiling                   0.57022    \n## precip:visibility                      0.62492    \n## precip:temperature                     0.66303    \n## precip:dewpoint                        0.81188    \n## precip:pressure                        0.00762 ** \n## precip:wind_north                      0.31163    \n## precip:wind_east                       0.93923    \n## cloud_ceiling:visibility    0.0000570361303992 ***\n## cloud_ceiling:temperature   0.0000000000304095 ***\n## cloud_ceiling:dewpoint                 0.00019 ***\n## cloud_ceiling:pressure                 0.00044 ***\n## cloud_ceiling:wind_north    0.0000000000032430 ***\n## cloud_ceiling:wind_east                0.00032 ***\n## visibility:temperature                 0.08168 .  \n## visibility:dewpoint                    0.03267 *  \n## visibility:pressure         0.0000166033200145 ***\n## visibility:wind_north                  0.58426    \n## visibility:wind_east                   0.01625 *  \n## temperature:dewpoint      < 0.0000000000000002 ***\n## temperature:pressure                   0.98218    \n## temperature:wind_north                 0.81094    \n## temperature:wind_east                  0.59593    \n## dewpoint:pressure                      0.00078 ***\n## dewpoint:wind_north                    0.37176    \n## dewpoint:wind_east                     0.00736 ** \n## pressure:wind_north                    0.00084 ***\n## pressure:wind_east                     0.00169 ** \n## wind_north:wind_east                   0.77786    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 402 on 5087 degrees of freedom\n## Multiple R-squared:  0.683,\tAdjusted R-squared:  0.68 \n## F-statistic:  199 on 55 and 5087 DF,  p-value: <0.0000000000000002\n```\n\nNow we are explaining a lot more of the variance, 69%, but we have many weak terms which\ncould mean we are overfitting.\n\nHow about we add 3rd-order interactions?\n\n```r\nsummary(lm(load ~ .^3, pep2))\n```\n\nThe above model has 175 features with lots of weak terms, but it demonstrates how easy it\nis to model complex interactions with R.\n\nPolynomial terms are also easy to add with R.\n\n```r\nsummary(lm(load ~ yday + hour + poly(temperature, 2), pep2))\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ yday + hour + poly(temperature, 2), data = pep2)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1192.7  -327.8   -31.4   287.8  1674.3 \n## \n## Coefficients:\n##                         Estimate Std. Error t value            Pr(>|t|)\n## (Intercept)            3115.2516    16.6374  187.24 <0.0000000000000002\n## yday                     -0.1969     0.0602   -3.27              0.0011\n## hour                     38.7091     0.9062   42.72 <0.0000000000000002\n## poly(temperature, 2)1  8700.8967   458.0194   19.00 <0.0000000000000002\n## poly(temperature, 2)2 30899.1844   450.0448   68.66 <0.0000000000000002\n##                          \n## (Intercept)           ***\n## yday                  ** \n## hour                  ***\n## poly(temperature, 2)1 ***\n## poly(temperature, 2)2 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 444 on 5138 degrees of freedom\n## Multiple R-squared:  0.61,\tAdjusted R-squared:  0.61 \n## F-statistic: 2.01e+03 on 4 and 5138 DF,  p-value: <0.0000000000000002\n```\n\n```r\nsummary(lm(load ~ yday + poly(hour, 5) + poly(temperature, 5), pep2))\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ yday + poly(hour, 5) + poly(temperature, \n##     5), data = pep2)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1023.7  -205.8    19.6   207.8  1252.1 \n## \n## Coefficients:\n##                          Estimate  Std. Error t value             Pr(>|t|)\n## (Intercept)             3587.6471      9.4396  380.06 < 0.0000000000000002\n## yday                      -0.2585      0.0454   -5.69  0.00000001343800831\n## poly(hour, 5)1         18615.6905    342.2048   54.40 < 0.0000000000000002\n## poly(hour, 5)2        -16210.7606    340.6908  -47.58 < 0.0000000000000002\n## poly(hour, 5)3         -8411.6019    335.8174  -25.05 < 0.0000000000000002\n## poly(hour, 5)4          7283.3769    335.0843   21.74 < 0.0000000000000002\n## poly(hour, 5)5         -5285.5189    334.4668  -15.80 < 0.0000000000000002\n## poly(temperature, 5)1  10561.2471    349.1653   30.25 < 0.0000000000000002\n## poly(temperature, 5)2  31447.6753    339.6133   92.60 < 0.0000000000000002\n## poly(temperature, 5)3   4481.7684    341.2210   13.13 < 0.0000000000000002\n## poly(temperature, 5)4  -4855.6275    334.8857  -14.50 < 0.0000000000000002\n## poly(temperature, 5)5  -2718.9391    335.9357   -8.09  0.00000000000000072\n##                          \n## (Intercept)           ***\n## yday                  ***\n## poly(hour, 5)1        ***\n## poly(hour, 5)2        ***\n## poly(hour, 5)3        ***\n## poly(hour, 5)4        ***\n## poly(hour, 5)5        ***\n## poly(temperature, 5)1 ***\n## poly(temperature, 5)2 ***\n## poly(temperature, 5)3 ***\n## poly(temperature, 5)4 ***\n## poly(temperature, 5)5 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 333 on 5131 degrees of freedom\n## Multiple R-squared:  0.78,\tAdjusted R-squared:  0.78 \n## F-statistic: 1.66e+03 on 11 and 5131 DF,  p-value: <0.0000000000000002\n```\n\nThis gets our `R-squared` up to 78%.\n\nAnd you can add interactions between all of the polynomial terms to that.\n\n```r\nsummary(lm(load ~ yday + poly(hour, 5) * poly(temperature, 5), pep2))\n```\n\n```\n## \n## Call:\n## lm(formula = load ~ yday + poly(hour, 5) * poly(temperature, \n##     5), data = pep2)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1163.4  -160.5    20.9   178.4  1193.2 \n## \n## Coefficients:\n##                                          Estimate   Std. Error t value\n## (Intercept)                             3589.3462       8.8438  405.86\n## yday                                      -0.1853       0.0381   -4.86\n## poly(hour, 5)1                         18942.7796     316.6078   59.83\n## poly(hour, 5)2                        -16461.8823     352.3629  -46.72\n## poly(hour, 5)3                         -8200.2345     328.6015  -24.95\n## poly(hour, 5)4                          8125.8229     304.2925   26.70\n## poly(hour, 5)5                         -5971.0406     301.9807  -19.77\n## poly(temperature, 5)1                  10950.7494     528.9222   20.70\n## poly(temperature, 5)2                  33788.7648     635.0259   53.21\n## poly(temperature, 5)3                   4732.7970     640.7867    7.39\n## poly(temperature, 5)4                  -4317.8236     566.4463   -7.62\n## poly(temperature, 5)5                  -3634.3491     430.7550   -8.44\n## poly(hour, 5)1:poly(temperature, 5)1  -80757.0709   26538.5944   -3.04\n## poly(hour, 5)2:poly(temperature, 5)1 -706646.0797   32729.7713  -21.59\n## poly(hour, 5)3:poly(temperature, 5)1 -132061.0665   28397.2774   -4.65\n## poly(hour, 5)4:poly(temperature, 5)1  452938.2354   24628.2037   18.39\n## poly(hour, 5)5:poly(temperature, 5)1  303609.6236   24048.8556   12.62\n## poly(hour, 5)1:poly(temperature, 5)2    -797.7222   30588.0055   -0.03\n## poly(hour, 5)2:poly(temperature, 5)2 -204331.2990   39019.3582   -5.24\n## poly(hour, 5)3:poly(temperature, 5)2    2680.5046   32853.7561    0.08\n## poly(hour, 5)4:poly(temperature, 5)2   25066.7118   28031.8966    0.89\n## poly(hour, 5)5:poly(temperature, 5)2  -30629.9914   26340.1699   -1.16\n## poly(hour, 5)1:poly(temperature, 5)3   85884.1705   33177.8462    2.59\n## poly(hour, 5)2:poly(temperature, 5)3  118793.2993   40135.2494    2.96\n## poly(hour, 5)3:poly(temperature, 5)3   -7345.7708   33623.7912   -0.22\n## poly(hour, 5)4:poly(temperature, 5)3  -92342.1669   28790.5153   -3.21\n## poly(hour, 5)5:poly(temperature, 5)3  -20173.7515   27211.9869   -0.74\n## poly(hour, 5)1:poly(temperature, 5)4   90673.8261   31091.8949    2.92\n## poly(hour, 5)2:poly(temperature, 5)4  164536.7497   36010.9788    4.57\n## poly(hour, 5)3:poly(temperature, 5)4   -3426.2967   30860.3325   -0.11\n## poly(hour, 5)4:poly(temperature, 5)4 -102610.7392   28561.0433   -3.59\n## poly(hour, 5)5:poly(temperature, 5)4  -84015.1489   26209.5409   -3.21\n## poly(hour, 5)1:poly(temperature, 5)5  -36435.7722   27985.1896   -1.30\n## poly(hour, 5)2:poly(temperature, 5)5    4553.6004   28724.0105    0.16\n## poly(hour, 5)3:poly(temperature, 5)5   52128.9496   26659.9104    1.96\n## poly(hour, 5)4:poly(temperature, 5)5   42486.9284   24490.2008    1.73\n## poly(hour, 5)5:poly(temperature, 5)5   -6232.3259   23882.8376   -0.26\n##                                                  Pr(>|t|)    \n## (Intercept)                          < 0.0000000000000002 ***\n## yday                                    0.000001210081401 ***\n## poly(hour, 5)1                       < 0.0000000000000002 ***\n## poly(hour, 5)2                       < 0.0000000000000002 ***\n## poly(hour, 5)3                       < 0.0000000000000002 ***\n## poly(hour, 5)4                       < 0.0000000000000002 ***\n## poly(hour, 5)5                       < 0.0000000000000002 ***\n## poly(temperature, 5)1                < 0.0000000000000002 ***\n## poly(temperature, 5)2                < 0.0000000000000002 ***\n## poly(temperature, 5)3                   0.000000000000176 ***\n## poly(temperature, 5)4                   0.000000000000029 ***\n## poly(temperature, 5)5                < 0.0000000000000002 ***\n## poly(hour, 5)1:poly(temperature, 5)1              0.00235 ** \n## poly(hour, 5)2:poly(temperature, 5)1 < 0.0000000000000002 ***\n## poly(hour, 5)3:poly(temperature, 5)1    0.000003395120947 ***\n## poly(hour, 5)4:poly(temperature, 5)1 < 0.0000000000000002 ***\n## poly(hour, 5)5:poly(temperature, 5)1 < 0.0000000000000002 ***\n## poly(hour, 5)1:poly(temperature, 5)2              0.97919    \n## poly(hour, 5)2:poly(temperature, 5)2    0.000000170062778 ***\n## poly(hour, 5)3:poly(temperature, 5)2              0.93498    \n## poly(hour, 5)4:poly(temperature, 5)2              0.37125    \n## poly(hour, 5)5:poly(temperature, 5)2              0.24494    \n## poly(hour, 5)1:poly(temperature, 5)3              0.00966 ** \n## poly(hour, 5)2:poly(temperature, 5)3              0.00309 ** \n## poly(hour, 5)3:poly(temperature, 5)3              0.82707    \n## poly(hour, 5)4:poly(temperature, 5)3              0.00135 ** \n## poly(hour, 5)5:poly(temperature, 5)3              0.45851    \n## poly(hour, 5)1:poly(temperature, 5)4              0.00356 ** \n## poly(hour, 5)2:poly(temperature, 5)4    0.000005014301502 ***\n## poly(hour, 5)3:poly(temperature, 5)4              0.91160    \n## poly(hour, 5)4:poly(temperature, 5)4              0.00033 ***\n## poly(hour, 5)5:poly(temperature, 5)4              0.00136 ** \n## poly(hour, 5)1:poly(temperature, 5)5              0.19299    \n## poly(hour, 5)2:poly(temperature, 5)5              0.87405    \n## poly(hour, 5)3:poly(temperature, 5)5              0.05060 .  \n## poly(hour, 5)4:poly(temperature, 5)5              0.08283 .  \n## poly(hour, 5)5:poly(temperature, 5)5              0.79414    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 279 on 5106 degrees of freedom\n## Multiple R-squared:  0.847,\tAdjusted R-squared:  0.846 \n## F-statistic:  785 on 36 and 5106 DF,  p-value: <0.0000000000000002\n```\n\nNow we're up to 85% of the variance explained.\n\n### Ridge Regression\n\n```r\nrequire(MASS)\nhelp(lm.ridge)\n```\n\n\n[Ridge regression](https://en.wikipedia.org/wiki/Ridge_regression) is just linear\nregression with L2-norm regularization.\nRegularization is used to minimize the effects of overfitting the data.\nIn it's simplest form, it is just like `lm` and should\ngive the same answer when the regularization parameter, `lambda`, is zero.\nSo the following models are equivalent.\n\n```r\nlm(load ~ yday + poly(hour, 5) * poly(temperature, 5), pep2)\nlm.ridge(load ~ yday + poly(hour, 5) * poly(temperature, 5), pep2, lambda = 0)\n```\n\nWith ridge, it gets more interesting when you give it a range of lambda values.\nThis plot shows how the estimate coefficients change as a function of lambda.\n\n```r\nplot(lm.ridge(load ~ yday + poly(hour, 5) * poly(temperature, 5), pep2, lambda = seq(0, \n    10000, 10)))\n```\n\n<img src=\"analysis/images/lm-ridge-lambda.png\" title=\"plot of chunk lm-ridge-lambda\" alt=\"plot of chunk lm-ridge-lambda\" style=\"display: block; margin: auto;\" />\n\nAnd R also gives you a method for solving for the best value of lambda in the provided\nrange using cross-validation,\n\n```r\nselect(lm.ridge(load ~ yday + poly(hour, 5) * poly(temperature, 5), pep2, lambda = seq(0, \n    100, 0.1)))\n```\n\n```\n## modified HKB estimator is 5.912 \n## modified L-W estimator is 6.191 \n## smallest value of GCV  at 2.9\n```\n\nIn the above example, it found that the value of lambda at 2.9 minimized the cross-validation\nerror.\n\n### Generalized Additive Models\n\n```r\nrequire(gam)\n```\n\n```\n## Loading required package: gam\n## Loaded gam 1.09\n```\n\n```r\nhelp(gam)\n```\n\n\nA [Generalized Additive Model](https://en.wikipedia.org/wiki/Generalized_additive_model) is a \nmodel that uses non-linear relationships on the observations using smoothing splines.\nFor example, modeling load against smoothing splines on temperature, dewpoint, hour, yday,\nand pressure looks like this.\n\n\n```r\ngam1 = gam(load ~ s(temperature) + s(hour) + s(yday) + s(pressure), data = pep2)\nsummary(gam1)\n```\n\n```\n## \n## Call: gam(formula = load ~ s(temperature) + s(hour) + s(yday) + s(pressure), \n##     data = pep2)\n## Deviance Residuals:\n##     Min      1Q  Median      3Q     Max \n## -921.02 -215.58   -3.67  212.02 1349.16 \n## \n## (Dispersion Parameter for gaussian family taken to be 107502)\n## \n##     Null Deviance: 2593208185 on 5142 degrees of freedom\n## Residual Deviance: 551055083 on 5126 degrees of freedom\n## AIC: 74197 \n## \n## Number of Local Scoring Iterations: 5 \n## \n## Anova for Parametric Effects\n##                  Df    Sum Sq   Mean Sq F value               Pr(>F)    \n## s(temperature)    1  87922640  87922640   817.9 < 0.0000000000000002 ***\n## s(hour)           1 372652895 372652895  3466.5 < 0.0000000000000002 ***\n## s(yday)           1   2557603   2557603    23.8    0.000001106190408 ***\n## s(pressure)       1   6625905   6625905    61.6    0.000000000000005 ***\n## Residuals      5126 551055083    107502                                 \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Anova for Nonparametric Effects\n##                Npar Df Npar F               Pr(F)    \n## (Intercept)                                          \n## s(temperature)       3   2789 <0.0000000000000002 ***\n## s(hour)              3   1159 <0.0000000000000002 ***\n## s(yday)              3    148 <0.0000000000000002 ***\n## s(pressure)          3      4              0.0066 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n```r\npar(mfrow = c(2, 2))\nplot(gam1, se = TRUE, col = \"blue\")\n```\n\n<img src=\"analysis/images/gam1.png\" title=\"plot of chunk gam1\" alt=\"plot of chunk gam1\" style=\"display: block; margin: auto;\" />\n\n\nHere's what it looks like if you remove the spline on pressure.\n\n```r\ngam2 = gam(load ~ s(temperature) + s(hour) + s(yday) + pressure, data = pep2)\nsummary(gam2)\n```\n\n```\n## \n## Call: gam(formula = load ~ s(temperature) + s(hour) + s(yday) + pressure, \n##     data = pep2)\n## Deviance Residuals:\n##     Min      1Q  Median      3Q     Max \n## -961.42 -216.06   -3.68  212.85 1356.52 \n## \n## (Dispersion Parameter for gaussian family taken to be 107702)\n## \n##     Null Deviance: 2593208185 on 5142 degrees of freedom\n## Residual Deviance: 552401090 on 5129 degrees of freedom\n## AIC: 74204 \n## \n## Number of Local Scoring Iterations: 5 \n## \n## Anova for Parametric Effects\n##                  Df    Sum Sq   Mean Sq F value               Pr(>F)    \n## s(temperature)    1  89742597  89742597   833.2 < 0.0000000000000002 ***\n## s(hour)           1 372662014 372662014  3460.1 < 0.0000000000000002 ***\n## s(yday)           1   2778310   2778310    25.8    0.000000392833520 ***\n## pressure          1   6475797   6475797    60.1    0.000000000000011 ***\n## Residuals      5129 552401090    107702                                 \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Anova for Nonparametric Effects\n##                Npar Df Npar F               Pr(F)    \n## (Intercept)                                          \n## s(temperature)       3   2770 <0.0000000000000002 ***\n## s(hour)              3   1156 <0.0000000000000002 ***\n## s(yday)              3    149 <0.0000000000000002 ***\n## pressure                                             \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n```r\npar(mfrow = c(2, 2))\nplot(gam2, se = TRUE, col = \"blue\")\n```\n\n<img src=\"analysis/images/gam2.png\" title=\"plot of chunk gam2\" alt=\"plot of chunk gam2\" style=\"display: block; margin: auto;\" />\n\n\nThere's a function called `anova` (analysis of variance) that can be used to compare\nmultiple fits to each other.\n\n```r\nanova(gam1, gam2, test = \"Cp\")\n```\n\n```\n## Analysis of Deviance Table\n## \n## Model 1: load ~ s(temperature) + s(hour) + s(yday) + s(pressure)\n## Model 2: load ~ s(temperature) + s(hour) + s(yday) + pressure\n##   Resid. Df Resid. Dev Df Deviance        Cp\n## 1      5126  551055083             554710112\n## 2      5129  552401090 -3 -1346007 555411092\n```\n\nTo get information on what this means you can get help on `anova.gam`\n\n```r\nhelp(anova.gam)\n```\n\nThe Cp value is one way of trying to predict the test error from the training data.\nThus we would generally want to choose the model that has the smaller Cp value.\nThe above result seems to indicate that the models have very similar values for Cp\nso we would probably choose the simpler model.\n\n### Regression Trees\n\n```r\nrequire(tree)\n```\n\n```\n## Loading required package: tree\n```\n\n```r\nhelp(tree)\n```\n\n\nSimple regression trees are useful for looking at what observations are important. \nBut by themselves the aren't great predictors.\n\n\n```r\ntree1 = tree(load ~ ., pep2)\npar(mfrow = c(1, 1))\nplot(tree1)\ntext(tree1)\n```\n\n<img src=\"analysis/images/tree.png\" title=\"plot of chunk tree\" alt=\"plot of chunk tree\" style=\"display: block; margin: auto;\" />\n\nThe plot gives a nice visualization of how the tree works.\nIn this example the tree says that `hour` is the most important first split on the data.\nFor time less than 7:30, it then splits on temperature.\nFor times greather than 7:30 it splits on dewpoint.\nWhile simple regression trees by themselves aren't the best predictors,\nthey are the basis for much better methods such as Random Forests and Boosting.\n\n### Random Forests\n\n```r\nrequire(randomForest)\nhelp(randomForest)\n```\n\n\n[Random Forest](https://simple.wikipedia.org/wiki/Random_forest) is a technique where\nmultiple regression trees are generated using a random subset of the observations at each\nbranch.  The forest of all trees is then used to construct the model which gives a better\nestimate than a single regression tree.\n\nUsing the `randomForest` package is pretty simple.\n\n\n```r\nrf1 = randomForest(load ~ ., pep2)\nrf1\n```\n\n```\n## \n## Call:\n##  randomForest(formula = load ~ ., data = pep2) \n##                Type of random forest: regression\n##                      Number of trees: 500\n## No. of variables tried at each split: 3\n## \n##           Mean of squared residuals: 33302\n##                     % Var explained: 93.4\n```\n\n\nNotice that this model explains 93% of the variance without any tuning which is\nvery good.\n\n\n```r\npar(mfrow = c(1, 1))\nplot(rf1)\n```\n\n<img src=\"analysis/images/random-forest-1b.png\" title=\"plot of chunk random-forest-1b\" alt=\"plot of chunk random-forest-1b\" style=\"display: block; margin: auto;\" />\n\n\nThe default plot shows that the error flattens out above 200 (or sooner).\nSo we can generate a forest with 200  trees and output debug information\nalong the way with this command.\n\n\n```r\nrf2 = randomForest(load ~ ., pep2, ntree = 200, do.trace = 25)\n```\n\n```\n##      |      Out-of-bag   |\n## Tree |      MSE  %Var(y) |\n##   25 | 4.165e+04     8.26 |\n##   50 | 3.744e+04     7.42 |\n##   75 | 3.641e+04     7.22 |\n##  100 | 3.538e+04     7.02 |\n##  125 | 3.504e+04     6.95 |\n##  150 | 3.466e+04     6.87 |\n##  175 | 3.431e+04     6.80 |\n##  200 | 3.408e+04     6.76 |\n```\n\n```r\nrf2\n```\n\n```\n## \n## Call:\n##  randomForest(formula = load ~ ., data = pep2, ntree = 200, do.trace = 25) \n##                Type of random forest: regression\n##                      Number of trees: 200\n## No. of variables tried at each split: 3\n## \n##           Mean of squared residuals: 34079\n##                     % Var explained: 93.24\n```\n\n```r\nplot(rf2)\n```\n\n<img src=\"analysis/images/random-forest-2.png\" title=\"plot of chunk random-forest-2\" alt=\"plot of chunk random-forest-2\" style=\"display: block; margin: auto;\" />\n\n\nAnother nice feature of the `randomForest` package is the `importance` function which\ntells you which observations are the most important factors in the model.\n\n\n```r\nimportance(rf2)\n```\n\n```\n##               IncNodePurity\n## yday              243190588\n## hour              882446238\n## precip              8498355\n## cloud_ceiling      59461733\n## visibility         16621195\n## temperature       686681384\n## dewpoint          451206283\n## pressure           83155159\n## wind_north         64414483\n## wind_east          67748963\n```\n\nThis information could be useful when trying to decide which observations don't need\nto be collected.  In this case, `precip` seems to have a small effect.\n\n### Boosting\n\n```r\nrequire(gbm)\nhelp(gbm)\n```\n\n\n[Boosting](https://en.wikipedia.org/wiki/Boosting_\\(machine_learning\\)) is a cousin to Random\nForest.  Whereas Random Forest generates a large number of fairly complex trees and combines\nthem to reduce the variance, Boosting generates a larger number of simple trees and combines\nthem to reduce bias.\n\n\n```r\ngbm1 = gbm(load ~ ., pep2, distribution = \"gaussian\", n.trees = 1000, shrinkage = 0.2)\nsummary(gbm1)\n```\n\n<img src=\"analysis/images/gbm-1-summary.png\" title=\"plot of chunk gbm-1-summary\" alt=\"plot of chunk gbm-1-summary\" style=\"display: block; margin: auto;\" />\n\n```\n##                         var  rel.inf\n## temperature     temperature 39.33937\n## hour                   hour 35.47154\n## dewpoint           dewpoint 14.95968\n## yday                   yday  5.67437\n## pressure           pressure  1.72354\n## wind_north       wind_north  1.09500\n## wind_east         wind_east  0.92294\n## cloud_ceiling cloud_ceiling  0.57177\n## visibility       visibility  0.18261\n## precip               precip  0.05919\n```\n\nThis summary plot is very similar to the `importance` plot for `randomForest` and shows\nthe relative influence of each observation.\n\n```r\npar(mfrow = c(1, 2))\nplot(gbm1, i = \"temperature\")\nplot(gbm1, i = \"hour\")\n```\n\n<img src=\"analysis/images/gbm-1.png\" title=\"plot of chunk gbm-1\" alt=\"plot of chunk gbm-1\" style=\"display: block; margin: auto;\" />\n\nThis plot shows the 'marginal effect' of the selected variables on the model.\nIt is not smooth because of the nature of splitting of data that happens when constructing\ntrees.\n\nSome of the more interesting settings that can be changed to optimize the\nboosting algorithm are the number of trees (`n.trees`),\nthe size of the trees (`interaction.depth`),\nthe regularization value (`shrinkage`),\nand the percentage of observations considered at each branch (`bag.fraction`).\n\nHere's an example  using all of these settings.\n\n```r\ngbm2 = gbm(load ~ ., pep2, distribution = \"gaussian\", n.trees = 2000, interaction.depth = 5, \n    shrinkage = 0.15, bag.fraction = 0.7)\npar(mfrow = c(1, 1))\nsummary(gbm2)\n```\n\n<img src=\"analysis/images/gbm-2-summary.png\" title=\"plot of chunk gbm-2-summary\" alt=\"plot of chunk gbm-2-summary\" style=\"display: block; margin: auto;\" />\n\n```\n##                         var rel.inf\n## hour                   hour 36.3142\n## temperature     temperature 33.3322\n## dewpoint           dewpoint 17.3000\n## yday                   yday  7.0815\n## pressure           pressure  2.1456\n## cloud_ceiling cloud_ceiling  1.2881\n## wind_north       wind_north  1.2862\n## wind_east         wind_east  0.9907\n## visibility       visibility  0.1576\n## precip               precip  0.1039\n```\n\n\n```r\npar(mfrow = c(2, 2))\nplot(gbm2, i = \"hour\")\nplot(gbm2, i = \"temperature\")\nplot(gbm2, i = \"yday\")\nplot(gbm2, i = \"dewpoint\")\n```\n\n<img src=\"analysis/images/gbm-2.png\" title=\"plot of chunk gbm-2\" alt=\"plot of chunk gbm-2\" style=\"display: block; margin: auto;\" />\n\n\n### Neural Networks\n\n```r\nrequire(neuralnet)\nhelp(neuralnet)\n```\n\n\nNeural networks are more commonly used for classification problems but can also be\nused for regression problems if the data is normalized first.\n\nWithout normalization, here's how you create a simple neural network with 7 hidden layers.\nUnfortunately, you can't use the simple `y ~ .` syntax, you must specify each observation\nyou want to use.\n\n\n```r\nnn = neuralnet(load ~ yday + hour + precip + cloud_ceiling + visibility + temperature + \n    dewpoint + pressure + wind_north + wind_east, data = pep2, hidden = c(7))\nplot(nn)\n```\n\n\nThe `hidden` options controls how many layers are built and how many node there are on each layer. \nFor example, if you want 2 hidden layers with 7 and 5 nodes respectively then,\n\n```r\nnn = neuralnet(load ~ yday + hour + precip + cloud_ceiling + visibility + temperature + \n    dewpoint + pressure + wind_north + wind_east, data = pep2, hidden = c(7, \n    5))\nplot(nn)\n```\n\n\nAs mentioned above, this does not product a good prediction because the data hasn't been normalized.\nLet's pick out day 185 and put it in a form that `neuralnet` understand so we can get a prediction.\n\n```r\n\nday185 = pep2[pep2$yday == 185, ]\nday185m = model.matrix(load ~ . - 1, day185)\n\nres = compute(nn, day185m)\nres$net.result[, 1]\n```\n\n```\n##        4274        4275        4276        4277        4280        4281 \n## 3540.899479 3540.899479 3540.899479 3540.899479 3540.899479 3540.899479 \n##        4282        4283        4284        4285        4286        4287 \n## 3540.899479 3540.899479 3540.899479 3540.899479 3540.899479 3540.899479 \n##        4288        4289        4290        4291        4292        4293 \n## 3540.899479 3540.899479 3540.899479 3540.899479 3540.899479 3540.899479 \n##        4294 \n## 3540.899479\n```\n\nAs you can see, it generated the same estimate for every sample which is not good.\n\nHere's one way of normalizing this data.  Start by putting every data point between 0 and 1.\n\n```r\n\n# normalize data between 0 and 1\npep2n = sweep(pep2, 2, apply(pep2, 2, min), \"-\")\npep2n = sweep(pep2n, 2, apply(pep2n, 2, max), \"/\")\nView(pep2n)\n```\n\n\nUsing the default settings for the `neuralnet` package tend to not converge on this data set\nso try increasing the threshold to 0.3.  Also, setting the `lifesign` parameters allows you\nto see how the learning process is doing.\n\n\n```r\nnn = neuralnet(load ~ yday + hour + precip + cloud_ceiling + visibility + temperature + \n    dewpoint + pressure + wind_north + wind_east, data = pep2, lifesign = \"full\", \n    lifesign.step = 5000, threshold = 0.3, hidden = c(7))\n```\n\n```\n## hidden: 7    thresh: 0.3    rep: 1/1    steps:    5000\tmin thresh: 206300.8478\n##                                                   5082\terror: 1296604092 \ttime: 38.89 secs\n```\n\n```r\nplot(nn)\n```\n\nNow normalize the day 185 data to get the normalized result.\n\n```r\nday185n = pep2n[which(pep2$yday == 185), ]\nday185nm = model.matrix(load ~ . - 1, day185n)\nres = compute(nn, day185nm)\nres$net.result[, 1]\n```\n\n```\n##        4274        4275        4276        4277        4280        4281 \n## 1935.903981 1988.129447 2044.701972 2076.022562 1980.232871 1878.699714 \n##        4282        4283        4284        4285        4286        4287 \n## 1893.594661 1896.489397 1911.776193 1930.230024 1931.277257 1961.190579 \n##        4288        4289        4290        4291        4292        4293 \n## 1983.160049 1942.797893 1998.829873 1919.803975 1929.922810 1968.556369 \n##        4294 \n## 1948.044681\n```\n\n\nAnd denormalize the result.\n```\npredictions = res$net.result[,1]*(max(pep2$load)-min(pep2$load))+min(pep2$load)\npredictions\nday185$load\n```\n\nYou can see that getting a good estimate out of the `neuralnet` package with R is difficult.\nIn the next section we will add a helper functions to make this easier.\n\n## Comparisons\n\nYou may have noticed that every package has a different way of reporting results.\nWe would like a model-independent way of comparing each method so we can decide which\nmodel works best for the data.\n\nThe following method does a K-Fold cross-validation for a given model in a generic way.\nA K-Fold works by splitting the data into K pieces, training each combination of K-1 pieces\nand testing against the piece not used in training.  That process is repeated K times and\naveraged to compute the overall mean absolute percentage error (MAPE) for the test data segments.\nBy default this cross-validation splits data on the \"yday\" field in order to avoid using data\npoints that are close together in time (and therefore highly correlated) for both training and prediction.\n\nThis is a good way to compare results across algorithms and gives us apples-to-apples\ncomparisons for how well we expect a given algorithm to predict load.\n\nEvaluate the entire block of code below.\n\n\n```r\n# test model error using K-folds\nmodel_mape = function(model, formula, data, foldon = \"yday\", K = 6, normalize = FALSE, \n    verbose = FALSE, ...) {\n    uniques = unique(data[, foldon])\n    folds = split(sample(uniques), 1:length(uniques)%%K)\n    sape = 0\n    y = all.vars(formula)[1]  # the name of the thing we are solving for\n    \n    # normalize data between 0 and 1\n    if (normalize) {\n        ndata = sweep(data, 2, apply(data, 2, min), \"-\")\n        ndata = sweep(ndata, 2, apply(ndata, 2, max), \"/\")\n        min_y = min(data[y])\n        scale_y = max(data[y]) - min_y\n    } else {\n        ndata = data\n        min_y = 0\n        scale_y = 1\n    }\n    \n    for (fold in 1:K) {\n        test_rows = data[, foldon] %in% unlist(folds[fold])\n        train_data = subset(ndata, !test_rows)\n        test_data = subset(ndata, test_rows)\n        test_data_orig = subset(data, test_rows)\n        \n        fit = model(formula, data = train_data, ...)\n        predictions = predict(fit, test_data, ...)\n        norm_residuals = (predictions - test_data[y])\n        # denormalize\n        residuals = norm_residuals * scale_y\n        \n        # sum of absolute percentage errors for fold K\n        sape_k = sum(abs(residuals/test_data_orig[y]))\n        sape = sape + sape_k\n        if (verbose) {\n            cat(\"mape[\", fold, \"] = \", round(100 * sape_k/nrow(test_data[y]), \n                1), \"\\n\", sep = \"\")\n        }\n    }\n    # mean absolute percentage error (MAPE)\n    round(100 * sape/nrow(data), 1)\n}\n```\n\nAnd since `neuralnet` doesn't define a predict method, we need to write one.\nThis will get called when `predict` is called with the result of a `neuralnet` call.\nSimply put, this gives us an answer that is similar in format to all of the other\n`predict` calls so that we can use it in our model comparisons below.\n\n```r\npredict.nn = function(fit, data, ...) {\n    orig_formula = paste(fit$model.list$response, paste(fit$model.list$variables, \n        collapse = \"+\"), sep = \"~\")\n    # remove the intercept from the original formula since compute doesn't want\n    # that\n    matrix_formula = as.formula(paste(orig_formula, \"- 1\"))\n    datam = model.matrix(matrix_formula, data)\n    result = compute(fit, datam)\n    # return only the last column which is the prediction values\n    predictions = result$net.result[, 1]\n}\n```\n\n\nNow let's calculate MAPE for all of the models.\n\n\n```r\n# linear models\nmodel_mape(lm, load ~ ., pep2)\n```\n\n```\n## [1] 14.2\n```\n\n```r\nmodel_mape(lm, load ~ . * ., pep2)\n```\n\n```\n## [1] 9.6\n```\n\n```r\nmodel_mape(lm, load ~ .^2 + poly(temperature, 5) * poly(hour, 5) - temperature - \n    hour - temperature:hour, pep2)\n```\n\n```\n## [1] 6\n```\n\n\n```r\n# generalized additive models\nmodel_mape(gam, load ~ s(temperature) * s(hour) + s(dewpoint) + s(yday) + s(pressure), \n    pep2)\n```\n\n```\n## [1] 7\n```\n\n\n```r\n# regression tree\nmodel_mape(tree, load ~ ., pep2)\n```\n\n```\n## [1] 8.9\n```\n\n\n```r\n# random forest\nmodel_mape(randomForest, load ~ ., pep2, ntree = 50)\n```\n\n```\n## [1] 5.9\n```\n\n```r\nmodel_mape(randomForest, load ~ ., pep2, ntree = 50, mtry = 6)\n```\n\n```\n## [1] 5.5\n```\n\n```r\nmodel_mape(randomForest, load ~ ., pep2, ntree = 100, mtry = 6)\n```\n\n```\n## [1] 5.5\n```\n\n```r\nmodel_mape(randomForest, load ~ ., pep2, ntree = 200, mtry = 6)\n```\n\n```\n## [1] 5.5\n```\n\n\n```r\n# generalized boosting\nmodel_mape(gbm, load ~ ., pep2, distribution = \"gaussian\", n.trees = 2000, interaction.depth = 4, \n    shrinkage = 0.2)\n```\n\n```\n## [1] 5.8\n```\n\n```r\nmodel_mape(gbm, load ~ ., pep2, distribution = \"gaussian\", n.trees = 2000, interaction.depth = 4, \n    shrinkage = 0.1)\n```\n\n```\n## [1] 5.4\n```\n\n```r\nmodel_mape(gbm, load ~ ., pep2, distribution = \"gaussian\", n.trees = 2000, interaction.depth = 4, \n    shrinkage = 0.15)\n```\n\n```\n## [1] 5.6\n```\n\n```r\nmodel_mape(gbm, load ~ ., pep2, distribution = \"gaussian\", n.trees = 2000, interaction.depth = 5, \n    shrinkage = 0.15)\n```\n\n```\n## [1] 5.6\n```\n\n```r\nmodel_mape(gbm, load ~ ., pep2, distribution = \"gaussian\", n.trees = 2000, interaction.depth = 5, \n    shrinkage = 0.15, bag.fraction = 0.7)\n```\n\n```\n## [1] 5.6\n```\n\n```r\nmodel_mape(gbm, load ~ ., pep2, distribution = \"gaussian\", n.trees = 2000, interaction.depth = 5, \n    shrinkage = 0.15, bag.fraction = 1)\n```\n\n```\n## [1] 5.4\n```\n\n```r\nmodel_mape(gbm, load ~ ., pep2, distribution = \"gaussian\", n.trees = 5000, interaction.depth = 5, \n    shrinkage = 0.15, bag.fraction = 1)\n```\n\n```\n## [1] 5.4\n```\n\n```r\nmodel_mape(gbm, load ~ ., pep2, distribution = \"laplace\", n.trees = 5000, interaction.depth = 5, \n    shrinkage = 0.15, bag.fraction = 1)\n```\n\n```\n## [1] 5.3\n```\n\n\n```r\n# neural networks\nmodel_mape(neuralnet, load ~ yday + hour + precip + cloud_ceiling + visibility + \n    temperature + dewpoint + pressure + wind_north + wind_east, data = pep2, \n    normalize = TRUE, threshold = 0.3, hidden = c(7))\n```\n\n```\n## [1] 6.4\n```\n\n```r\n\nmodel_mape(neuralnet, load ~ yday + hour + precip + cloud_ceiling + visibility + \n    temperature + dewpoint + pressure + wind_north + wind_east, data = pep2, \n    normalize = TRUE, threshold = 0.3, hidden = c(9))\n```\n\n```\n## [1] 6.3\n```\n\n```r\n\nmodel_mape(neuralnet, load ~ yday + hour + precip + cloud_ceiling + visibility + \n    temperature + dewpoint + pressure + wind_north + wind_east, data = pep2, \n    normalize = TRUE, threshold = 0.3, hidden = c(11))\n```\n\n```\n## [1] 6.1\n```\n\n```r\n\nmodel_mape(neuralnet, load ~ yday + hour + precip + cloud_ceiling + visibility + \n    temperature + dewpoint + pressure + wind_north + wind_east, data = pep2, \n    normalize = TRUE, threshold = 0.3, hidden = c(6, 5))\n```\n\n```\n## [1] 6.3\n```\n\n```r\n\nmodel_mape(neuralnet, load ~ yday + hour + precip + cloud_ceiling + visibility + \n    temperature + dewpoint + pressure + wind_north + wind_east, data = pep2, \n    normalize = TRUE, threshold = 0.3, hidden = c(7, 2))\n```\n\n```\n## [1] 6.2\n```\n\n```r\n\nmodel_mape(neuralnet, load ~ yday + hour + precip + cloud_ceiling + visibility + \n    temperature + dewpoint + pressure + wind_north + wind_east, data = pep2, \n    normalize = TRUE, threshold = 0.1, hidden = c(9))\n```\n\n```\n## [1] 5.8\n```\n\n\nAll of the above results were run on the \"transformed\" dataset.  What happens if we run\nsome of them against the original unmodified data?\n\n```r\nmodel_mape(randomForest, load ~ ., pep, ntree = 200, mtry = 6)\n```\n\n```\n## [1] 5.4\n```\n\n```r\n\nmodel_mape(gbm, load ~ ., pep, distribution = \"laplace\", n.trees = 5000, interaction.depth = 5, \n    shrinkage = 0.15, bag.fraction = 1)\n```\n\n```\n## [1] 5.2\n```\n\n```r\n\nmodel_mape(neuralnet, load ~ yday + hour + precip + cloud_ceiling + visibility + \n    temperature + dewpoint + pressure + wind_speed + wind_dir, data = pep, normalize = TRUE, \n    threshold = 0.3, hidden = c(9))\n```\n\n```\n## [1] 6.9\n```\n\n\n## Conclusions\n\nBoosting and Random Forest techniques seem to be the current leaders in prediction accuracy.\nRandom Forest is one of the easiest algorithms to use in terms of working without much tuning.\nBoosting requires a little tuning to figure out the best regularization lambda and tree size,\nbut that effort pays off with the best accuracy.\n\nNeural networks don't appear be as good as either\nBoosting or Random Forest and requires a lot more tuning than either of those algorithms.\n\nAmong Boosting, Random Forest, and Neural Networks, it seems like Boosting is the fastest,\nfollowed by Random Forest, and Neural Networks.  None of them are particularly fast however.\n\nOverall, Boosting seems to be the best algorithm based on prediction accuracy and\nspeed of learning.\n\n## Appendix - Generating this Document\n\nIf you are in RStudio and want an HTML version of this document, just click Knit HTML above this pane.  If you want to generate the markdown for the github wiki, keep reading.\n\nFirst, configure the figure path so that the images end up in the images folder with\na relative url in \"analysis/images/\"\n```r\nrequire(knitr)\nsetwd(\"/your/path/to/advanced-apps.wiki/analysis\")  # copy this line and set to your path\nopts_knit$set(base.dir = '..')\nopts_chunk$set(fig.path = paste0(basename(getwd()), '/images/'))\n```\n\nThen you can generate the markdown for this page using the `knitr` package\n```r\nknit(\"pjm.Rmd\", output=\"Analyzing-PJM-Data-with-R.md\")\n```\n","markers":{"markers":{"1":{"id":1,"range":[[82,0],[82,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":78,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/tra/src/advanced-apps.wiki/analysis/Analyzing-PJM-Data-with-R.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"82d7a06044bd399fc15fcc9e30cd508eda83f426","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":10,"softTabs":true,"displayBuffer":{"id":11,"softWrapped":false,"editorWidthInChars":null,"scrollTop":1,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/fcu.R","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":14,"softTabs":true,"displayBuffer":{"id":15,"softWrapped":false,"editorWidthInChars":null,"scrollTop":1464,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/load.R","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":62,"softTabs":true,"displayBuffer":{"id":63,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/MeanVsEndOfHour.md","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":78,"softTabs":true,"displayBuffer":{"id":79,"softWrapped":true,"editorWidthInChars":null,"scrollTop":1887,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/Analyzing-PJM-Data-with-R.md","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":18,"softTabs":true,"displayBuffer":{"id":19,"softWrapped":false,"editorWidthInChars":null,"scrollTop":2710,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/mape.R","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":58,"softTabs":true,"displayBuffer":{"id":59,"softWrapped":true,"editorWidthInChars":null,"scrollTop":724,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/MeanVsEndOfHour.Rmd","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":30,"softTabs":true,"displayBuffer":{"id":31,"softWrapped":true,"editorWidthInChars":null,"scrollTop":5673,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/Analyzing-FCU-Data-with-R.md","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":34,"softTabs":true,"displayBuffer":{"id":35,"softWrapped":true,"editorWidthInChars":null,"scrollTop":31284,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/Optimizing-Number-Training-Days.md","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":22,"softTabs":true,"displayBuffer":{"id":23,"softWrapped":true,"editorWidthInChars":null,"scrollTop":1073,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps.wiki/analysis/mapeLoop.Rmd","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemUri":"/Users/tra/src/advanced-apps.wiki/analysis/load.R","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["as.POSIX","strptime","POSIX","strptime","POSIX","mape.R","shrinkage","fit"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/tra/src/advanced-apps.wiki/analysis/fcu.R":1424294554930,"/Users/tra/src/advanced-apps.wiki/analysis/load.R":1424294558755,"/Users/tra/src/advanced-apps.wiki/analysis/MeanVsEndOfHour.md":1423698628995,"/Users/tra/src/advanced-apps.wiki/analysis/Analyzing-PJM-Data-with-R.md":1423761273567,"/Users/tra/src/advanced-apps.wiki/analysis/mape.R":1421272488450,"/Users/tra/src/advanced-apps.wiki/analysis/MeanVsEndOfHour.Rmd":1421270125236,"/Users/tra/src/advanced-apps.wiki/analysis/Analyzing-FCU-Data-with-R.md":1421269520568,"/Users/tra/src/advanced-apps.wiki/analysis/Optimizing-Number-Training-Days.md":1421269614566,"/Users/tra/src/advanced-apps.wiki/analysis/mapeLoop.Rmd":1423704092402},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1269631165},"tree-view":{"directoryExpansionStates":{"analysis":{}},"selectedPath":"/Users/tra/src/advanced-apps.wiki/analysis/load.R","hasFocus":false,"attached":true,"scrollLeft":8,"scrollTop":0,"width":270}}}