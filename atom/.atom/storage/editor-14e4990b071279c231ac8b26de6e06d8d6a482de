{"mode":"editor","version":1,"windowDimensions":{"x":84,"y":24,"width":1557,"height":1414},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/tra/src/advanced-apps/aa-prediction","buffers":[{"text":"require 'r_with_reconninit'\n\n# Base Class for any models that wish to use R.\n#\n# Handles reconnecting to broken pipes\nmodule Predictors\n  class RPredictorBase\n    def initialize(node, since, before, interval)\n      @node = node\n      adjust_times(since, before, interval)\n    end\n\n    # Adjust times, but bail out if we're already at this time\n    def adjust_times(since, before, interval)\n      if since == @since && before == @before && interval == @interval\n        Rails.logger.info(\"Adjusting times aborted - already at this time\")\n        return\n      end\n      Rails.logger.info(\"adjusting time\")\n\n      @since = since\n      @before = before\n      @interval = interval\n      times_adjusted\n    end\n\n    attr_reader :node, :since, :before, :interval\n\n    # Hook for initializing the R environment. Subclasses should\n    # override with class specific setup for the R process\n    #\n    # an_r_in_ruby - The RinRuby instance that should be initialized\n    def initialize_r(an_r_in_ruby)\n    end\n\n    # Callback for children to do any cleanup necessary\n    def times_adjusted\n    end\n\n    protected\n\n    def r\n      @r ||= RWithReconninit.new self.method(:initialize_r)\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[15,42],[15,42]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":37,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/predictors/r_predictor_base.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"545d218b5dcaf90a53e367b6f105776d08d2ae16","deserializer":"TextBuffer"},{"text":"module Predictors\n  class GbmModel < RPredictorBase\n    R_CODE_LOC = Rails.root + 'R' + 'load.R'\n\n    def initialize(*args)\n      super\n      prepare_model\n      initialize_prediction_tracking\n    end\n\n    def temporary_model_file\n      @temporary_model_file ||= Tempfile.new(\"gbm_model\")\n    end\n\n    def prepare_model\n      encoded_blob = RModel[node.href].first.serialized_model\n      decoded_blob = [encoded_blob].pack(\"H*\")\n      File.open(temporary_model_file.path, \"wb\") { |f| f.write(decoded_blob) }\n    rescue => e\n      raise PredictionError, \"Unable to load serialized model\"\n    end\n\n    # Sorta hacky - tracks which index of the predictions array from R matches each time\n    def initialize_prediction_tracking\n      @predictions_for_time = {}\n      @prediction_counter = 0.step(Float::INFINITY, 1)\n    end\n\n    def initialize_r(an_r_in_ruby)\n      an_r_in_ruby.eval <<-EOF\n        require(gbm)\n        source('#{R_CODE_LOC}')\n        fit = readRDS('#{temporary_model_file.path}')\n      EOF\n    rescue StandardError, RinRuby::EngineClosed => e\n      raise PredictionError, \"Prediction Initialization Error: #{e.message}\"\n    end\n\n    # When we get our times adjusted, we have to redo predictions, and request\n    # new features. And for now, reset the faked weather.\n    # Basically just reset everything except the R instance we have with the model loaded.\n    def times_adjusted\n      @time_request = nil\n      @weather_lines = nil\n      @all_predictions = nil\n      @requests = nil\n      initialize_prediction_tracking\n    end\n\n    def predict(time, features)\n      @all_predictions ||= begin\n                             r.with_retry do\n                               feature_csv = features.r_formatted_csv\n                               Rails.logger.info { \"Feature CSV:\\n#{feature_csv}\" }\n                               r.eval <<-EOF\n                                 s1 = Sys.time()\n                                 #{feature_csv}\n                                 elapsed_features = as.numeric(Sys.time() - s1)\n\n                                 start = Sys.time()\n                                 predictions = predict(fit, data)\n                                 elapsed = as.numeric(Sys.time() - start)\n                               EOF\n\n                               elapsed_in_features = r.pull(\"elapsed_features\")\n                               Rails.logger.info(\"Duration inside of Feature Send: #{elapsed_in_features}\")\n\n                               elapsed_in_r = r.pull(\"elapsed\")\n                               Rails.logger.info(\"Duration inside of R: #{elapsed_in_r}\")\n\n                               r.pull(\"predictions\")\n                             end\n                           end\n\n      @all_predictions[offset_for_time(time)]\n    rescue StandardError, RinRuby::EngineClosed => e\n      raise PredictionError, \"Prediction Error: #{e.message}\"\n    end\n\n    def requested_features\n      @requests ||=\n        [FeatureRequests::HourOfDayRequest,\n         FeatureRequests::DayOfWeekRequest,\n         FeatureRequests::DayOfYearRequest,\n         FeatureRequests::OutdoorAirTemperatureRequest,\n         FeatureRequests::DewPointRequest,\n         FeatureRequests::PreviousLoadRequest,\n      ].map{|klass| klass.new(node, since, before, interval) }\n    end\n\n    protected\n\n    def offset_for_time(time)\n      (time - since).div interval\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[5,11],[5,11]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":45,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/predictors/gbm_model.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"853522f17c6ee9139d41e0ca1c59b5c2c80e5cfb","deserializer":"TextBuffer"},{"text":"require 'refreshing_cache'\n\nclass TotalNodeLoadFactory\n  CACHE_CHECK_INTERVAL = 1.hour\n\n  def self.fetch(node, since, before, interval)\n    @models ||= RefreshingCache.new(timeout: CACHE_CHECK_INTERVAL,\n                                    check_proc: ->(key, time) { RModel[key].first.at.to_time > time },\n                                    value_proc: ->(key, time) { create_model(node, since, before, interval) }\n                                   )\n\n    @models[node.href].tap { |model| model.adjust_times(since, before, interval) }\n  end\n\n  def self.create_model(node, since, before, interval)\n    Predictors::GbmModel.new(node, since, before, interval)\n  end\n\n  def self.prediction_type\n    :total_load\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[15,24],[15,24]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":49,"autoscroll":true,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/total_node_load_factory.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"82ebfb9ad492a8f31b9cfebaa7d29611721d2e9f","deserializer":"TextBuffer"},{"text":"require 'logging'\n\nmodule FeatureRequests\n  # Provides access to outdoor temperature as a time series.\n  class OutdoorAirTemperatureRequest < AbstractFeatureRequest\n    using Timerage\n    include ActiveSupport::Benchmarkable\n    include Logging\n\n    def time_series\n      @time_series ||= (since...before).step(period).map {|t|\n        observations[period_offset_for_time(t)].first.value\n      }\n    end\n\n    protected\n\n    attr_reader :node\n\n    def default_header_name\n      \"temperature\"\n    end\n\n    def observations\n      @observations ||= benchmark(\"Fetching air temperature observations\") do\n        CgjModels::ObservationCollection\n          .new(node.related(\"https://rels.comverge.com/weather\",\n                            about: \"https://tags.comverge.com/air-temperature\",\n                            since: since.xmlschema, before: before.xmlschema,\n                            coalesce_period: 1.hour.to_s))\n          .group_by {|it| period_offset_for_time(it.measurement_at.to_time) }\n          .tap{|it| it.default = [CgjModels::Observation.new({})].freeze }\n      end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[25,19],[25,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":120,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/feature_requests/outdoor_air_temperature_request.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"fed04ad3d2d822ea5e8c842a5245139875fbb607","deserializer":"TextBuffer"},{"text":"require 'r_with_reconninit'\n# Generates an R model for the load for a single node (HAL record)\nmodule Learning\n  class NodeTotalLoad\n    def initialize(node, options={})\n      @node = node\n      @since    = options.fetch(:since,    800.days.ago.midnight)\n      @before   = options.fetch(:before,   1.day.ago.midnight)\n      @interval = options.fetch(:interval, 60.minutes)\n    end\n\n    def call\n      train\n      save_model_to_cassandra\n    end\n\n    protected\n\n    attr_reader :node, :since, :before, :interval, :r\n\n    def features\n      @features ||= FeatureCollection.new(\n        [\n          FeatureRequests::LoadRequest.new(node, since, before, interval),\n          FeatureRequests::HourOfDayRequest.new(node, since, before, interval),\n          FeatureRequests::DayOfWeekRequest.new(node, since, before, interval),\n          FeatureRequests::DayOfYearRequest.new(node, since, before, interval),\n          FeatureRequests::ActualOutdoorAirTemperatureRequest.new(node, since, before, interval),\n          FeatureRequests::ActualDewPointRequest.new(node, since, before, interval),\n          FeatureRequests::PreviousLoadRequest.new(node, since, before, interval),\n        ]\n      )\n    end\n\n    def feature_csv_file\n      @feature_csv_file ||= Tempfile.new(\"training_data\")\n    end\n\n    R_CODE_LOC = Rails.root + 'R' + 'load.R'\n\n    def train\n      features.write_csv(feature_csv_file)\n\n      r_create_instance\n      r_load_training_data\n      r_train_model\n      r_save_model\n      r_calculate_timings\n\n      elapsed_features = r.pull(\"elapsed_features\")\n      elapsed_train    = r.pull(\"elapsed_train\")\n      elapsed_save     = r.pull(\"elapsed_save\")\n      elapsed_total    = r.pull(\"elapsed_total\")\n\n      Rails.logger.info(\"Training for #{@node.href} complete. [Timing] Features: #{elapsed_features}, Train: #{elapsed_train}, Save: #{elapsed_save}, Total: #{elapsed_total}\")\n    end\n\n    def r_create_instance\n      @r ||= RWithReconninit.new(->(arrrrr) do # stabby like a pirate.\n        arrrrr.eval <<-EOF\n          require(gbm)\n          source('#{R_CODE_LOC}')\n        EOF\n      end)\n    end\n\n    def r_load_training_data\n      r.eval <<-EOF\n        time1 = Sys.time()\n\n        data = read.csv('#{feature_csv_file.path}')\n        time2 = Sys.time()\n      EOF\n    end\n\n    def r_train_model\n      r.eval <<-EOF\n        fit = load.train(data)\n        time3 = Sys.time()\n      EOF\n    end\n\n    def r_save_model\n      r.eval <<-EOF\n        saveRDS(fit, '#{model_destination.path}')\n        time4 = Sys.time()\n      EOF\n    end\n\n    def r_calculate_timings\n      r.eval <<-EOF\n        elapsed_features = as.numeric(time2 - time1)\n        elapsed_train    = as.numeric(time3 - time2)\n        elapsed_save     = as.numeric(time4 - time3)\n        elapsed_total    = as.numeric(time4 - time1)\n      EOF\n    end\n\n    def save_model_to_cassandra\n      model_blob = File.open(model_destination.path, \"rb\").read\n      hex_model_blob = model_blob.unpack(\"H*\").first\n\n      RModel.create!(:node_href        => @node.href,\n                     :serialized_model => hex_model_blob)\n    end\n\n    def model_destination\n      @model_destination ||= Tempfile.create(\"node_total_load_model\")\n    end\n  end\nend\n\n","markers":{"markers":{"1":{"id":1,"range":[[3,8],[3,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":136,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/learning/node_total_load.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5132f058b47caad5bdef34f10f6c32524e0b58d6","deserializer":"TextBuffer"},{"text":"module FeatureRequests\n\n  # Provides basic interface for feature requests\n  class AbstractFeatureRequest\n    def initialize(node, since, before, period_duration, options={})\n      @node = node\n      @since = since\n      @before = before\n      @period = period_duration\n      @options = options\n    end\n\n    def call\n      time_series\n    end\n\n    def time_series\n      fail NotImplementedError\n    end\n\n    def ==(other)\n      self.class == other.class &&\n        node == other.node &&\n        since == other.since &&\n        before == other.before &&\n        period == other.period\n\n    rescue NoMethodError\n      # probably other is not really a request\n      false\n    end\n\n    def eql?(other)\n      self == other\n    end\n\n    def hash\n      [self.class, node, since, before, period].hash\n    end\n\n    def header_name\n      options.fetch(:header_name) { default_header_name }\n    end\n\n    protected\n\n    attr_reader :node, :since, :before, :period, :options\n\n    # Given a time find how many period sized steps we've taken to get there from `since`\n    def period_offset_for_time(time)\n      (time - since).div period\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[50,8],[50,8]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":148,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/feature_requests/abstract_feature_request.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"07896006c430dbfac63f10c52a07980b51a8c9e8","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":49,"softTabs":true,"displayBuffer":{"id":50,"softWrap":false,"editorWidthInChars":130,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/total_node_load_factory.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":120,"softTabs":true,"displayBuffer":{"id":121,"softWrap":false,"editorWidthInChars":133,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/feature_requests/outdoor_air_temperature_request.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":148,"softTabs":true,"displayBuffer":{"id":149,"softWrap":false,"editorWidthInChars":133,"scrollTop":257,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/feature_requests/abstract_feature_request.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":136,"softTabs":true,"displayBuffer":{"id":137,"softWrap":false,"editorWidthInChars":133,"scrollTop":710,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/learning/node_total_load.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":45,"softTabs":true,"displayBuffer":{"id":46,"softWrap":false,"editorWidthInChars":133,"scrollTop":1096,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/predictors/gbm_model.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":37,"softTabs":true,"displayBuffer":{"id":38,"softWrap":false,"editorWidthInChars":126,"scrollTop":98,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/predictors/r_predictor_base.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/tra/src/advanced-apps/aa-prediction/app/models/predictors/gbm_model.rb","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"projectViewState":{"findHistory":["times aborted","RPredictorBase","GbmModel","OutdoorAirTemperatureRequest","NodeTotalLoad","period_offset_for_time"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/tra/src/advanced-apps/aa-prediction/app/models/total_node_load_factory.rb":1401729504786,"/Users/tra/src/advanced-apps/aa-prediction/app/models/feature_requests/outdoor_air_temperature_request.rb":1401731308550,"/Users/tra/src/advanced-apps/aa-prediction/app/models/feature_requests/abstract_feature_request.rb":1401730865842,"/Users/tra/src/advanced-apps/aa-prediction/app/models/learning/node_total_load.rb":1401730744938,"/Users/tra/src/advanced-apps/aa-prediction/app/models/predictors/gbm_model.rb":1401743716478,"/Users/tra/src/advanced-apps/aa-prediction/app/models/predictors/r_predictor_base.rb":1401382328173},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":21516029},"tree-view":{"directoryExpansionStates":{"app":{"models":{"feature_requests":{},"predictors":{}}},"R":{}},"selectedPath":"/Users/tra/src/advanced-apps/aa-prediction/app/models/predictors/gbm_model.rb","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}