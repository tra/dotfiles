{"mode":"editor","version":1,"windowDimensions":{"x":282,"y":26,"width":1515,"height":1412},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/tra/src/advanced-apps/aa-observations","buffers":[{"text":"require 'active_model'\nrequire 'securerandom'\nrequire 'digest/bubblebabble'\n\n\nclass Observation\n  include ActiveModel::Validations\n\n  def initialize(attrs = {})\n    attrs.each do |attr, val|\n      self.send \"#{attr}=\", val\n    end\n\n    yield self if block_given?\n  end\n\n  attr_reader :measurement_by, :measurement_at, :collected_at, :value,\n              :value, :unit\n\n  attr_writer :measurement_by, :value, :surrogate_key,\n              :value, :tags\n\n  def surrogate_key\n    @surrogate_key ||= SecureRandom.uuid\n  end\n\n  def unit=(new_unit)\n    @unit = begin\n              new_unit.upcase\n            rescue NoMethodError\n              new_unit\n            end\n  end\n\n  def measurement_at=(new_measurement_at)\n    @measurement_at = if rangish? new_measurement_at\n                        Range.new(new_measurement_at.begin.to_time.getutc,\n                                  new_measurement_at.end.to_time.getutc,\n                                  new_measurement_at.exclude_end?)\n                      else\n                        new_measurement_at.to_time.getutc\n                      end\n  end\n\n  def collected_at=(new_collected_at)\n    @collected_at = if new_collected_at.nil?\n                      new_collected_at\n                    else\n                      new_collected_at.getutc\n                    end\n  end\n\n  def measurement_date\n    measurement_started_at.to_time.getutc.beginning_of_day\n  end\n\n  def duration\n    if instantaneous?\n      0\n\n    else\n      measurement_at.end - measurement_at.begin\n    end\n  end\n\n  def collected_at\n    @collected_at ||= if instantaneous?\n                        measurement_at\n                      else\n                        measurement_at.end\n                      end\n  end\n\n  def measurement_started_at\n    if instantaneous?\n      measurement_at\n\n    else\n      measurement_at.begin\n    end\n  end\n\n  def instantaneous?\n    ! rangish? measurement_at\n  end\n\n  validates_presence_of :measurement_at, :measurement_by\n\n  validate :tag_validations\n\n  def tags\n    @tags ||= []\n  end\n\n  alias_method :tag_hrefs, :tags\n\n  def numeric?\n    Numeric === value\n  end\n\n  def textual?\n    ! numeric?\n  end\n\n  def ==(other)\n    surrogate_key.to_s == other.surrogate_key.to_s\n  end\n  alias_method :eql?, :==\n\n  protected\n\n\n  def rangish?(obj)\n    obj.respond_to?(:begin) &&\n      obj.respond_to?(:end)\n  end\n\n  validates :measurement_by, :measurement_at, :value, :unit, presence: true\n\n  validate :tag_validations\n\n  def tag_validations\n    validates_with *tags_validators\n  end\n\n  def recorder\n    ObservationRecorder.new(Rails.application.master_dataset_facts_recorder)\n  end\n\n  def tags_helper\n    Tags::Base\n  end\n\n  def tags_validators\n    return [] if tags.nil? or tags.blank?\n\n    tags.map {|a_tag| tags_helper.validator_for a_tag }\n  end\nend\n\nclass ObservationInvalidError < StandardError\n  def initialize(observations=nil)\n    observations = Array(observations)\n    super(\"Observation is invalid\")\n    @observations = observations\n  end\n\n  attr_reader :observations\n\n  def observation\n    observations.sample\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":84,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"require 'digest/bubblebabble'\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[3,0],[4,0]],"newRange":[[3,0],[3,0]],"oldText":"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[5,0]],"oldText":"","newText":"  include ActiveModel::Model\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[7,0]],"oldText":"","newText":"  include Tags\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[8,0]],"newRange":[[8,0],[9,0]],"oldText":"","newText":"  attr_accessor :id, :value, :unit, :instrument_id\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[13,0]],"newRange":[[9,0],[9,0]],"oldText":"  def initialize(attrs = {})\n    attrs.each do |attr, val|\n      self.send \"#{attr}=\", val\n    end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[10,0],[10,0]],"newRange":[[10,0],[12,0]],"oldText":"","newText":"  # TODO: Move this into configuration\n  RELATIONS_NAMESPACE = \"https://rels.comverge.com/{rel}\"\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[14,0]],"newRange":[[12,0],[12,0]],"oldText":"    yield self if block_given?\n  end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[13,0],[13,0]],"newRange":[[13,0],[15,0]],"oldText":"","newText":"  def master_dataset_id\n    \"observations:\" + id.to_s\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[23,0]],"newRange":[[15,0],[15,0]],"oldText":"  attr_reader :measurement_by, :measurement_at, :collected_at, :value,\n              :value, :unit\n\n  attr_writer :measurement_by, :value, :surrogate_key,\n              :value, :tags\n\n  def surrogate_key\n    @surrogate_key ||= SecureRandom.uuid\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[17,0],[17,0]],"newRange":[[17,0],[19,0]],"oldText":"","newText":"  def persisted?\n    self.id.present?\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[19,0],[25,0]],"newRange":[[19,0],[19,0]],"oldText":"  def unit=(new_unit)\n    @unit = begin\n              new_unit.upcase\n            rescue NoMethodError\n              new_unit\n            end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[21,0],[21,0]],"newRange":[[21,0],[29,0]],"oldText":"","newText":"  def resource=(element)\n    if element.present?\n      self.value         = element['value']\n      self.unit          = element['unitCode']\n      self.collected_at  = element['collectedAt']\n      self.instrument_id = element['_links']['so:instrument']['href']\n      self.tags          = element['_links']['tag'].map { |tag| tag['href'].strip }\n    end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[29,0],[38,0]],"newRange":[[29,0],[29,0]],"oldText":"  def measurement_at=(new_measurement_at)\n    @measurement_at = if rangish? new_measurement_at\n                        Range.new(new_measurement_at.begin.to_time.getutc,\n                                  new_measurement_at.end.to_time.getutc,\n                                  new_measurement_at.exclude_end?)\n                      else\n                        new_measurement_at.to_time.getutc\n                      end\n  end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[30,0],[30,0]],"newRange":[[30,0],[31,0]],"oldText":"","newText":"    @resource = element\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[31,0],[37,0]],"newRange":[[31,0],[31,0]],"oldText":"  def collected_at=(new_collected_at)\n    @collected_at = if new_collected_at.nil?\n                      new_collected_at\n                    else\n                      new_collected_at.getutc\n                    end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,0],[33,0]],"newRange":[[33,0],[35,0]],"oldText":"","newText":"  def resource\n    @resource\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[35,0],[37,0]],"newRange":[[35,0],[35,0]],"oldText":"  def measurement_date\n    measurement_started_at.to_time.getutc.beginning_of_day\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[37,0],[37,0]],"newRange":[[37,0],[39,0]],"oldText":"","newText":"  def valid?(context=nil)\n    core_validity = super context\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[42,0]],"newRange":[[39,0],[39,0]],"oldText":"  def duration\n    if instantaneous?\n      0\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[40,0],[40,0]],"newRange":[[40,0],[47,0]],"oldText":"","newText":"    self.tags.each do |tag|\n      klass = tags_helper.registered_tags[tag]\n      if klass.present?\n        validates_with tags_helper.validator_for(klass)\n      else\n        self.errors.add(:tag, \"#{CGI.escape(tag)} is invalid.\")\n      end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[47,0],[49,0]],"newRange":[[47,0],[47,0]],"oldText":"    else\n      measurement_at.end - measurement_at.begin\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[48,0],[49,0]],"newRange":[[48,0],[48,0]],"oldText":"  end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[49,0],[49,0]],"newRange":[[49,0],[50,0]],"oldText":"","newText":"    core_validity && self.errors.blank?\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[50,0],[56,0]],"newRange":[[50,0],[50,0]],"oldText":"  def collected_at\n    @collected_at ||= if instantaneous?\n                        measurement_at\n                      else\n                        measurement_at.end\n                      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[52,0],[52,0]],"newRange":[[52,0],[56,0]],"oldText":"","newText":"  def save\n    return false unless valid?\n    generate_id unless persisted?\n    save_to_flume\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[63,0]],"newRange":[[56,0],[56,0]],"oldText":"  def measurement_started_at\n    if instantaneous?\n      measurement_at\n\n    else\n      measurement_at.begin\n    end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[58,0],[58,0]],"newRange":[[58,0],[60,0]],"oldText":"","newText":"  def instrument_href\n    instrument_id\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[62,0]],"newRange":[[60,0],[60,0]],"oldText":"  def instantaneous?\n    ! rangish? measurement_at\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[62,0],[62,0]],"newRange":[[62,0],[64,0]],"oldText":"","newText":"  def tag_hrefs\n    tags || []\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[64,0],[70,0]],"newRange":[[64,0],[64,0]],"oldText":"  validates_presence_of :measurement_at, :measurement_by\n\n  validate :tag_validations\n\n  def tags\n    @tags ||= []\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[66,0],[66,0]],"newRange":[[66,0],[78,0]],"oldText":"","newText":"  # Returns the collected_at Time or the raw value if it is not\n  # coercible to Time.\n  def collected_at\n    @collected_at ||= if @raw_collected_at.respond_to?(:iso8601)\n                        # it's already a date-time-ish thing\n                        @raw_collected_at.to_time\n                      else\n                        Time.iso8601(@raw_collected_at.to_s)\n                      end\n  rescue ArgumentError\n    # invalid date format\n    @raw_collected_at\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,0],[82,0]],"newRange":[[78,0],[78,0]],"oldText":"  alias_method :tag_hrefs, :tags\n\n  def numeric?\n    Numeric === value\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[80,0],[80,0]],"newRange":[[80,0],[83,0]],"oldText":"","newText":"  def collected_at=(a_datetime_ish)\n    @collected_at = nil\n    @raw_collected_at = a_datetime_ish\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[83,0],[85,0]],"newRange":[[83,0],[83,0]],"oldText":"  def textual?\n    ! numeric?\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[85,0],[85,0]],"newRange":[[85,0],[86,0]],"oldText":"","newText":"  attr_reader :raw\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[86,0],[90,0]],"newRange":[[86,0],[86,0]],"oldText":"  def ==(other)\n    surrogate_key.to_s == other.surrogate_key.to_s\n  end\n  alias_method :eql?, :==\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[87,0],[87,0]],"newRange":[[87,0],[88,0]],"oldText":"","newText":"  validates_presence_of :value, :collected_at, :instrument_id\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[88,0],[89,0]],"newRange":[[88,0],[88,0]],"oldText":"  protected\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[89,0],[89,0]],"newRange":[[89,0],[92,0]],"oldText":"","newText":"  validates_each :collected_at do |observation, attr, value|\n    next if Time === value\n    observation.errors.add(attr, \"is invalid.  Please provide in RFC 3339 format.\")\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[92,0],[96,0]],"newRange":[[92,0],[92,0]],"oldText":"\n  def rangish?(obj)\n    obj.respond_to?(:begin) &&\n      obj.respond_to?(:end)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[94,0],[94,0]],"newRange":[[94,0],[95,0]],"oldText":"","newText":"  protected\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[95,0],[96,0]],"newRange":[[95,0],[95,0]],"oldText":"  validates :measurement_by, :measurement_at, :value, :unit, presence: true\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[96,0],[96,0]],"newRange":[[96,0],[98,0]],"oldText":"","newText":"  def generate_id\n    self.id = SecureRandom.uuid\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[98,0],[102,0]],"newRange":[[98,0],[98,0]],"oldText":"  validate :tag_validations\n\n  def tag_validations\n    validates_with *tags_validators\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[100,0],[100,0]],"newRange":[[100,0],[102,0]],"oldText":"","newText":"  def save_to_flume\n    Rails.logger.info(\"Saving resource!\") # TODO: Save to flume\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[102,0],[104,0]],"newRange":[[102,0],[102,0]],"oldText":"  def recorder\n    ObservationRecorder.new(Rails.application.master_dataset_facts_recorder)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[107,0],[113,0]],"newRange":[[107,0],[107,0]],"oldText":"\n  def tags_validators\n    return [] if tags.nil? or tags.blank?\n\n    tags.map {|a_tag| tags_helper.validator_for a_tag }\n  end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[122,0],[122,0]],"newRange":[[122,0],[124,0]],"oldText":"","newText":"\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[3,0]],"oldText":"","newText":"require 'digest/bubblebabble'\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[5,0]],"oldText":"","newText":"\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[7,0]],"newRange":[[6,0],[6,0]],"oldText":"  include ActiveModel::Model\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[7,0],[8,0]],"newRange":[[7,0],[7,0]],"oldText":"  include Tags\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[8,0]],"newRange":[[8,0],[12,0]],"oldText":"","newText":"  def initialize(attrs = {})\n    attrs.each do |attr, val|\n      self.send \"#{attr}=\", val\n    end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[13,0]],"newRange":[[12,0],[12,0]],"oldText":"  attr_accessor :id, :value, :unit, :instrument_id\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[13,0],[13,0]],"newRange":[[13,0],[15,0]],"oldText":"","newText":"    yield self if block_given?\n  end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[17,0]],"newRange":[[15,0],[15,0]],"oldText":"  # TODO: Move this into configuration\n  RELATIONS_NAMESPACE = \"https://rels.comverge.com/{rel}\"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[24,0]],"oldText":"","newText":"  attr_reader :measurement_by, :measurement_at, :collected_at, :value,\n              :value, :unit\n\n  attr_writer :measurement_by, :value, :surrogate_key,\n              :value, :tags\n\n  def surrogate_key\n    @surrogate_key ||= SecureRandom.uuid\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[24,0],[26,0]],"newRange":[[24,0],[24,0]],"oldText":"  def master_dataset_id\n    \"observations:\" + id.to_s\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[32,0]],"oldText":"","newText":"  def unit=(new_unit)\n    @unit = begin\n              new_unit.upcase\n            rescue NoMethodError\n              new_unit\n            end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,0],[34,0]],"newRange":[[32,0],[32,0]],"oldText":"  def persisted?\n    self.id.present?\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[34,0],[34,0]],"newRange":[[34,0],[43,0]],"oldText":"","newText":"  def measurement_at=(new_measurement_at)\n    @measurement_at = if rangish? new_measurement_at\n                        Range.new(new_measurement_at.begin.to_time.getutc,\n                                  new_measurement_at.end.to_time.getutc,\n                                  new_measurement_at.exclude_end?)\n                      else\n                        new_measurement_at.to_time.getutc\n                      end\n  end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[51,0]],"newRange":[[43,0],[43,0]],"oldText":"  def resource=(element)\n    if element.present?\n      self.value         = element['value']\n      self.unit          = element['unitCode']\n      self.collected_at  = element['collectedAt']\n      self.instrument_id = element['_links']['so:instrument']['href']\n      self.tags          = element['_links']['tag'].map { |tag| tag['href'].strip }\n    end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[44,0],[44,0]],"newRange":[[44,0],[50,0]],"oldText":"","newText":"  def collected_at=(new_collected_at)\n    @collected_at = if new_collected_at.nil?\n                      new_collected_at\n                    else\n                      new_collected_at.getutc\n                    end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[50,0],[51,0]],"newRange":[[50,0],[50,0]],"oldText":"    @resource = element\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[52,0],[52,0]],"newRange":[[52,0],[54,0]],"oldText":"","newText":"  def measurement_date\n    measurement_started_at.to_time.getutc.beginning_of_day\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,0],[56,0]],"newRange":[[54,0],[54,0]],"oldText":"  def resource\n    @resource\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[56,0]],"newRange":[[56,0],[59,0]],"oldText":"","newText":"  def duration\n    if instantaneous?\n      0\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,0],[61,0]],"newRange":[[59,0],[59,0]],"oldText":"  def valid?(context=nil)\n    core_validity = super context\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[62,0]],"oldText":"","newText":"    else\n      measurement_at.end - measurement_at.begin\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[62,0],[69,0]],"newRange":[[62,0],[62,0]],"oldText":"    self.tags.each do |tag|\n      klass = tags_helper.registered_tags[tag]\n      if klass.present?\n        validates_with tags_helper.validator_for(klass)\n      else\n        self.errors.add(:tag, \"#{CGI.escape(tag)} is invalid.\")\n      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[63,0],[63,0]],"newRange":[[63,0],[64,0]],"oldText":"","newText":"  end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[65,0],[65,0]],"newRange":[[65,0],[71,0]],"oldText":"","newText":"  def collected_at\n    @collected_at ||= if instantaneous?\n                        measurement_at\n                      else\n                        measurement_at.end\n                      end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[71,0],[72,0]],"newRange":[[71,0],[71,0]],"oldText":"    core_validity && self.errors.blank?\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[73,0],[73,0]],"newRange":[[73,0],[80,0]],"oldText":"","newText":"  def measurement_started_at\n    if instantaneous?\n      measurement_at\n\n    else\n      measurement_at.begin\n    end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[80,0],[84,0]],"newRange":[[80,0],[80,0]],"oldText":"  def save\n    return false unless valid?\n    generate_id unless persisted?\n    save_to_flume\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[82,0],[82,0]],"newRange":[[82,0],[84,0]],"oldText":"","newText":"  def instantaneous?\n    ! rangish? measurement_at\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[84,0],[86,0]],"newRange":[[84,0],[84,0]],"oldText":"  def instrument_href\n    instrument_id\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[86,0],[86,0]],"newRange":[[86,0],[92,0]],"oldText":"","newText":"  validates_presence_of :measurement_at, :measurement_by\n\n  validate :tag_validations\n\n  def tags\n    @tags ||= []\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[92,0],[94,0]],"newRange":[[92,0],[92,0]],"oldText":"  def tag_hrefs\n    tags || []\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[94,0],[94,0]],"newRange":[[94,0],[98,0]],"oldText":"","newText":"  alias_method :tag_hrefs, :tags\n\n  def numeric?\n    Numeric === value\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[98,0],[110,0]],"newRange":[[98,0],[98,0]],"oldText":"  # Returns the collected_at Time or the raw value if it is not\n  # coercible to Time.\n  def collected_at\n    @collected_at ||= if @raw_collected_at.respond_to?(:iso8601)\n                        # it's already a date-time-ish thing\n                        @raw_collected_at.to_time\n                      else\n                        Time.iso8601(@raw_collected_at.to_s)\n                      end\n  rescue ArgumentError\n    # invalid date format\n    @raw_collected_at\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[100,0],[100,0]],"newRange":[[100,0],[102,0]],"oldText":"","newText":"  def textual?\n    ! numeric?\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[102,0],[105,0]],"newRange":[[102,0],[102,0]],"oldText":"  def collected_at=(a_datetime_ish)\n    @collected_at = nil\n    @raw_collected_at = a_datetime_ish\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[104,0],[104,0]],"newRange":[[104,0],[108,0]],"oldText":"","newText":"  def ==(other)\n    surrogate_key.to_s == other.surrogate_key.to_s\n  end\n  alias_method :eql?, :==\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[108,0],[109,0]],"newRange":[[108,0],[108,0]],"oldText":"  attr_reader :raw\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[109,0],[109,0]],"newRange":[[109,0],[110,0]],"oldText":"","newText":"  protected\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[110,0],[111,0]],"newRange":[[110,0],[110,0]],"oldText":"  validates_presence_of :value, :collected_at, :instrument_id\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[111,0],[111,0]],"newRange":[[111,0],[115,0]],"oldText":"","newText":"\n  def rangish?(obj)\n    obj.respond_to?(:begin) &&\n      obj.respond_to?(:end)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[115,0],[118,0]],"newRange":[[115,0],[115,0]],"oldText":"  validates_each :collected_at do |observation, attr, value|\n    next if Time === value\n    observation.errors.add(attr, \"is invalid.  Please provide in RFC 3339 format.\")\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[117,0],[117,0]],"newRange":[[117,0],[118,0]],"oldText":"","newText":"  validates :measurement_by, :measurement_at, :value, :unit, presence: true\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[118,0],[119,0]],"newRange":[[118,0],[118,0]],"oldText":"  protected\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[119,0],[119,0]],"newRange":[[119,0],[123,0]],"oldText":"","newText":"  validate :tag_validations\n\n  def tag_validations\n    validates_with *tags_validators\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[123,0],[125,0]],"newRange":[[123,0],[123,0]],"oldText":"  def generate_id\n    self.id = SecureRandom.uuid\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[125,0],[125,0]],"newRange":[[125,0],[127,0]],"oldText":"","newText":"  def recorder\n    ObservationRecorder.new(Rails.application.master_dataset_facts_recorder)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[127,0],[129,0]],"newRange":[[127,0],[127,0]],"oldText":"  def save_to_flume\n    Rails.logger.info(\"Saving resource!\") # TODO: Save to flume\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[132,0],[132,0]],"newRange":[[132,0],[138,0]],"oldText":"","newText":"\n  def tags_validators\n    return [] if tags.nil? or tags.blank?\n\n    tags.map {|a_tag| tags_helper.validator_for a_tag }\n  end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[153,0],[155,0]],"newRange":[[153,0],[153,0]],"oldText":"\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-observations/app/models/observation.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a7277948bc823a61bccba3346ebd5ae6867877d8","deserializer":"TextBuffer"},{"text":"require 'persistable_record_set'\n\nclass ObservationsController < ApplicationController\n  def create\n    input = ObservationInterpreter.new_from_json(request.raw_post)\n    @observations = ObservationCollectionCreationOrchestrator\n      .new(input.observations, url_helper: self)\n      .call()\n\n    head :status => 201\n  end\n\n  def index\n    from = Time.iso8601 params.fetch(:since)\n    to = Time.iso8601 params.fetch(:before)\n    sensor = params.fetch(:by)\n\n    @observations = ObservationsByMetricInstrumentAndTime\n      .new during: from...to, by: sensor, about: metric_of_interest_url\n\n    if coalesce_period\n      @observations = CoalescedObservations.new(start_time: from, period: coalesce_period,\n                                                tags: tags_of_interest,\n                                                observations: @observations)\n    end\n  end\n\n  attr_reader :observations\n\n  protected\n\n  def tags_of_interest\n    [metric_of_interest_url]\n   end\n\n  def metric_of_interest_url\n    params.fetch(:about)\n  end\n\n  def coalesce_period\n    Float(params.fetch(:coalesce_period))\n  rescue KeyError\n    nil\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[17,57],[17,57]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":100,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[0,0],[2,0]],"newRange":[[0,0],[0,0]],"oldText":"require 'persistable_record_set'\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[6,0]],"oldText":"","newText":"    if observations.any? &:invalid?\n      render :status => 422\n      return\n    end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[10,0]],"newRange":[[6,0],[6,0]],"oldText":"    input = ObservationInterpreter.new_from_json(request.raw_post)\n    @observations = ObservationCollectionCreationOrchestrator\n      .new(input.observations, url_helper: self)\n      .call()\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[8,0]],"oldText":"","newText":"    observation_recorder.record_all observations\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[10,0]],"newRange":[[8,0],[8,0]],"oldText":"    head :status => 201\n  end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[10,0]],"oldText":"","newText":"    render :status => 200\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[10,0],[23,0]],"newRange":[[10,0],[10,0]],"oldText":"  def index\n    from = Time.iso8601 params.fetch(:since)\n    to = Time.iso8601 params.fetch(:before)\n    sensor = params.fetch(:by)\n\n    @observations = ObservationsByMetricInstrumentAndTime\n      .new during: from...to, by: sensor, about: metric_of_interest_url\n\n    if coalesce_period\n      @observations = CoalescedObservations.new(start_time: from, period: coalesce_period,\n                                                tags: tags_of_interest,\n                                                observations: @observations)\n    end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[14,0]],"oldText":"","newText":"  def observation_recorder\n    ObservationRecorder.new(master_dataset_facts_recorder)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[24,0]],"newRange":[[14,0],[14,0]],"oldText":"  attr_reader :observations\n\n  protected\n\n  def tags_of_interest\n    [metric_of_interest_url]\n   end\n\n  def metric_of_interest_url\n    params.fetch(:about)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[18,0]],"oldText":"","newText":"  def observations\n    @observations ||= ObservationInterpreter.new(request.raw_post).create\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[18,0],[22,0]],"newRange":[[18,0],[18,0]],"oldText":"  def coalesce_period\n    Float(params.fetch(:coalesce_period))\n  rescue KeyError\n    nil\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[2,0]],"oldText":"","newText":"require 'persistable_record_set'\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[8,0]],"oldText":"","newText":"    input = ObservationInterpreter.new_from_json(request.raw_post)\n    @observations = ObservationCollectionCreationOrchestrator\n      .new(input.observations, url_helper: self)\n      .call()\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[12,0]],"newRange":[[8,0],[8,0]],"oldText":"    if observations.any? &:invalid?\n      render :status => 422\n      return\n    end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[11,0]],"oldText":"","newText":"    head :status => 201\n  end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[12,0]],"newRange":[[11,0],[11,0]],"oldText":"    observation_recorder.record_all observations\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[25,0]],"oldText":"","newText":"  def index\n    from = Time.iso8601 params.fetch(:since)\n    to = Time.iso8601 params.fetch(:before)\n    sensor = params.fetch(:by)\n\n    @observations = ObservationsByMetricInstrumentAndTime\n      .new during: from...to, by: sensor, about: metric_of_interest_url\n\n    if coalesce_period\n      @observations = CoalescedObservations.new(start_time: from, period: coalesce_period,\n                                                tags: tags_of_interest,\n                                                observations: @observations)\n    end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[25,0],[26,0]],"newRange":[[25,0],[25,0]],"oldText":"    render :status => 200\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[27,0]],"newRange":[[27,0],[37,0]],"oldText":"","newText":"  attr_reader :observations\n\n  protected\n\n  def tags_of_interest\n    [metric_of_interest_url]\n   end\n\n  def metric_of_interest_url\n    params.fetch(:about)\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[37,0],[39,0]],"newRange":[[37,0],[37,0]],"oldText":"  def observation_recorder\n    ObservationRecorder.new(master_dataset_facts_recorder)\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[39,0]],"newRange":[[39,0],[43,0]],"oldText":"","newText":"  def coalesce_period\n    Float(params.fetch(:coalesce_period))\n  rescue KeyError\n    nil\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[45,0]],"newRange":[[43,0],[43,0]],"oldText":"  def observations\n    @observations ||= ObservationInterpreter.new(request.raw_post).create\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-observations/app/controllers/observations_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3c88d547f1456c8a9950e6a694c25e2e7980e63d","deserializer":"TextBuffer"},{"text":"require 'time_interval'\n\nclass ObservationInterpreter\n  include HalInterpretation\n\n  item_class Observation\n\n  timestamp_parser = ->(str) {\n    begin\n      TimeInterval.parse_8601( str )\n    rescue ArgumentError\n      fail ArgumentError, \"must be a valid RFC3339 date time\"\n    end\n  }\n\n  extract :value\n  extract :unit, from: 'unitCode'\n  extract :measurement_at, from: 'measurementAt', coercion: timestamp_parser\n  extract :collected_at, from: 'collectedAt', coercion: timestamp_parser\n  extract :tags, with: ->(hal_repr) { hal_repr.related_hrefs(\"tag\") },\n          from: \"/_links/tags\"\n  extract :measurement_by,\n          with: ->(hal_repr) { hal_repr.related(\"http://schema.org/instrument\").first.href },\n          from: \"/_links/http:~1~1schema.org~1instrument\"\n\n  alias_method :observations, :items\nend\n","markers":{"markers":{"1":{"id":1,"range":[[9,0],[9,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":144,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[0,0],[2,0]],"newRange":[[0,0],[0,0]],"oldText":"require 'time_interval'\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"  attr_reader :observations\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"  include HalInterpretation\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[3,0],[3,0]],"newRange":[[3,0],[6,0]],"oldText":"","newText":"  def initialize(json)\n    @resource = MultiJson.load(json)\n  end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[7,0]],"newRange":[[6,0],[6,0]],"oldText":"  item_class Observation\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[14,0]],"oldText":"","newText":"  def create\n    @observations = create_observations\n\n    if observations_valid?(observations)\n      observations.map(&:save)\n    else\n      Rails.logger.error(\"Error saving observations: #{observations.to_json}\")\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[19,0]],"newRange":[[14,0],[14,0]],"oldText":"  timestamp_parser = ->(str) {\n    begin\n      TimeInterval.parse_8601( str )\n    rescue ArgumentError\n      fail ArgumentError, \"must be a valid RFC3339 date time\"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[16,0]],"newRange":[[15,0],[15,0]],"oldText":"  }\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[18,0]],"oldText":"","newText":"    observations\n  end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[18,0],[27,0]],"newRange":[[18,0],[18,0]],"oldText":"  extract :value\n  extract :unit, from: 'unitCode'\n  extract :measurement_at, from: 'measurementAt', coercion: timestamp_parser\n  extract :collected_at, from: 'collectedAt', coercion: timestamp_parser\n  extract :tags, with: ->(hal_repr) { hal_repr.related_hrefs(\"tag\") },\n          from: \"/_links/tags\"\n  extract :measurement_by,\n          with: ->(hal_repr) { hal_repr.related(\"http://schema.org/instrument\").first.href },\n          from: \"/_links/http:~1~1schema.org~1instrument\"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[19,0],[19,0]],"newRange":[[19,0],[37,0]],"oldText":"","newText":"  protected\n\n  def create_observations\n    @resource[\"_embedded\"][\"item\"].map do | item|\n      observation = Observation.new\n      observation.resource = item\n      observation\n    end\n  end\n\n  # Validate all observations before saving anything to ensure we\n  # don't have partially saved observations in a set\n  def observations_valid?(observations)\n    @observations.reduce(true) do |memo, observation|\n      memo &&= observation.valid?\n    end\n  end\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[37,0],[38,0]],"newRange":[[37,0],[37,0]],"oldText":"  alias_method :observations, :items\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[2,0]],"oldText":"","newText":"require 'time_interval'\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[3,0],[3,0]],"newRange":[[3,0],[4,0]],"oldText":"","newText":"  include HalInterpretation\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[4,0],[5,0]],"newRange":[[4,0],[4,0]],"oldText":"  attr_reader :observations\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[6,0]],"oldText":"","newText":"  item_class Observation\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[9,0]],"newRange":[[6,0],[6,0]],"oldText":"  def initialize(json)\n    @resource = MultiJson.load(json)\n  end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[12,0]],"oldText":"","newText":"  timestamp_parser = ->(str) {\n    begin\n      TimeInterval.parse_8601( str )\n    rescue ArgumentError\n      fail ArgumentError, \"must be a valid RFC3339 date time\"\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[19,0]],"newRange":[[12,0],[12,0]],"oldText":"  def create\n    @observations = create_observations\n\n    if observations_valid?(observations)\n      observations.map(&:save)\n    else\n      Rails.logger.error(\"Error saving observations: #{observations.to_json}\")\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[13,0],[13,0]],"newRange":[[13,0],[14,0]],"oldText":"","newText":"  }\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[15,0],[15,0]],"newRange":[[15,0],[24,0]],"oldText":"","newText":"  extract :value\n  extract :unit, from: 'unitCode'\n  extract :measurement_at, from: 'measurementAt', coercion: timestamp_parser\n  extract :collected_at, from: 'collectedAt', coercion: timestamp_parser\n  extract :tags, with: ->(hal_repr) { hal_repr.related_hrefs(\"tag\") },\n          from: \"/_links/tags\"\n  extract :measurement_by,\n          with: ->(hal_repr) { hal_repr.related(\"http://schema.org/instrument\").first.href },\n          from: \"/_links/http:~1~1schema.org~1instrument\"\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[24,0],[26,0]],"newRange":[[24,0],[24,0]],"oldText":"    observations\n  end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[25,0],[25,0]],"newRange":[[25,0],[26,0]],"oldText":"","newText":"  alias_method :observations, :items\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[26,0],[44,0]],"newRange":[[26,0],[26,0]],"oldText":"  protected\n\n  def create_observations\n    @resource[\"_embedded\"][\"item\"].map do | item|\n      observation = Observation.new\n      observation.resource = item\n      observation\n    end\n  end\n\n  # Validate all observations before saving anything to ensure we\n  # don't have partially saved observations in a set\n  def observations_valid?(observations)\n    @observations.reduce(true) do |memo, observation|\n      memo &&= observation.valid?\n    end\n  end\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-observations/app/interpreters/observation_interpreter.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f6fb5deaaf6df6edb0a46c41acde107f7dc3cc78","deserializer":"TextBuffer"},{"text":"source 'https://rubygems.org'\n\ngem 'aa-map-reduce', git: \"git@github.comverge.com:software/aa-map-reduce.git\", tag: \"v0.1.0\"\ngem 'aa-fact-recorder', git: \"git@github.comverge.com:software/aa-fact-recorder.git\", tag: 'v1.2.1'\ngem 'aa-auth', git: \"git@github.comverge.com:software/aa-auth.git\", branch: \"master\"\ngem 'hal-client', \"~>2.3.1\"\n\ngem 'thrift'\ngem 'thin' # Used by thrift?\n\ngem 'rails', '4.0.2'\ngem 'rails-api'\ngem 'jbuilder'\ngem 'puma'\ngem 'rack-cors'\n\ngem 'cequel', git: \"https://github.com/pezra/cequel.git\", branch: \"batches-of-ranged-query\"\ngem 'hal-interpretation', \"~> 1.1\"\n\ngem 'timerage'\n\n# Monitoring!\ngem \"statsd-ruby\"\ngem 'nunes'\n\ngroup :development do\n  gem 'capistrano'\nend\n\ngroup :development, :test do\n  gem 'byebug'\n  gem 'rspec-rails', '~>3.0.0.beta'\n  gem 'awesome_print'\n  gem 'addressable'\n  gem 'rspec', '~>3.0.0.beta'\n\n  gem 'guard'\n  gem 'guard-rspec'\nend\n","markers":{"markers":{"1":{"id":1,"range":[[19,14],[19,14]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":148,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[3,0]],"oldText":"","newText":"gem 'aa-fact-recorder', git: \"https://github.comverge.com/software/aa-fact-recorder.git\", tag: \"v1.0.1\"\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[3,0],[7,0]],"newRange":[[3,0],[3,0]],"oldText":"gem 'aa-map-reduce', git: \"git@github.comverge.com:software/aa-map-reduce.git\", tag: \"v0.1.0\"\ngem 'aa-fact-recorder', git: \"git@github.comverge.com:software/aa-fact-recorder.git\", tag: 'v1.2.1'\ngem 'aa-auth', git: \"git@github.comverge.com:software/aa-auth.git\", branch: \"master\"\ngem 'hal-client', \"~>2.3.1\"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[4,0],[7,0]],"newRange":[[4,0],[4,0]],"oldText":"gem 'thrift'\ngem 'thin' # Used by thrift?\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,0],[9,0]],"newRange":[[8,0],[8,0]],"oldText":"gem 'rack-cors'\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[18,0]],"newRange":[[9,0],[9,0]],"oldText":"gem 'cequel', git: \"https://github.com/pezra/cequel.git\", branch: \"batches-of-ranged-query\"\ngem 'hal-interpretation', \"~> 1.1\"\n\ngem 'timerage'\n\n# Monitoring!\ngem \"statsd-ruby\"\ngem 'nunes'\n\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[17,0],[17,0]],"newRange":[[17,0],[21,0]],"oldText":"","newText":"end\n\ngroup :test do\n  gem 'simplecov', :require => false\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[21,0],[22,0]],"newRange":[[21,0],[21,0]],"oldText":"  gem 'addressable'\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[22,0],[25,0]],"newRange":[[22,0],[22,0]],"oldText":"\n  gem 'guard'\n  gem 'guard-rspec'\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[6,0]],"oldText":"","newText":"gem 'aa-map-reduce', git: \"git@github.comverge.com:software/aa-map-reduce.git\", tag: \"v0.1.0\"\ngem 'aa-fact-recorder', git: \"git@github.comverge.com:software/aa-fact-recorder.git\", tag: 'v1.2.1'\ngem 'aa-auth', git: \"git@github.comverge.com:software/aa-auth.git\", branch: \"master\"\ngem 'hal-client', \"~>2.3.1\"\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[7,0]],"newRange":[[6,0],[6,0]],"oldText":"gem 'aa-fact-recorder', git: \"https://github.comverge.com/software/aa-fact-recorder.git\", tag: \"v1.0.1\"\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[10,0]],"oldText":"","newText":"gem 'thrift'\ngem 'thin' # Used by thrift?\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[14,0]],"newRange":[[14,0],[15,0]],"oldText":"","newText":"gem 'rack-cors'\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,0],[16,0]],"newRange":[[16,0],[25,0]],"oldText":"","newText":"gem 'cequel', git: \"https://github.com/pezra/cequel.git\", branch: \"batches-of-ranged-query\"\ngem 'hal-interpretation', \"~> 1.1\"\n\ngem 'timerage'\n\n# Monitoring!\ngem \"statsd-ruby\"\ngem 'nunes'\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,0],[33,0]],"newRange":[[33,0],[35,0]],"oldText":"","newText":"  gem 'addressable'\n  gem 'rspec', '~>3.0.0.beta'\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[35,0],[36,0]],"newRange":[[35,0],[35,0]],"oldText":"end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[36,0],[36,0]],"newRange":[[36,0],[38,0]],"oldText":"","newText":"  gem 'guard'\n  gem 'guard-rspec'\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[41,0]],"newRange":[[38,0],[38,0]],"oldText":"group :test do\n  gem 'simplecov', :require => false\n  gem 'rspec', '~>3.0.0.beta'\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[{"patches":[{"oldRange":[[19,14],[19,15]],"newRange":[[19,14],[19,14]],"oldText":",","newText":"","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"filePath":"/Users/tra/src/advanced-apps/aa-observations/Gemfile","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"fb284e66932730b3b41211db260781f6f3170fa6","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":84,"softTabs":true,"displayBuffer":{"id":85,"softWrap":false,"editorWidthInChars":119,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-observations/app/models/observation.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":100,"softTabs":true,"displayBuffer":{"id":101,"softWrap":false,"editorWidthInChars":119,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-observations/app/controllers/observations_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":144,"softTabs":true,"displayBuffer":{"id":145,"softWrap":false,"editorWidthInChars":119,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-observations/app/interpreters/observation_interpreter.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":148,"softTabs":true,"displayBuffer":{"id":149,"softWrap":false,"editorWidthInChars":119,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tra/src/advanced-apps/aa-observations/Gemfile","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/tra/src/advanced-apps/aa-observations/Gemfile","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":[],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["Timerage","TimeInterval","timerage"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/tra/src/advanced-apps/aa-observations/app/models/observation.rb":1401726841892,"/Users/tra/src/advanced-apps/aa-observations/app/controllers/observations_controller.rb":1401737369385,"/Users/tra/src/advanced-apps/aa-observations/app/interpreters/observation_interpreter.rb":1401741778276,"/Users/tra/src/advanced-apps/aa-observations/Gemfile":1401741830629},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":24256727},"tree-view":{"directoryExpansionStates":{"app":{"controllers":{},"models":{}},"lib":{}},"selectedPath":"/Users/tra/src/advanced-apps/aa-observations/vendor","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":305}}}